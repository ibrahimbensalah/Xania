"use strict";
var peg = require("./fsharp.peg");
function accept(ast, visitor, context) {
    if (ast.type === undefined)
        return ast;
    switch (ast.type) {
        case "where":
            return visitor.where(accept(ast.source, visitor, context), accept(ast.predicate, visitor, context));
        case "query":
            return visitor.query(ast.param, accept(ast.source, visitor, context));
        case "ident":
            return visitor.member(context, ast.name);
        case "member":
            return visitor.member(accept(ast.target, visitor, context), accept(ast.member, visitor, context));
        case "app":
            var args = [];
            for (var i_1 = 0; i_1 < ast.args.length; i_1++) {
                var arg = accept(ast.args[i_1], visitor, context);
                if (typeof arg === "undefined")
                    return undefined;
                args.push(arg);
            }
            return visitor.app(accept(ast.fun, visitor, context), args);
        case "select":
            return visitor.select(accept(ast.source, visitor, context), function (s) { return accept(ast.selector, visitor, s); });
        case "const":
            return visitor.const(ast.value);
        case "range":
            var first = accept(ast.from, visitor, context);
            var last = accept(ast.to, visitor, context);
            if (typeof first === "undefined" || typeof last === "undefined")
                return undefined;
            var arr = [];
            for (var i = first; i <= last; i++)
                arr.push(i);
            return arr;
        case "binary":
            var left = accept(ast.left, visitor, context);
            var right = accept(ast.right, visitor, context);
            if (typeof left === "undefined" || typeof right === "undefined")
                return undefined;
            return visitor.app(ast.op, [right, left]);
        case "await":
            return visitor.await(accept(ast.expr, visitor, context));
        case "pipe":
            throw Error("Not implement yet");
        default:
            throw new Error("not supported type " + ast.type);
    }
}
exports.accept = accept;
exports.fsharp = peg.parse;
function fs(expr) {
    return {
        ast: peg.parse(expr),
        execute: function (binding, context) {
            return accept(this.ast, binding, context);
        }
    };
}
exports.fs = fs;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnNoYXJwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2ZzaGFycC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBWUEsSUFBSSxHQUFHLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBSWxDLGdCQUF1QixHQUFRLEVBQUUsT0FBb0IsRUFBRSxPQUFPO0lBQzFELEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEtBQUssU0FBUyxDQUFDO1FBQ3ZCLE1BQU0sQ0FBQyxHQUFHLENBQUM7SUFFZixNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNmLEtBQUssT0FBTztZQUNSLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUN4RyxLQUFLLE9BQU87WUFDUixNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQzFFLEtBQUssT0FBTztZQUNSLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDN0MsS0FBSyxRQUFRO1lBQ1QsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3RHLEtBQUssS0FBSztZQUNOLElBQU0sSUFBSSxHQUFH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S0FBSyxDQUFDO0FBRTlCLFlBQW1CLElBQUk7SUFDbkIsTUFBTSxDQUFDO1FBQ0gsR0FBRyxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO1FBQ3BCLE9BQU8sWUFBQyxPQUFvQixFQUFFLE9BQVk7WUFDdEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUM5QyxDQUFDO0tBQ0osQ0FBQTtBQUNMLENBQUM7QUFQRCxnQkFPQyIsInNvdXJjZXNDb250ZW50IjpbImludGVyZmFjZSBJQXN0VmlzaXRvciB7XHJcbiAgICB3aGVyZShzb3VyY2UsIHByZWRpY2F0ZSk7XHJcbiAgICBzZWxlY3Qoc291cmNlLCBzZWxlY3Rvcik7XHJcbiAgICBxdWVyeShwYXJhbSwgc291cmNlKTtcclxuICAgIG1lbWJlcih0YXJnZXQsIG5hbWUpO1xyXG4gICAgYXBwKGZ1biwgYXJnczogYW55W10pO1xyXG4gICAgYXdhaXQob2JzZXJ2YWJsZSk7XHJcbiAgICBjb25zdCh2YWx1ZSk7XHJcbn1cclxuXHJcbmRlY2xhcmUgZnVuY3Rpb24gcmVxdWlyZShtb2R1bGU6IHN0cmluZyk7XHJcblxyXG52YXIgcGVnID0gcmVxdWlyZShcIi4vZnNoYXJwLnBlZ1wiKTtcclxuXHJcbi8vIHZhciBmc2hhcnAgPSBwZWcucGFyc2U7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWNjZXB0KGFzdDogYW55LCB2aXNpdG9yOiBJQXN0VmlzaXRvciwgY29udGV4dCkge1xyXG4gICAgaWYgKGFzdC50eXBlID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgcmV0dXJuIGFzdDtcclxuXHJcbiAgICBzd2l0Y2ggKGFzdC50eXBlKSB7XHJcbiAgICAgICAgY2FzZSBcIndoZXJlXCI6XHJcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLndoZXJlKGFjY2VwdChhc3Quc291cmNlLCB2aXNpdG9yLCBjb250ZXh0KSwgYWNjZXB0KGFzdC5wcmVkaWNhdGUsIHZpc2l0b3IsIGNvbnRleHQpKTtcclxuICAgICAgICBjYXNlIFwicXVlcnlcIjpcclxuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IucXVlcnkoYXN0LnBhcmFtLCBhY2NlcHQoYXN0LnNvdXJjZSwgdmlzaXRvciwgY29udGV4dCkpO1xyXG4gICAgICAgIGNhc2UgXCJpZGVudFwiOlxyXG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci5tZW1iZXIoY29udGV4dCwgYXN0Lm5hbWUpO1xyXG4gICAgICAgIGNhc2UgXCJtZW1iZXJcIjpcclxuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IubWVtYmVyKGFjY2VwdChhc3QudGFyZ2V0LCB2aXNpdG9yLCBjb250ZXh0KSwgYWNjZXB0KGFzdC5tZW1iZXIsIHZpc2l0b3IsIGNvbnRleHQpKTtcclxuICAgICAgICBjYXNlIFwiYXBwXCI6XHJcbiAgICAgICAgICAgIGNvbnN0IGFyZ3MgPSBbXTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhc3QuYXJncy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFyZyA9IGFjY2VwdChhc3QuYXJnc1tpXSwgdmlzaXRvciwgY29udGV4dCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFyZyA9PT0gXCJ1bmRlZmluZWRcIilcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgYXJncy5wdXNoKGFyZyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IuYXBwKGFjY2VwdChhc3QuZnVuLCB2aXNpdG9yLCBjb250ZXh0KSwgYXJncyk7XHJcbiAgICAgICAgY2FzZSBcInNlbGVjdFwiOlxyXG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci5zZWxlY3QoYWNjZXB0KGFzdC5zb3VyY2UsIHZpc2l0b3IsIGNvbnRleHQpLCBzID0+IGFjY2VwdChhc3Quc2VsZWN0b3IsIHZpc2l0b3IsIHMpKTtcclxuICAgICAgICBjYXNlIFwiY29uc3RcIjpcclxuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IuY29uc3QoYXN0LnZhbHVlKTtcclxuICAgICAgICBjYXNlIFwicmFuZ2VcIjpcclxuICAgICAgICAgICAgdmFyIGZpcnN0ID0gYWNjZXB0KGFzdC5mcm9tLCB2aXNpdG9yLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgdmFyIGxhc3QgPSBhY2NlcHQoYXN0LnRvLCB2aXNpdG9yLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBmaXJzdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCB0eXBlb2YgbGFzdCA9PT0gXCJ1bmRlZmluZWRcIilcclxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIHZhciBhcnIgPSBbXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IGZpcnN0OyBpIDw9IGxhc3Q7IGkrKylcclxuICAgICAgICAgICAgICAgIGFyci5wdXNoKGkpO1xyXG4gICAgICAgICAgICByZXR1cm4gYXJyO1xyXG4gICAgICAgIGNhc2UgXCJiaW5hcnlcIjpcclxuICAgICAgICAgICAgdmFyIGxlZnQgPSBhY2NlcHQoYXN0LmxlZnQsIHZpc2l0b3IsIGNvbnRleHQpO1xyXG4gICAgICAgICAgICB2YXIgcmlnaHQgPSBhY2NlcHQoYXN0LnJpZ2h0LCB2aXNpdG9yLCBjb250ZXh0KTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbGVmdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCB0eXBlb2YgcmlnaHQgPT09IFwidW5kZWZpbmVkXCIpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IuYXBwKGFzdC5vcCwgW3JpZ2h0LCBsZWZ0XSk7XHJcbiAgICAgICAgY2FzZSBcImF3YWl0XCI6XHJcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLmF3YWl0KGFjY2VwdChhc3QuZXhwciwgdmlzaXRvciwgY29udGV4dCkpO1xyXG4gICAgICAgIGNhc2UgXCJwaXBlXCI6XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKFwiTm90IGltcGxlbWVudCB5ZXRcIik7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBub3Qgc3VwcG9ydGVkIHR5cGUgJHthc3QudHlwZX1gKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHZhciBmc2hhcnAgPSBwZWcucGFyc2U7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZnMoZXhwcikge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBhc3Q6IHBlZy5wYXJzZShleHByKSxcclxuICAgICAgICBleGVjdXRlKGJpbmRpbmc6IElBc3RWaXNpdG9yLCBjb250ZXh0OiBhbnkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGFjY2VwdCh0aGlzLmFzdCwgYmluZGluZywgY29udGV4dCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59Il19