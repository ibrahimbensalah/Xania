"use strict";
var peg = require("./fsharp.peg");
var WHERE = "where";
var QUERY = "query";
var IDENT = "ident";
var MEMBER = "member";
var APP = "app";
var SELECT = "select";
var CONST = "const";
var RANGE = "range";
var BINARY = "binary";
var AWAIT = "await";
function accept(ast, visitor, context) {
    if (ast.type === undefined)
        return ast;
    switch (ast.type) {
        case WHERE:
            return visitor.where(accept(ast.source, visitor, context), accept(ast.predicate, visitor, context));
        case QUERY:
            return visitor.query(ast.param, accept(ast.source, visitor, context));
        case IDENT:
            return visitor.member(context, ast.name);
        case MEMBER:
            return visitor.member(accept(ast.target, visitor, context), accept(ast.member, visitor, context));
        case APP:
            var args = [];
            for (var i_1 = 0; i_1 < ast.args.length; i_1++) {
                var arg = accept(ast.args[i_1], visitor, context);
                if (arg === void 0)
                    return arg;
                args.push(arg);
            }
            return visitor.app(accept(ast.fun, visitor, context), args);
        case SELECT:
            return visitor.select(accept(ast.source, visitor, context), function (s) { return accept(ast.selector, visitor, s); });
        case CONST:
            return visitor.const(ast.value);
        case RANGE:
            var first = accept(ast.from, visitor, context);
            var last = accept(ast.to, visitor, context);
            if (first === void 0 || last === void 0)
                return undefined;
            var arr = [];
            for (var i = first; i <= last; i++)
                arr.push(i);
            return arr;
        case BINARY:
            var left = accept(ast.left, visitor, context);
            var right = accept(ast.right, visitor, context);
            if (left === void 0 || right === void 0)
                return undefined;
            return visitor.app(ast.op, [right, left]);
        case AWAIT:
            return visitor.await(accept(ast.expr, visitor, context));
        default:
            throw new Error("not supported type " + ast.type);
    }
}
exports.accept = accept;
exports.fsharp = peg.parse;
function fs(expr) {
    return {
        ast: peg.parse(expr),
        execute: function (binding, context) {
            return accept(this.ast, binding, context);
        }
    };
}
exports.fs = fs;
//# sourceMappingURL=data:application/json;base64,