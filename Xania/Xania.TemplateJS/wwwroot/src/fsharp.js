"use strict";
var peg = require("./fsharp.peg");
function accept(ast, visitor, context) {
    if (ast === null || ast === undefined)
        return null;
    if (ast.type === undefined)
        return ast;
    switch (ast.type) {
        case "where":
            return visitor.where(accept(ast.source, visitor, context), accept(ast.predicate, visitor, context));
        case "query":
            return visitor.query(ast.param, accept(ast.source, visitor, context));
        case "ident":
            return visitor.member(context, ast.name);
        case "member":
            return visitor.member(accept(ast.target, visitor, context), accept(ast.member, visitor, context));
        case "app":
            var args = [];
            for (var i_1 = 0; i_1 < ast.args.length; i_1++) {
                args.push(accept(ast.args[i_1], visitor, context));
            }
            return visitor.app(accept(ast.fun, visitor, context), args);
        case "select":
            return visitor.select(accept(ast.source, visitor, context), function (s) { return accept(ast.selector, visitor, s); });
        case "const":
            return visitor.const(ast.value);
        case "range":
            var first = accept(ast.from, visitor, context);
            var last = accept(ast.to, visitor, context);
            var arr = [];
            for (var i = first; i <= last; i++)
                arr.push(i);
            return arr;
        default:
            throw new Error("not supported type " + ast.type);
    }
}
exports.accept = accept;
exports.fsharp = peg.parse;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnNoYXJwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2ZzaGFycC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBV0EsSUFBSSxHQUFHLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBSWxDLGdCQUF1QixHQUFRLEVBQUUsT0FBb0IsRUFBRSxPQUFPO0lBQzFELEVBQUUsQ0FBQyxDQUFDLEdBQUcsS0FBSyxJQUFJLElBQUksR0FBRyxLQUFLLFNBQVMsQ0FBQztRQUNsQyxNQUFNLENBQUMsSUFBSSxDQUFDO0lBRWhCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEtBQUssU0FBUyxDQUFDO1FBQ3ZCLE1BQU0sQ0FBQyxHQUFHLENBQUM7SUFFZixNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNmLEtBQUssT0FBTztZQUNSLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUN4RyxLQUFLLE9BQU87WUFDUixNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQzFFLEtBQUssT0FBTztZQUNSLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDN0MsS0FBSyxRQUFRO1lBQ1QsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3RHLEtBQUssS0FBSztZQUNOLElBQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQztZQUNoQixHQUFHLENBQUMsQ0FBQyxJQUFJLEdBQUMsR0FBRyxDQUFDLEVBQUUsR0FBQyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUMsRUFBRSxFQUFFLENBQUM7Z0JBQ3ZDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDckQsQ0FBQztZQUNELE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNoRSxLQUFLLFFBQVE7WUFDVCxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLEVBQUUsVUFBQSxDQUFDLElBQUksT0FBQSxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLEVBQWhDLENBQWdDLENBQUMsQ0FBQztRQUN2RyxLQUFLLE9BQU87WUFDUixNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDcEMsS0FBSyxPQUFPO1lBQ1IsSUFBSSxLQUFLLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQy9DLElBQUksSUFBSSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztZQUM1QyxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUM7WUFDYixHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLEVBQUU7Z0JBQzlCLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDaEIsTUFBTSxDQUFDLEdBQUcsQ0FBQztRQUNmO1lBQ0ksTUFBTSxJQUFJLEtBQUssQ0FBQyx3QkFBc0IsR0FBRyxDQUFDLElBQU0sQ0FBQyxDQUFDO0lBQzFELENBQUM7QUFDTCxDQUFDO0FBcENELHdCQW9DQztBQUVVLFFBQUEsTUFBTSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbnRlcmZhY2UgSUFzdFZpc2l0b3Ige1xyXG4gICAgd2hlcmUoc291cmNlLCBwcmVkaWNhdGUpO1xyXG4gICAgc2VsZWN0KHNvdXJjZSwgc2VsZWN0b3IpO1xyXG4gICAgcXVlcnkocGFyYW0sIHNvdXJjZSk7XHJcbiAgICBtZW1iZXIodGFyZ2V0LCBuYW1lKTtcclxuICAgIGFwcChmdW4sIGFyZ3M6IGFueVtdKTtcclxuICAgIGNvbnN0KHZhbHVlKTtcclxufVxyXG5cclxuZGVjbGFyZSBmdW5jdGlvbiByZXF1aXJlKG1vZHVsZTogc3RyaW5nKTtcclxuXHJcbnZhciBwZWcgPSByZXF1aXJlKFwiLi9mc2hhcnAucGVnXCIpO1xyXG5cclxuLy8gdmFyIGZzaGFycCA9IHBlZy5wYXJzZTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhY2NlcHQoYXN0OiBhbnksIHZpc2l0b3I6IElBc3RWaXNpdG9yLCBjb250ZXh0KSB7XHJcbiAgICBpZiAoYXN0ID09PSBudWxsIHx8IGFzdCA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG5cclxuICAgIGlmIChhc3QudHlwZSA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgIHJldHVybiBhc3Q7XHJcblxyXG4gICAgc3dpdGNoIChhc3QudHlwZSkge1xyXG4gICAgICAgIGNhc2UgXCJ3aGVyZVwiOlxyXG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci53aGVyZShhY2NlcHQoYXN0LnNvdXJjZSwgdmlzaXRvciwgY29udGV4dCksIGFjY2VwdChhc3QucHJlZGljYXRlLCB2aXNpdG9yLCBjb250ZXh0KSk7XHJcbiAgICAgICAgY2FzZSBcInF1ZXJ5XCI6XHJcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnF1ZXJ5KGFzdC5wYXJhbSwgYWNjZXB0KGFzdC5zb3VyY2UsIHZpc2l0b3IsIGNvbnRleHQpKTtcclxuICAgICAgICBjYXNlIFwiaWRlbnRcIjpcclxuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IubWVtYmVyKGNvbnRleHQsIGFzdC5uYW1lKTtcclxuICAgICAgICBjYXNlIFwibWVtYmVyXCI6XHJcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLm1lbWJlcihhY2NlcHQoYXN0LnRhcmdldCwgdmlzaXRvciwgY29udGV4dCksIGFjY2VwdChhc3QubWVtYmVyLCB2aXNpdG9yLCBjb250ZXh0KSk7XHJcbiAgICAgICAgY2FzZSBcImFwcFwiOlxyXG4gICAgICAgICAgICBjb25zdCBhcmdzID0gW107XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXN0LmFyZ3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGFyZ3MucHVzaChhY2NlcHQoYXN0LmFyZ3NbaV0sIHZpc2l0b3IsIGNvbnRleHQpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci5hcHAoYWNjZXB0KGFzdC5mdW4sIHZpc2l0b3IsIGNvbnRleHQpLCBhcmdzKTtcclxuICAgICAgICBjYXNlIFwic2VsZWN0XCI6XHJcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnNlbGVjdChhY2NlcHQoYXN0LnNvdXJjZSwgdmlzaXRvciwgY29udGV4dCksIHMgPT4gYWNjZXB0KGFzdC5zZWxlY3RvciwgdmlzaXRvciwgcykpO1xyXG4gICAgICAgIGNhc2UgXCJjb25zdFwiOlxyXG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci5jb25zdChhc3QudmFsdWUpO1xyXG4gICAgICAgIGNhc2UgXCJyYW5nZVwiOlxyXG4gICAgICAgICAgICB2YXIgZmlyc3QgPSBhY2NlcHQoYXN0LmZyb20sIHZpc2l0b3IsIGNvbnRleHQpO1xyXG4gICAgICAgICAgICB2YXIgbGFzdCA9IGFjY2VwdChhc3QudG8sIHZpc2l0b3IsIGNvbnRleHQpO1xyXG4gICAgICAgICAgICB2YXIgYXJyID0gW107XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBmaXJzdDsgaSA8PSBsYXN0OyBpKyspXHJcbiAgICAgICAgICAgICAgICBhcnIucHVzaChpKTtcclxuICAgICAgICAgICAgcmV0dXJuIGFycjtcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYG5vdCBzdXBwb3J0ZWQgdHlwZSAke2FzdC50eXBlfWApO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgdmFyIGZzaGFycCA9IHBlZy5wYXJzZTtcclxuXHJcbiJdfQ==