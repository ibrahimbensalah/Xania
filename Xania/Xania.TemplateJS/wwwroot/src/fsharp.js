"use strict";
var peg = require("./fsharp.peg");
function empty(list) {
    return list.length === 0;
}
function not(value) {
    return !value;
}
function count(list) {
    return list.length;
}
var WHERE = 1;
var QUERY = 2;
var IDENT = 3;
var MEMBER = 4;
var APP = 5;
var SELECT = 6;
var CONST = 7;
var RANGE = 8;
var BINARY = 9;
var AWAIT = 10;
var PIPE = 11;
var COMPOSE = 12;
var LAMBDA = 13;
function accept(ast, visitor, context) {
    switch (ast.type) {
        case IDENT:
            switch (ast.name) {
                case "empty":
                    return empty;
                case "count":
                    return count;
                case "not":
                    return not;
                default:
                    return visitor.member(context, ast.name);
            }
        case MEMBER:
            return visitor.member(accept(ast.target, visitor, context), accept(ast.member, visitor, context));
        case CONST:
            return visitor.const(ast.value);
        case BINARY:
            var source;
            switch (ast.op) {
                case "->":
                    source = accept(ast.left, visitor, context);
                    if (source === void 0)
                        return void 0;
                    return source.valueOf() ? accept(ast.right, visitor, source) : void 0;
                case WHERE:
                    source = accept(ast.left, visitor, context);
                    var length = visitor.member(source, "length").value;
                    var result = [];
                    for (var i = 0; i < length; i++) {
                        var item = visitor.member(source, i);
                        var scope = new Scope(visitor, [item, context]);
                        var b = accept(ast.right, visitor, scope).valueOf();
                        if (b)
                            result.push(item);
                    }
                    return result;
                default:
                    var left = accept(ast.left, visitor, context);
                    var right = accept(ast.right, visitor, context);
                    if (left === void 0 || right === void 0)
                        return void 0;
                    return visitor.app(ast.op, [right, left]);
            }
        case APP:
            var args = [];
            for (var i_1 = 0; i_1 < ast.args.length; i_1++) {
                var arg = accept(ast.args[i_1], visitor, context);
                if (arg === void 0)
                    return arg;
                args.push(arg);
            }
            return visitor.app(accept(ast.fun, visitor, context), args);
        case QUERY:
            return visitor.query(ast.param, accept(ast.source, visitor, context));
        case SELECT:
            return visitor.select(accept(ast.source, visitor, context), function (s) { return accept(ast.selector, visitor, s); });
        case WHERE:
            return visitor.where(accept(ast.source, visitor, context), accept(ast.predicate, visitor, context));
        case RANGE:
            var first = accept(ast.from, visitor, context);
            var last = accept(ast.to, visitor, context);
            if (first === void 0 || last === void 0)
                return first;
            return new Range(first.valueOf(), last.valueOf());
        case AWAIT:
            return visitor.await(accept(ast.expr, visitor, context));
        case LAMBDA:
            debugger;
            return function (model) {
                var context = visitor.extend(ast.param, model);
                return accept(ast.body, visitor, context);
            };
        default:
            return ast;
    }
}
exports.accept = accept;
var Range = (function () {
    function Range(first, last) {
        this.first = first;
        this.last = last;
    }
    Range.prototype.map = function (fn) {
        var result = [], last = this.last;
        for (var i = this.first; i <= last; i++) {
            result.push(fn(i));
        }
        return result;
    };
    return Range;
}());
exports.fsharp = peg.parse;
function fs(expr) {
    return new Expression(peg.parse(expr));
}
exports.fs = fs;
var Expression = (function () {
    function Expression(ast) {
        this.ast = ast;
    }
    Expression.prototype.execute = function (binding, context) {
        return accept(this.ast, binding, context);
    };
    return Expression;
}());
var Scope = (function () {
    function Scope(visitor, contexts) {
        this.visitor = visitor;
        this.contexts = contexts;
    }
    Scope.prototype.get = function (name) {
        var visitor = this.visitor;
        var contexts = this.contexts;
        for (var i = 0; i < this.contexts.length; i++) {
            var value = visitor.member(contexts[i], name);
            if (value !== void 0)
                return value;
        }
        return void 0;
    };
    return Scope;
}());
exports.TOKENS = { WHERE: WHERE, QUERY: QUERY, IDENT: IDENT, MEMBER: MEMBER, APP: APP, SELECT: SELECT, CONST: CONST, RANGE: RANGE, BINARY: BINARY, AWAIT: AWAIT, PIPE: PIPE, COMPOSE: COMPOSE };
//# sourceMappingURL=data:application/json;base64,