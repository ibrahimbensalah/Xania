"use strict";
var peg = require("./fsharp.peg");
function accept(ast, visitor, context) {
    if (ast === null || ast === undefined)
        return null;
    if (ast.type === undefined)
        return ast;
    switch (ast.type) {
        case "where":
            return visitor.where(accept(ast.source, visitor, context), accept(ast.predicate, visitor, context));
        case "query":
            return visitor.query(ast.param, accept(ast.source, visitor, context));
        case "ident":
            return visitor.member(context, ast.name);
        case "member":
            return visitor.member(accept(ast.target, visitor, context), accept(ast.member, visitor, context));
        case "app":
            var args = [];
            for (var i = 0; i < ast.args.length; i++) {
                args.push(accept(ast.args[i], visitor, context));
            }
            return visitor.app(accept(ast.fun, visitor, context), args);
        case "select":
            return visitor.select(accept(ast.source, visitor, context), function (s) { return accept(ast.selector, visitor, s); });
        case "const":
            return visitor.const(ast.value);
        default:
            throw new Error("not supported type " + ast.type);
    }
}
exports.accept = accept;
exports.fsharp = peg.parse;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnNoYXJwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2ZzaGFycC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBV0EsSUFBSSxHQUFHLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBSWxDLGdCQUF1QixHQUFRLEVBQUUsT0FBb0IsRUFBRSxPQUFPO0lBQzFELEVBQUUsQ0FBQyxDQUFDLEdBQUcsS0FBSyxJQUFJLElBQUksR0FBRyxLQUFLLFNBQVMsQ0FBQztRQUNsQyxNQUFNLENBQUMsSUFBSSxDQUFDO0lBRWhCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEtBQUssU0FBUyxDQUFDO1FBQ3ZCLE1BQU0sQ0FBQyxHQUFHLENBQUM7SUFFZixNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNmLEtBQUssT0FBTztZQUNSLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUN4RyxLQUFLLE9BQU87WUFDUixNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQzFFLEtBQUssT0FBTztZQUNSLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDN0MsS0FBSyxRQUFRO1lBQ1QsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3RHLEtBQUssS0FBSztZQUNOLElBQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQztZQUNoQixHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7Z0JBQ3ZDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDckQsQ0FBQztZQUNELE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNoRSxLQUFLLFFBQVE7WUFDVCxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLEVBQUUsVUFBQSxDQUFDLElBQUksT0FBQSxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLEVBQWhDLENBQWdDLENBQUMsQ0FBQztRQUN2RyxLQUFLLE9BQU87WUFDUixNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDcEM7WUFDSSxNQUFNLElBQUksS0FBSyxDQUFDLHdCQUFzQixHQUFHLENBQUMsSUFBTSxDQUFDLENBQUM7SUFDMUQsQ0FBQztBQUNMLENBQUM7QUE3QkQsd0JBNkJDO0FBRVUsUUFBQSxNQUFNLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImludGVyZmFjZSBJQXN0VmlzaXRvciB7XHJcbiAgICB3aGVyZShzb3VyY2UsIHByZWRpY2F0ZSk7XHJcbiAgICBzZWxlY3Qoc291cmNlLCBzZWxlY3Rvcik7XHJcbiAgICBxdWVyeShwYXJhbSwgc291cmNlKTtcclxuICAgIG1lbWJlcih0YXJnZXQsIG5hbWUpO1xyXG4gICAgYXBwKGZ1biwgYXJnczogYW55W10pO1xyXG4gICAgY29uc3QodmFsdWUpO1xyXG59XHJcblxyXG5kZWNsYXJlIGZ1bmN0aW9uIHJlcXVpcmUobW9kdWxlOiBzdHJpbmcpO1xyXG5cclxudmFyIHBlZyA9IHJlcXVpcmUoXCIuL2ZzaGFycC5wZWdcIik7XHJcblxyXG4vLyB2YXIgZnNoYXJwID0gcGVnLnBhcnNlO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFjY2VwdChhc3Q6IGFueSwgdmlzaXRvcjogSUFzdFZpc2l0b3IsIGNvbnRleHQpIHtcclxuICAgIGlmIChhc3QgPT09IG51bGwgfHwgYXN0ID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcblxyXG4gICAgaWYgKGFzdC50eXBlID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgcmV0dXJuIGFzdDtcclxuXHJcbiAgICBzd2l0Y2ggKGFzdC50eXBlKSB7XHJcbiAgICAgICAgY2FzZSBcIndoZXJlXCI6XHJcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLndoZXJlKGFjY2VwdChhc3Quc291cmNlLCB2aXNpdG9yLCBjb250ZXh0KSwgYWNjZXB0KGFzdC5wcmVkaWNhdGUsIHZpc2l0b3IsIGNvbnRleHQpKTtcclxuICAgICAgICBjYXNlIFwicXVlcnlcIjpcclxuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IucXVlcnkoYXN0LnBhcmFtLCBhY2NlcHQoYXN0LnNvdXJjZSwgdmlzaXRvciwgY29udGV4dCkpO1xyXG4gICAgICAgIGNhc2UgXCJpZGVudFwiOlxyXG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci5tZW1iZXIoY29udGV4dCwgYXN0Lm5hbWUpO1xyXG4gICAgICAgIGNhc2UgXCJtZW1iZXJcIjpcclxuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IubWVtYmVyKGFjY2VwdChhc3QudGFyZ2V0LCB2aXNpdG9yLCBjb250ZXh0KSwgYWNjZXB0KGFzdC5tZW1iZXIsIHZpc2l0b3IsIGNvbnRleHQpKTtcclxuICAgICAgICBjYXNlIFwiYXBwXCI6XHJcbiAgICAgICAgICAgIGNvbnN0IGFyZ3MgPSBbXTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhc3QuYXJncy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgYXJncy5wdXNoKGFjY2VwdChhc3QuYXJnc1tpXSwgdmlzaXRvciwgY29udGV4dCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLmFwcChhY2NlcHQoYXN0LmZ1biwgdmlzaXRvciwgY29udGV4dCksIGFyZ3MpO1xyXG4gICAgICAgIGNhc2UgXCJzZWxlY3RcIjpcclxuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3Iuc2VsZWN0KGFjY2VwdChhc3Quc291cmNlLCB2aXNpdG9yLCBjb250ZXh0KSwgcyA9PiBhY2NlcHQoYXN0LnNlbGVjdG9yLCB2aXNpdG9yLCBzKSk7XHJcbiAgICAgICAgY2FzZSBcImNvbnN0XCI6XHJcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLmNvbnN0KGFzdC52YWx1ZSk7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBub3Qgc3VwcG9ydGVkIHR5cGUgJHthc3QudHlwZX1gKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHZhciBmc2hhcnAgPSBwZWcucGFyc2U7XHJcblxyXG4iXX0=