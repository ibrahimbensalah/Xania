"use strict";
var peg = require("./fsharp.peg");
function accept(ast, visitor, context) {
    if (ast === null || ast === undefined)
        return null;
    if (ast.type === undefined)
        return ast;
    switch (ast.type) {
        case "where":
            return visitor.where(accept(ast.source, visitor, context), accept(ast.predicate, visitor, context));
        case "query":
            return visitor.query(ast.param, accept(ast.source, visitor, context));
        case "ident":
            return visitor.member(context, ast.name);
        case "member":
            return visitor.member(accept(ast.target, visitor, context), accept(ast.member, visitor, context));
        case "app":
            var args = [];
            for (var i_1 = 0; i_1 < ast.args.length; i_1++) {
                var arg = accept(ast.args[i_1], visitor, context);
                if (typeof arg === "undefined")
                    return undefined;
                args.push(arg);
            }
            return visitor.app(accept(ast.fun, visitor, context), args);
        case "select":
            return visitor.select(accept(ast.source, visitor, context), function (s) { return accept(ast.selector, visitor, s); });
        case "const":
            return visitor.const(ast.value);
        case "range":
            var first = accept(ast.from, visitor, context);
            var last = accept(ast.to, visitor, context);
            if (typeof first === "undefined" || typeof last === "undefined")
                return undefined;
            var arr = [];
            for (var i = first; i <= last; i++)
                arr.push(i);
            return arr;
        case "binary":
            var left = accept(ast.left, visitor, context);
            var right = accept(ast.right, visitor, context);
            if (typeof left === "undefined" || typeof right === "undefined")
                return undefined;
            return visitor.app(ast.op, [right, left]);
        case "await":
            return visitor.await(accept(ast.expr, visitor, context));
        case "pipe":
            throw Error("Not implement yet");
        default:
            throw new Error("not supported type " + ast.type);
    }
}
exports.accept = accept;
exports.fsharp = peg.parse;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnNoYXJwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2ZzaGFycC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBWUEsSUFBSSxHQUFHLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBSWxDLGdCQUF1QixHQUFRLEVBQUUsT0FBb0IsRUFBRSxPQUFPO0lBQzFELEVBQUUsQ0FBQyxDQUFDLEdBQUcsS0FBSyxJQUFJLElBQUksR0FBRyxLQUFLLFNBQVMsQ0FBQztRQUNsQyxNQUFNLENBQUMsSUFBSSxDQUFDO0lBRWhCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEtBQUssU0FBUyxDQUFDO1FBQ3ZCLE1BQU0sQ0FBQyxHQUFHLENBQUM7SUFFZixNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNmLEtBQUssT0FBTztZQUNSLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUN4RyxLQUFLLE9BQU87WUFDUixNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQzFFLEtBQUssT0FBTztZQUNSLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDN0MsS0FBSyxRQUFRO1lBQ1QsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxFQUFFLE1BQU0sQ0FB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QUcsQ0FBQyxJQUFNLENBQUMsQ0FBQztJQUMxRCxDQUFDO0FBQ0wsQ0FBQztBQXJERCx3QkFxREM7QUFFVSxRQUFBLE1BQU0sR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW50ZXJmYWNlIElBc3RWaXNpdG9yIHtcclxuICAgIHdoZXJlKHNvdXJjZSwgcHJlZGljYXRlKTtcclxuICAgIHNlbGVjdChzb3VyY2UsIHNlbGVjdG9yKTtcclxuICAgIHF1ZXJ5KHBhcmFtLCBzb3VyY2UpO1xyXG4gICAgbWVtYmVyKHRhcmdldCwgbmFtZSk7XHJcbiAgICBhcHAoZnVuLCBhcmdzOiBhbnlbXSk7XHJcbiAgICBhd2FpdChvYnNlcnZhYmxlKTtcclxuICAgIGNvbnN0KHZhbHVlKTtcclxufVxyXG5cclxuZGVjbGFyZSBmdW5jdGlvbiByZXF1aXJlKG1vZHVsZTogc3RyaW5nKTtcclxuXHJcbnZhciBwZWcgPSByZXF1aXJlKFwiLi9mc2hhcnAucGVnXCIpO1xyXG5cclxuLy8gdmFyIGZzaGFycCA9IHBlZy5wYXJzZTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhY2NlcHQoYXN0OiBhbnksIHZpc2l0b3I6IElBc3RWaXNpdG9yLCBjb250ZXh0KSB7XHJcbiAgICBpZiAoYXN0ID09PSBudWxsIHx8IGFzdCA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG5cclxuICAgIGlmIChhc3QudHlwZSA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgIHJldHVybiBhc3Q7XHJcblxyXG4gICAgc3dpdGNoIChhc3QudHlwZSkge1xyXG4gICAgICAgIGNhc2UgXCJ3aGVyZVwiOlxyXG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci53aGVyZShhY2NlcHQoYXN0LnNvdXJjZSwgdmlzaXRvciwgY29udGV4dCksIGFjY2VwdChhc3QucHJlZGljYXRlLCB2aXNpdG9yLCBjb250ZXh0KSk7XHJcbiAgICAgICAgY2FzZSBcInF1ZXJ5XCI6XHJcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnF1ZXJ5KGFzdC5wYXJhbSwgYWNjZXB0KGFzdC5zb3VyY2UsIHZpc2l0b3IsIGNvbnRleHQpKTtcclxuICAgICAgICBjYXNlIFwiaWRlbnRcIjpcclxuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IubWVtYmVyKGNvbnRleHQsIGFzdC5uYW1lKTtcclxuICAgICAgICBjYXNlIFwibWVtYmVyXCI6XHJcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLm1lbWJlcihhY2NlcHQoYXN0LnRhcmdldCwgdmlzaXRvciwgY29udGV4dCksIGFjY2VwdChhc3QubWVtYmVyLCB2aXNpdG9yLCBjb250ZXh0KSk7XHJcbiAgICAgICAgY2FzZSBcImFwcFwiOlxyXG4gICAgICAgICAgICBjb25zdCBhcmdzID0gW107XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXN0LmFyZ3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBhcmcgPSBhY2NlcHQoYXN0LmFyZ3NbaV0sIHZpc2l0b3IsIGNvbnRleHQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmcgPT09IFwidW5kZWZpbmVkXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIGFyZ3MucHVzaChhcmcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLmFwcChhY2NlcHQoYXN0LmZ1biwgdmlzaXRvciwgY29udGV4dCksIGFyZ3MpO1xyXG4gICAgICAgIGNhc2UgXCJzZWxlY3RcIjpcclxuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3Iuc2VsZWN0KGFjY2VwdChhc3Quc291cmNlLCB2aXNpdG9yLCBjb250ZXh0KSwgcyA9PiBhY2NlcHQoYXN0LnNlbGVjdG9yLCB2aXNpdG9yLCBzKSk7XHJcbiAgICAgICAgY2FzZSBcImNvbnN0XCI6XHJcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLmNvbnN0KGFzdC52YWx1ZSk7XHJcbiAgICAgICAgY2FzZSBcInJhbmdlXCI6XHJcbiAgICAgICAgICAgIHZhciBmaXJzdCA9IGFjY2VwdChhc3QuZnJvbSwgdmlzaXRvciwgY29udGV4dCk7XHJcbiAgICAgICAgICAgIHZhciBsYXN0ID0gYWNjZXB0KGFzdC50bywgdmlzaXRvciwgY29udGV4dCk7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZmlyc3QgPT09IFwidW5kZWZpbmVkXCIgfHwgdHlwZW9mIGxhc3QgPT09IFwidW5kZWZpbmVkXCIpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB2YXIgYXJyID0gW107XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBmaXJzdDsgaSA8PSBsYXN0OyBpKyspXHJcbiAgICAgICAgICAgICAgICBhcnIucHVzaChpKTtcclxuICAgICAgICAgICAgcmV0dXJuIGFycjtcclxuICAgICAgICBjYXNlIFwiYmluYXJ5XCI6XHJcbiAgICAgICAgICAgIHZhciBsZWZ0ID0gYWNjZXB0KGFzdC5sZWZ0LCB2aXNpdG9yLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgdmFyIHJpZ2h0ID0gYWNjZXB0KGFzdC5yaWdodCwgdmlzaXRvciwgY29udGV4dCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGxlZnQgPT09IFwidW5kZWZpbmVkXCIgfHwgdHlwZW9mIHJpZ2h0ID09PSBcInVuZGVmaW5lZFwiKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLmFwcChhc3Qub3AsIFtyaWdodCwgbGVmdF0pO1xyXG4gICAgICAgIGNhc2UgXCJhd2FpdFwiOlxyXG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci5hd2FpdChhY2NlcHQoYXN0LmV4cHIsIHZpc2l0b3IsIGNvbnRleHQpKTtcclxuICAgICAgICBjYXNlIFwicGlwZVwiOlxyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcIk5vdCBpbXBsZW1lbnQgeWV0XCIpO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgbm90IHN1cHBvcnRlZCB0eXBlICR7YXN0LnR5cGV9YCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgZnNoYXJwID0gcGVnLnBhcnNlO1xyXG5cclxuIl19