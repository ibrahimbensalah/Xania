"use strict";
var peg = require("./fsharp.peg");
function accept(ast, visitor, context) {
    if (ast.type === undefined)
        return ast;
    switch (ast.type) {
        case "where":
            return visitor.where(accept(ast.source, visitor, context), accept(ast.predicate, visitor, context));
        case "query":
            return visitor.query(ast.param, accept(ast.source, visitor, context));
        case "ident":
            return visitor.member(context, ast.name);
        case "member":
            return visitor.member(accept(ast.target, visitor, context), accept(ast.member, visitor, context));
        case "app":
            var args = [];
            for (var i_1 = 0; i_1 < ast.args.length; i_1++) {
                var arg = accept(ast.args[i_1], visitor, context);
                if (typeof arg === "undefined")
                    return undefined;
                args.push(arg);
            }
            return visitor.app(accept(ast.fun, visitor, context), args);
        case "select":
            return visitor.select(accept(ast.source, visitor, context), function (s) { return accept(ast.selector, visitor, s); });
        case "const":
            return visitor.const(ast.value);
        case "range":
            var first = accept(ast.from, visitor, context);
            var last = accept(ast.to, visitor, context);
            if (typeof first === "undefined" || typeof last === "undefined")
                return undefined;
            var arr = [];
            for (var i = first; i <= last; i++)
                arr.push(i);
            return arr;
        case "binary":
            var left = accept(ast.left, visitor, context);
            var right = accept(ast.right, visitor, context);
            if (typeof left === "undefined" || typeof right === "undefined")
                return undefined;
            return visitor.app(ast.op, [right, left]);
        case "await":
            return visitor.await(accept(ast.expr, visitor, context));
        case "pipe":
            throw Error("Not implement yet");
        default:
            throw new Error("not supported type " + ast.type);
    }
}
exports.accept = accept;
exports.fsharp = peg.parse;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnNoYXJwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2ZzaGFycC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBWUEsSUFBSSxHQUFHLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBSWxDLGdCQUF1QixHQUFRLEVBQUUsT0FBb0IsRUFBRSxPQUFPO0lBQzFELEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEtBQUssU0FBUyxDQUFDO1FBQ3ZCLE1BQU0sQ0FBQyxHQUFHLENBQUM7SUFFZixNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNmLEtBQUssT0FBTztZQUNSLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUN4RyxLQUFLLE9BQU87WUFDUixNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQzFFLEtBQUssT0FBTztZQUNSLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDN0MsS0FBSyxRQUFRO1lBQ1QsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3RHLEtBQUssS0FBSztZQUNOLElBQU0sSUFBSSxHQUFH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S0FBSyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW50ZXJmYWNlIElBc3RWaXNpdG9yIHtcclxuICAgIHdoZXJlKHNvdXJjZSwgcHJlZGljYXRlKTtcclxuICAgIHNlbGVjdChzb3VyY2UsIHNlbGVjdG9yKTtcclxuICAgIHF1ZXJ5KHBhcmFtLCBzb3VyY2UpO1xyXG4gICAgbWVtYmVyKHRhcmdldCwgbmFtZSk7XHJcbiAgICBhcHAoZnVuLCBhcmdzOiBhbnlbXSk7XHJcbiAgICBhd2FpdChvYnNlcnZhYmxlKTtcclxuICAgIGNvbnN0KHZhbHVlKTtcclxufVxyXG5cclxuZGVjbGFyZSBmdW5jdGlvbiByZXF1aXJlKG1vZHVsZTogc3RyaW5nKTtcclxuXHJcbnZhciBwZWcgPSByZXF1aXJlKFwiLi9mc2hhcnAucGVnXCIpO1xyXG5cclxuLy8gdmFyIGZzaGFycCA9IHBlZy5wYXJzZTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhY2NlcHQoYXN0OiBhbnksIHZpc2l0b3I6IElBc3RWaXNpdG9yLCBjb250ZXh0KSB7XHJcbiAgICBpZiAoYXN0LnR5cGUgPT09IHVuZGVmaW5lZClcclxuICAgICAgICByZXR1cm4gYXN0O1xyXG5cclxuICAgIHN3aXRjaCAoYXN0LnR5cGUpIHtcclxuICAgICAgICBjYXNlIFwid2hlcmVcIjpcclxuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3Iud2hlcmUoYWNjZXB0KGFzdC5zb3VyY2UsIHZpc2l0b3IsIGNvbnRleHQpLCBhY2NlcHQoYXN0LnByZWRpY2F0ZSwgdmlzaXRvciwgY29udGV4dCkpO1xyXG4gICAgICAgIGNhc2UgXCJxdWVyeVwiOlxyXG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci5xdWVyeShhc3QucGFyYW0sIGFjY2VwdChhc3Quc291cmNlLCB2aXNpdG9yLCBjb250ZXh0KSk7XHJcbiAgICAgICAgY2FzZSBcImlkZW50XCI6XHJcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLm1lbWJlcihjb250ZXh0LCBhc3QubmFtZSk7XHJcbiAgICAgICAgY2FzZSBcIm1lbWJlclwiOlxyXG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci5tZW1iZXIoYWNjZXB0KGFzdC50YXJnZXQsIHZpc2l0b3IsIGNvbnRleHQpLCBhY2NlcHQoYXN0Lm1lbWJlciwgdmlzaXRvciwgY29udGV4dCkpO1xyXG4gICAgICAgIGNhc2UgXCJhcHBcIjpcclxuICAgICAgICAgICAgY29uc3QgYXJncyA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFzdC5hcmdzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYXJnID0gYWNjZXB0KGFzdC5hcmdzW2ldLCB2aXNpdG9yLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXJnID09PSBcInVuZGVmaW5lZFwiKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICBhcmdzLnB1c2goYXJnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci5hcHAoYWNjZXB0KGFzdC5mdW4sIHZpc2l0b3IsIGNvbnRleHQpLCBhcmdzKTtcclxuICAgICAgICBjYXNlIFwic2VsZWN0XCI6XHJcbiAgICAgICAgICAgIHJldHVybiB2aXNpdG9yLnNlbGVjdChhY2NlcHQoYXN0LnNvdXJjZSwgdmlzaXRvciwgY29udGV4dCksIHMgPT4gYWNjZXB0KGFzdC5zZWxlY3RvciwgdmlzaXRvciwgcykpO1xyXG4gICAgICAgIGNhc2UgXCJjb25zdFwiOlxyXG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci5jb25zdChhc3QudmFsdWUpO1xyXG4gICAgICAgIGNhc2UgXCJyYW5nZVwiOlxyXG4gICAgICAgICAgICB2YXIgZmlyc3QgPSBhY2NlcHQoYXN0LmZyb20sIHZpc2l0b3IsIGNvbnRleHQpO1xyXG4gICAgICAgICAgICB2YXIgbGFzdCA9IGFjY2VwdChhc3QudG8sIHZpc2l0b3IsIGNvbnRleHQpO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGZpcnN0ID09PSBcInVuZGVmaW5lZFwiIHx8IHR5cGVvZiBsYXN0ID09PSBcInVuZGVmaW5lZFwiKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgdmFyIGFyciA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gZmlyc3Q7IGkgPD0gbGFzdDsgaSsrKVxyXG4gICAgICAgICAgICAgICAgYXJyLnB1c2goaSk7XHJcbiAgICAgICAgICAgIHJldHVybiBhcnI7XHJcbiAgICAgICAgY2FzZSBcImJpbmFyeVwiOlxyXG4gICAgICAgICAgICB2YXIgbGVmdCA9IGFjY2VwdChhc3QubGVmdCwgdmlzaXRvciwgY29udGV4dCk7XHJcbiAgICAgICAgICAgIHZhciByaWdodCA9IGFjY2VwdChhc3QucmlnaHQsIHZpc2l0b3IsIGNvbnRleHQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBsZWZ0ID09PSBcInVuZGVmaW5lZFwiIHx8IHR5cGVvZiByaWdodCA9PT0gXCJ1bmRlZmluZWRcIilcclxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdmlzaXRvci5hcHAoYXN0Lm9wLCBbcmlnaHQsIGxlZnRdKTtcclxuICAgICAgICBjYXNlIFwiYXdhaXRcIjpcclxuICAgICAgICAgICAgcmV0dXJuIHZpc2l0b3IuYXdhaXQoYWNjZXB0KGFzdC5leHByLCB2aXNpdG9yLCBjb250ZXh0KSk7XHJcbiAgICAgICAgY2FzZSBcInBpcGVcIjpcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJOb3QgaW1wbGVtZW50IHlldFwiKTtcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYG5vdCBzdXBwb3J0ZWQgdHlwZSAke2FzdC50eXBlfWApO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgdmFyIGZzaGFycCA9IHBlZy5wYXJzZTtcclxuIl19