"use strict";
var Template;
(function (Template) {
    var TextTemplate = (function () {
        function TextTemplate(parts) {
            this.parts = parts;
        }
        TextTemplate.prototype.accept = function (visitor, options) {
            return visitor.text(this.parts, options);
        };
        return TextTemplate;
    }());
    Template.TextTemplate = TextTemplate;
    var ContentTemplate = (function () {
        function ContentTemplate(ast) {
            this.ast = ast;
            this.children = [];
        }
        ContentTemplate.prototype.child = function (child) {
            this.children.push(child);
            return this;
        };
        ContentTemplate.prototype.accept = function (visitor, options) {
            return visitor.content(this.ast, this.children, options);
        };
        return ContentTemplate;
    }());
    Template.ContentTemplate = ContentTemplate;
    var TagTemplate = (function () {
        function TagTemplate(name, ns) {
            this.name = name;
            this.ns = ns;
            this.attributes = [];
            this.events = new Map();
            this._children = [];
        }
        TagTemplate.prototype.children = function () {
            return this._children;
        };
        TagTemplate.prototype.attr = function (name, expr) {
            return this.addAttribute(name, expr);
        };
        TagTemplate.prototype.addAttribute = function (name, expr) {
            var attr = this.getAttribute(name);
            if (!attr)
                this.attributes.push({ name: name.toLowerCase(), tpl: expr });
            return this;
        };
        TagTemplate.prototype.getAttribute = function (name) {
            var key = name.toLowerCase();
            for (var i = 0; i < this.attributes.length; i++) {
                var attr = this.attributes[i];
                if (attr.name === key)
                    return attr;
            }
            return undefined;
        };
        TagTemplate.prototype.addEvent = function (name, callback) {
            this.events.set(name, callback);
        };
        TagTemplate.prototype.addChild = function (child) {
            this._children.push(child);
            return this;
        };
        TagTemplate.prototype.select = function (modelAccessor) {
            this.modelAccessor = modelAccessor;
            return this;
        };
        TagTemplate.prototype.accept = function (visitor, options) {
            var tag = visitor.tag(this.name, this.ns, this.attributes, options);
            this._children.forEach(function (x) { return x.accept(tag); });
            return tag;
        };
        return TagTemplate;
    }());
    Template.TagTemplate = TagTemplate;
})(Template = exports.Template || (exports.Template = {}));
exports.t = Template;
//# sourceMappingURL=data:application/json;base64,