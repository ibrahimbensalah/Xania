"use strict";
var Template;
(function (Template) {
    var TextTemplate = (function () {
        function TextTemplate(expr, visitor) {
            this.expr = expr;
            this.visitor = visitor;
        }
        TextTemplate.prototype.bind = function () {
            return this.visitor.text(this.expr);
        };
        return TextTemplate;
    }());
    Template.TextTemplate = TextTemplate;
    var TagTemplate = (function () {
        function TagTemplate(name, ns, _children, visitor) {
            if (_children === void 0) { _children = []; }
            this.name = name;
            this.ns = ns;
            this._children = _children;
            this.visitor = visitor;
            this.attributes = [];
            this.events = new Map();
        }
        TagTemplate.prototype.children = function () {
            return this._children;
        };
        TagTemplate.prototype.attr = function (name, expr) {
            return this.addAttribute(name, expr);
        };
        TagTemplate.prototype.addAttribute = function (name, expr) {
            var attr = this.getAttribute(name);
            if (!attr)
                this.attributes.push({ name: name.toLowerCase(), tpl: expr });
            return this;
        };
        TagTemplate.prototype.getAttribute = function (name) {
            var key = name.toLowerCase();
            for (var i = 0; i < this.attributes.length; i++) {
                var attr = this.attributes[i];
                if (attr.name === key)
                    return attr;
            }
            return undefined;
        };
        TagTemplate.prototype.addEvent = function (name, callback) {
            this.events.set(name, callback);
        };
        TagTemplate.prototype.addChild = function (child) {
            this._children.push(child);
            return this;
        };
        TagTemplate.prototype.select = function (modelAccessor) {
            this.modelAccessor = modelAccessor;
            return this;
        };
        TagTemplate.prototype.bind = function () {
            var bindings = this._children.map(function (x) { return x.bind(); });
            var tagBinding = this.visitor.tag(this.name, this.ns, this.attributes, bindings);
            return tagBinding;
        };
        return TagTemplate;
    }());
    Template.TagTemplate = TagTemplate;
})(Template = exports.Template || (exports.Template = {}));
exports.t = Template;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0ZW1wbGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBRUEsSUFBYyxRQUFRLENBMkVyQjtBQTNFRCxXQUFjLFFBQVE7SUFXbEI7UUFDSSxzQkFBb0IsSUFBSSxFQUFVLE9BQW9CO1lBQWxDLFNBQUksR0FBSixJQUFJLENBQUE7WUFBVSxZQUFPLEdBQVAsT0FBTyxDQUFhO1FBQ3RELENBQUM7UUFFRCwyQkFBSSxHQUFKO1lBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN4QyxDQUFDO1FBQ0wsbUJBQUM7SUFBRCxDQUFDLEFBUEQsSUFPQztJQVBZLHFCQUFZLGVBT3hCLENBQUE7SUFFRDtRQU1JLHFCQUFtQixJQUFZLEVBQVUsRUFBVSxFQUFVLFNBQXVCLEVBQVUsT0FBb0I7WUFBckQsMEJBQUEsRUFBQSxjQUF1QjtZQUFqRSxTQUFJLEdBQUosSUFBSSxDQUFRO1lBQVUsT0FBRSxHQUFGLEVBQUUsQ0FBUTtZQUFVLGNBQVMsR0FBVCxTQUFTLENBQWM7WUFBVSxZQUFPLEdBQVAsT0FBTyxDQUFhO1lBTDFHLGVBQVUsR0FBNEIsRUFBRSxDQUFDO1lBQ3pDLFdBQU0sR0FBRyxJQUFJLEdBQUcsRUFBZSxDQUFDO1FBS3hDLENBQUM7UUFFTSw4QkFBUSxHQUFmO1lBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDMUIsQ0FBQztRQUVNLDBCQUFJLEdBQVgsVUFBWSxJQUFZLEVBQUUsSUFBUztZQUMvQixNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDekMsQ0FBQztRQUVNLGtDQUFZLEdBQW5CLFVBQW9CLElBQVksRUFBRSxJQUFTO1lBQ3ZDLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDbkMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBQ04sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1lBQ2xFLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDaEIsQ0FBQztRQUVNLGtDQUFZLEdBQW5CLFVBQW9CLElBQVk7WUFDNUIsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQzdCLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztnQkFDOUMsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDOUIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxHQUFHLENBQUM7b0JBQ2xCLE1BQU0sQ0FBQyxJQUFJLENBQUM7WUFDcEIsQ0FBQztZQUNELE1BQU0sQ0FBQyxTQUFTLENBQUM7UUFDckIsQ0FBQztRQUVNLDhCQUFRLEdBQWYsVUFBZ0IsSUFBSSxFQUFFLFFBQVE7WUFDMUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ3BDLENBQUM7UUFFTSw4QkFBUSxHQUFmLFVBQWdCLEtBQVk7WUFDeEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDM0IsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNoQixDQUFDO1FBRU0sNEJBQU0sR0FBYixVQUFjLGFBQWE7WUFDdkIsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7WUFDbkMsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNoQixDQUFDO1FBRUQsMEJBQUksR0FBSjtZQUNJLElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFSLENBQVEsQ0FBQyxDQUFDO1lBQ25ELElBQUksVUFBVSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBRWpGLE1BQU0sQ0FBQyxVQUFVLENBQUM7UUFDdEIsQ0FBQztRQUNMLGtCQUFDO0lBQUQsQ0FBQyxBQXRERCxJQXNEQztJQXREWSxvQkFBVyxjQXNEdkIsQ0FBQTtBQUNMLENBQUMsRUEzRWEsUUFBUSxHQUFSLGdCQUFRLEtBQVIsZ0JBQVEsUUEyRXJCO0FBR2UscUJBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb3JlIH0gZnJvbSBcIi4vY29yZVwiXHJcblxyXG5leHBvcnQgbW9kdWxlIFRlbXBsYXRlIHtcclxuXHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElWaXNpdG9yPFQ+IHtcclxuICAgICAgICB0ZXh0KGV4cHIpOiBUO1xyXG4gICAgICAgIHRhZyhuYW1lLCBucywgYXR0cnMsIGNoaWxkcmVuKTogVDtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElOb2RlIHtcclxuICAgICAgICBiaW5kPygpO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBUZXh0VGVtcGxhdGU8VD4gaW1wbGVtZW50cyBJTm9kZSB7XHJcbiAgICAgICAgY29uc3RydWN0b3IocHJpdmF0ZSBleHByLCBwcml2YXRlIHZpc2l0b3I6IElWaXNpdG9yPFQ+KSB7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBiaW5kKCk6IFQge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy52aXNpdG9yLnRleHQodGhpcy5leHByKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIFRhZ1RlbXBsYXRlPFQ+IGltcGxlbWVudHMgSU5vZGUge1xyXG4gICAgICAgIHByaXZhdGUgYXR0cmlidXRlczogeyBuYW1lOiBzdHJpbmc7IHRwbCB9W10gPSBbXTtcclxuICAgICAgICBwcml2YXRlIGV2ZW50cyA9IG5ldyBNYXA8c3RyaW5nLCBhbnk+KCk7XHJcbiAgICAgICAgLy8gUmVTaGFycGVyIGRpc2FibGUgb25jZSBJbmNvbnNpc3RlbnROYW1pbmdcclxuICAgICAgICBwdWJsaWMgbW9kZWxBY2Nlc3NvcjtcclxuXHJcbiAgICAgICAgY29uc3RydWN0b3IocHVibGljIG5hbWU6IHN0cmluZywgcHJpdmF0ZSBuczogc3RyaW5nLCBwcml2YXRlIF9jaGlsZHJlbjogSU5vZGVbXSA9IFtdLCBwcml2YXRlIHZpc2l0b3I6IElWaXNpdG9yPFQ+KSB7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgY2hpbGRyZW4oKTogSU5vZGVbXSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jaGlsZHJlbjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBhdHRyKG5hbWU6IHN0cmluZywgZXhwcjogYW55KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFkZEF0dHJpYnV0ZShuYW1lLCBleHByKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBhZGRBdHRyaWJ1dGUobmFtZTogc3RyaW5nLCBleHByOiBhbnkpIHtcclxuICAgICAgICAgICAgdmFyIGF0dHIgPSB0aGlzLmdldEF0dHJpYnV0ZShuYW1lKTtcclxuICAgICAgICAgICAgaWYgKCFhdHRyKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5hdHRyaWJ1dGVzLnB1c2goeyBuYW1lOiBuYW1lLnRvTG93ZXJDYXNlKCksIHRwbDogZXhwciB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgZ2V0QXR0cmlidXRlKG5hbWU6IHN0cmluZykge1xyXG4gICAgICAgICAgICB2YXIga2V5ID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuYXR0cmlidXRlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGF0dHIgPSB0aGlzLmF0dHJpYnV0ZXNbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAoYXR0ci5uYW1lID09PSBrZXkpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGF0dHI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBhZGRFdmVudChuYW1lLCBjYWxsYmFjaykge1xyXG4gICAgICAgICAgICB0aGlzLmV2ZW50cy5zZXQobmFtZSwgY2FsbGJhY2spO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGFkZENoaWxkKGNoaWxkOiBJTm9kZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9jaGlsZHJlbi5wdXNoKGNoaWxkKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc2VsZWN0KG1vZGVsQWNjZXNzb3IpIHtcclxuICAgICAgICAgICAgdGhpcy5tb2RlbEFjY2Vzc29yID0gbW9kZWxBY2Nlc3NvcjtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBiaW5kKCkge1xyXG4gICAgICAgICAgICBjb25zdCBiaW5kaW5ncyA9IHRoaXMuX2NoaWxkcmVuLm1hcCh4ID0+IHguYmluZCgpKTtcclxuICAgICAgICAgICAgdmFyIHRhZ0JpbmRpbmcgPSB0aGlzLnZpc2l0b3IudGFnKHRoaXMubmFtZSwgdGhpcy5ucywgdGhpcy5hdHRyaWJ1dGVzLCBiaW5kaW5ncyk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGFnQmluZGluZztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7XHJcbiAgICBUZW1wbGF0ZSBhcyB0XHJcbn0iXX0=