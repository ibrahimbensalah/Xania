"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = require("./core");
var Reactive;
(function (Reactive) {
    var Value = (function () {
        function Value(value) {
            this.value = value;
            this.properties = [];
            this.$reactive = true;
            this.extensions = [];
        }
        Value.prototype.get = function (propertyName) {
            for (var i = 0; i < this.properties.length; i++) {
                if (this.properties[i].name === propertyName)
                    return this.properties[i];
            }
            var initialValue = this.value[propertyName];
            if (initialValue === void 0)
                return void 0;
            if (typeof initialValue === "function") {
                return initialValue.bind(this.value);
            }
            if (!!initialValue && typeof initialValue.$reactive !== "undefined") {
                this.properties.push(initialValue);
                return initialValue;
            }
            var child = this.create(propertyName, initialValue);
            child.update();
            this.properties.push(child);
            return child;
        };
        Value.prototype.updateProperties = function () {
            var properties = this.properties.slice(0);
            this.properties = [];
            for (var i = 0; i < properties.length; i++) {
                var property = properties[i];
                if (property.update() || typeof property.value !== "undefined") {
                    this.properties.push(property);
                }
            }
        };
        Value.prototype.extendValue = function (dispatcher, name, value) {
            for (var i = 0; i < this.extensions.length; i++) {
                var x = this.extensions[i];
                if (x.key === value) {
                    return x.value;
                }
            }
            var child = {};
            child[name] = value;
            var scope = new Scope(dispatcher, child, this);
            this.extensions.push({ key: value, value: scope });
            return scope;
        };
        return Value;
    }());
    var Property = (function (_super) {
        __extends(Property, _super);
        function Property(dispatcher, parent, name, value) {
            var _this = _super.call(this, value) || this;
            _this.dispatcher = dispatcher;
            _this.parent = parent;
            _this.name = name;
            _this.actions = [];
            return _this;
        }
        Property.prototype.create = function (propertyName, initialValue) {
            return new Property(this.dispatcher, this, propertyName, initialValue);
        };
        Property.prototype.extend = function (name, value) {
            return _super.prototype.extendValue.call(this, this.dispatcher, name, value);
        };
        Property.prototype.get = function (name) {
            var result = _super.prototype.get.call(this, name);
            if (typeof result !== "undefined")
                return result;
            return this.parent.get(name);
        };
        Property.prototype.change = function (action) {
            if (this.actions.indexOf(action) < 0) {
                this.actions.push(action);
                return this;
            }
            return false;
        };
        Property.prototype.unbind = function (action) {
            var idx = this.actions.indexOf(action);
            if (idx < 0)
                return false;
            this.actions.splice(idx, 1);
            return true;
        };
        Property.prototype.set = function (value) {
            if (this.value !== value) {
                this.parent.value[this.name] = value;
                this.update();
            }
        };
        Property.prototype.update = function () {
            var newValue = this.parent.value[this.name];
            if (newValue === this.value)
                return false;
            this.value = newValue;
            if (this.value === void 0) {
                return true;
            }
            else {
                var actions = this.actions.slice(0);
                for (var i = 0; i < actions.length; i++) {
                    this.dispatcher.dispatch(actions[i]);
                }
                _super.prototype.updateProperties.call(this);
                return true;
            }
        };
        Property.prototype.valueOf = function () {
            return this.value;
        };
        Property.prototype.map = function (fn) {
            var _this = this;
            return this.value.map(function (item, idx) { return fn(_super.prototype.get.call(_this, idx), idx); });
        };
        Property.prototype.toString = function () {
            return this.value === null || this.value === void 0 ? "null" : this.value.toString();
        };
        return Property;
    }(Value));
    var Scope = (function (_super) {
        __extends(Scope, _super);
        function Scope(dispatcher, value, parent) {
            var _this = _super.call(this, value) || this;
            _this.dispatcher = dispatcher;
            _this.parent = parent;
            return _this;
        }
        Scope.prototype.create = function (propertyName, initialValue) {
            return new Property(this.dispatcher, this, propertyName, initialValue);
        };
        Scope.prototype.valueOf = function () {
            return this.value;
        };
        Scope.prototype.map = function (fn) {
            return this.value.map(fn);
        };
        Scope.prototype.extend = function (name, value) {
            return _super.prototype.extendValue.call(this, this.dispatcher, name, value);
        };
        Scope.prototype.get = function (name) {
            var value = _super.prototype.get.call(this, name);
            if (typeof value === "undefined") {
                if (this.parent)
                    return this.parent.get(name);
                return value;
            }
            return value;
        };
        Scope.prototype.toJSON = function () {
            var parent = this.parent;
            if (typeof this._json === "undefined") {
                this._json = "*recursive*";
                this._json = Object.assign({}, this.value, parent && parent.toJSON ? parent.toJSON() : {});
            }
            return this._json;
        };
        Scope.prototype.toString = function () {
            return this.value;
        };
        return Scope;
    }(Value));
    Reactive.Scope = Scope;
    var Store = (function () {
        function Store(value) {
            if (value === void 0) { value = {}; }
            this.dirty = [];
            this.root = new Scope(this, value);
        }
        Store.prototype.dispatch = function (action) {
            this.dirty.push(action);
        };
        Store.prototype.flush = function () {
            this.dirty.forEach(function (d) {
                d.execute();
            });
            this.dirty.length = 0;
        };
        Store.prototype.get = function (name) {
            var value = this.root.get(name);
            if (typeof value === "undefined") {
                throw new Error("Cannot resolve variable " + name);
            }
            return value;
        };
        Store.prototype.extend = function (name, value) {
            return this.root.extend(name, value);
        };
        Store.prototype.toString = function () {
            return JSON.stringify(this.root.toJSON(), null, 4);
        };
        return Store;
    }());
    Reactive.Store = Store;
    var Binding = (function () {
        function Binding() {
            this.dependencies = [];
        }
        Binding.prototype.execute = function () {
            for (var i = 0; i < this.dependencies.length; i++) {
                this.dependencies[i].unbind(this);
            }
            this.dependencies.length = 0;
            this.update(this.context);
        };
        Binding.prototype.update = function (context) {
            var _this = this;
            this.context = context;
            this.state = core_1.Core.ready(this.state, function (s) {
                return _this.render(context, s);
            });
            return this;
        };
        Binding.observe = function (value, observer) {
            if (value && value.change) {
                var dependency = value.change(observer);
                if (!!dependency)
                    observer.dependencies.push(dependency);
            }
        };
        Binding.prototype.get = function (name) {
            throw new Error("Not implemented");
        };
        Binding.prototype.extend = function () {
            throw new Error("Not implemented");
        };
        Binding.prototype.where = function (source, predicate) {
            throw new Error("Not implemented");
        };
        Binding.prototype.select = function (source, selector) {
            return source.map(selector);
        };
        Binding.prototype.query = function (param, source) {
            var _this = this;
            Binding.observe(source, this);
            return source.map(function (item) {
                return _this.context.extend(param, item);
            });
        };
        Binding.prototype.member = function (target, name) {
            var value = target.get(name);
            Binding.observe(value, this);
            return value;
        };
        Binding.prototype.app = function (fun, args) {
            if (fun === "+") {
                return args[1] + args[0];
            }
            throw new Error("Not implemented");
        };
        Binding.prototype.const = function (value) {
            return value;
        };
        return Binding;
    }());
    Reactive.Binding = Binding;
})(Reactive = exports.Reactive || (exports.Reactive = {}));
//# sourceMappingURL=data:application/json;base64,