"use strict";
var template_1 = require("./template");
var Loader;
(function (Loader) {
    function domReady(fn) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (document.readyState !== "loading") {
            fn.apply(null, args);
        }
        else {
            document.addEventListener("DOMContentLoaded", function () { return fn.apply(null, args); });
        }
    }
    function init(root) {
        var stack = [root];
        while (stack.length > 0) {
            var dom = stack.pop();
            if (!!dom["content"] && !!dom.attributes["name"]) {
                var name = dom.attributes["name"].value;
                var parts = name.split('.');
                var module = require(parts[0]);
                var component = module[parts[1]];
                console.log(component);
            }
            else {
                for (var i = 0; i < dom.childNodes.length; i++) {
                    var child = dom.childNodes[i];
                    if (child.nodeType === 1)
                        stack.push(child);
                }
            }
        }
    }
    Loader.init = init;
    function bind(dom, store) {
    }
    Loader.bind = bind;
    function parseDom(rootDom) {
        var stack = [];
        var i;
        var rootTpl;
        stack.push({
            node: rootDom,
            push: function (e) {
                rootTpl = e;
            }
        });
        while (stack.length > 0) {
            var cur = stack.pop();
            var node = cur.node;
            var push = cur.push;
            if (!!node["content"]) {
                var elt = node["content"];
                var template = new template_1.Template.ContentTemplate(node.attributes["model"]);
                for (i = elt.childNodes.length - 1; i >= 0; i--) {
                    stack.push({ node: elt.childNodes[i], push: template.child.bind(template) });
                }
                push(template);
            }
            else if (node.nodeType === 1) {
                var elt = node;
                var template_2 = new template_1.Template.TagTemplate(elt.tagName, elt.namespaceURI);
                for (i = 0; !!elt.attributes && i < elt.attributes.length; i++) {
                    var attribute = elt.attributes[i];
                    this.parseAttr(template_2, attribute);
                }
                for (i = elt.childNodes.length - 1; i >= 0; i--) {
                    stack.push({ node: elt.childNodes[i], push: template_2.addChild.bind(template_2) });
                }
                push(template_2);
            }
            else if (node.nodeType === 3) {
                var textContent = node.textContent;
                if (textContent.trim().length > 0) {
                    var tpl = this.compile(textContent);
                    push(new template_1.Template.TextTemplate(tpl || node.textContent));
                }
            }
        }
        return rootTpl;
    }
    domReady(init, document.body);
})(Loader || (Loader = {}));
//# sourceMappingURL=data:application/json;base64,