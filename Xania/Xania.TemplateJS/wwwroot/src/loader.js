"use strict";
var dom_1 = require("./dom");
var core_1 = require("./core");
var template_1 = require("./template");
var fsharp_1 = require("./fsharp");
var Loader;
(function (Loader) {
    function domReady(fn) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (document.readyState !== "loading") {
            fn.apply(null, args);
        }
        else {
            document.addEventListener("DOMContentLoaded", function () { return fn.apply(null, args); });
        }
    }
    function init(root) {
        var stack = [root];
        while (stack.length > 0) {
            var dom = stack.pop();
            if (!!dom["content"] && !!dom.attributes["name"]) {
                var name = dom.attributes["name"].value;
                var parts = name.split('.');
            }
            else {
                for (var i = 0; i < dom.childNodes.length; i++) {
                    var child = dom.childNodes[i];
                    if (child.nodeType === 1)
                        stack.push(child);
                }
            }
        }
    }
    Loader.init = init;
})(Loader || (Loader = {}));
var Parser = (function () {
    function Parser() {
    }
    Parser.parseText = function (text) {
        var parts = [];
        var appendText = function (x) {
            var s = x.trim();
            if (s.length > 0)
                parts.push(x);
        };
        var offset = 0;
        while (offset < text.length) {
            var begin = text.indexOf("{{", offset);
            if (begin >= 0) {
                if (begin > offset)
                    appendText(text.substring(offset, begin));
                offset = begin + 2;
                var end = text.indexOf("}}", offset);
                if (end >= 0) {
                    parts.push(fsharp_1.fsharp(text.substring(offset, end)));
                    offset = end + 2;
                }
                else {
                    throw new SyntaxError("Expected '}}' but not found starting from index: " + offset);
                }
            }
            else {
                appendText(text.substring(offset));
                break;
            }
        }
        if (parts.length === 1)
            return parts[0];
        return parts;
    };
    Parser.parseAttr = function (tagElement, attr) {
        var name = attr.name;
        if (name === "click" || name.startsWith("keyup.")) {
            var fn = this.parseText(attr.value);
            tagElement.addEvent(name, fn);
        }
        else if (name === "data-select" || name === "data-from") {
            var fn = this.parseText(attr.value);
            tagElement.select(fn);
        }
        else if (name === "checked") {
            var fn = this.parseText(attr.value);
            tagElement.attr(name, core_1.Core.compose(function (ctx) { return !!ctx ? "checked" : null; }, fn));
        }
        else {
            var tpl = this.parseText(attr.value);
            tagElement.attr(name, tpl || attr.value);
            if (!!tagElement.name.match(/^input$/i) && !!attr.name.match(/^name$/i) && tagElement.getAttribute("value") != undefined) {
                var valueAccessor = this.parseText(attr.value);
                tagElement.attr("value", valueAccessor);
            }
        }
    };
    Parser.parseNode = function (node) {
        if (node.nodeType === 1) {
            var elt = node;
            var template = new template_1.Template.TagTemplate(elt.tagName, elt.namespaceURI);
            var content = null;
            for (var i = 0; !!elt.attributes && i < elt.attributes.length; i++) {
                var attribute = elt.attributes[i];
                if (attribute.name === "data-repeat") {
                    content = new template_1.Template.ContentTemplate(this.parseText(attribute.value)).child(template);
                }
                else {
                    this.parseAttr(template, attribute);
                }
            }
            for (var e = 0; e < elt.childNodes.length; e++) {
                var child = this.parseNode(elt.childNodes[e]);
                if (child)
                    template.addChild(child);
            }
            return content || template;
        }
        else if (node.nodeType === 3) {
            var textContent = node.textContent;
            if (textContent.trim().length > 0) {
                var tpl = this.parseText(textContent);
                return new template_1.Template.TextTemplate(tpl || node.textContent);
            }
        }
        return undefined;
    };
    return Parser;
}());
function bind(node) {
    var children = [];
    if (!!node["content"]) {
        var content = node["content"];
        for (var i = 0; i < content.childNodes.length; i++) {
            var tpl = Parser.parseNode(content.childNodes[i]);
            if (tpl)
                children.push(tpl);
        }
    }
    return new dom_1.Dom.ContentBinding(null, function (dom) { return node.parentElement.insertBefore(dom, node); }, children);
}
exports.bind = bind;
//# sourceMappingURL=data:application/json;base64,