"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var reactive_1 = require("./reactive");
var Animate = (function () {
    function Animate(attrs, children) {
        this.attrs = attrs;
        this.children = children;
    }
    Animate.prototype.bind = function (visitor) {
        var bindings = this.children.map(function (x) { return x.bind(visitor); });
        return new AnimateBinding(this.attrs, bindings);
    };
    return Animate;
}());
exports.Animate = Animate;
var AnimateBinding = (function (_super) {
    __extends(AnimateBinding, _super);
    function AnimateBinding(attrs, childBindings) {
        var _this = _super.call(this) || this;
        _this.attrs = attrs;
        _this.domElements = [];
        _this.defaults = {
            transform: "translate3d(0, 0, 0) scale(0)",
            width: "0",
            height: "0"
        };
        _this.players = {};
        _this.values = {};
        _this.childBindings = childBindings;
        return _this;
    }
    Object.defineProperty(AnimateBinding.prototype, "length", {
        get: function () {
            var length = 0;
            for (var i = 0; i < this.childBindings.length; i++) {
                length += this.childBindings[i].length;
            }
            return length;
        },
        enumerable: true,
        configurable: true
    });
    AnimateBinding.prototype.update = function (context, driver) {
        _super.prototype.update.call(this, context, driver);
        for (var i = 0; i < this.childBindings.length; i++) {
            this.childBindings[i].update(context, this);
        }
        return this;
    };
    AnimateBinding.prototype.insert = function (binding, dom, idx) {
        this.driver.insert(this, dom, idx);
        this.domElements.push(dom);
        this.transform(dom, this.defaults);
    };
    AnimateBinding.prototype.transform = function (dom, defaults) {
        var values = this.values;
        if (Object.keys(values).length === 0)
            return;
        for (var k in values) {
            if (values.hasOwnProperty(k)) {
                var value = values[k];
                if (!value)
                    continue;
                var start = defaults[k] || this.defaults[k];
                var frames = (Array.isArray(value) ? value : [start, value]);
                var keyframes = frames.map(function (x) {
                    var frame = {};
                    frame[k] = x;
                    return frame;
                });
                if (this.players[k]) {
                    this.players[k].cancel();
                    delete this.players[k];
                }
                var timing = { duration: 200, iterations: 1, easing: 'ease-out' };
                var player = dom.animate(keyframes, timing);
                player.onfinish = (function (k, value) { return function (e) {
                    dom.style[k] = Array.isArray(value) ? value[value.length - 1] : value;
                }; })(k, value);
                this.players[k] = player;
            }
        }
    };
    AnimateBinding.prototype.render = function (context) {
        this.values = {};
        var attrs = this.attrs;
        for (var k in attrs) {
            if (attrs.hasOwnProperty(k) && k !== "dispose") {
                var v = this.evaluateObject(attrs[k]);
                this.values[k] = v;
            }
        }
        for (var i = 0; i < this.domElements.length && i < 1; i++) {
            var dom = this.domElements[i];
            this.transform(dom, window.getComputedStyle(dom));
        }
    };
    AnimateBinding.prototype.dispose = function () {
        var bindings = this.childBindings;
        this.childBindings = [];
        var dispose = this.attrs.dispose;
        if (!dispose) {
            for (var e = 0; e < bindings.length; e++) {
                var b = bindings[e];
                b.dispose();
            }
        }
        else {
            var counter = this.domElements.length;
            var onfinish = function () {
                counter--;
                if (counter === 0) {
                    for (var e = 0; e < bindings.length; e++) {
                        var b = bindings[e];
                        b.dispose();
                    }
                }
            };
            for (var i = 0; i < this.domElements.length; i++) {
                var dom = this.domElements[i];
                var timing = { duration: 200, iterations: 1 };
                var animation = dom.animate(dispose, timing);
                animation.onfinish = onfinish;
            }
        }
    };
    return AnimateBinding;
}(reactive_1.Reactive.Binding));
exports.AnimateBinding = AnimateBinding;
//# sourceMappingURL=data:application/json;base64,