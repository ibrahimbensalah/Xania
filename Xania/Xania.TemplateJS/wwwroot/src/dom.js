"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var rebind_1 = require("./rebind");
var fsharp_1 = require("./fsharp");
var Dom;
(function (Dom) {
    var document = window.document;
    var ContentBinding = (function (_super) {
        __extends(ContentBinding, _super);
        function ContentBinding(ast, parentInsert, children) {
            var _this = _super.call(this) || this;
            _this.ast = ast;
            _this.parentInsert = parentInsert;
            _this.children = children;
            _this.fragments = [];
            return _this;
        }
        ContentBinding.prototype.render = function () {
            var stream = fsharp_1.accept(this.ast, this, this.context);
            var offset = 0;
            for (var i = 0; i < stream.length; i++) {
                var context = stream[i];
                var fragment = null;
                for (var e = i; e < this.fragments.length; e++) {
                    var f = this.fragments[e];
                    if (f.context === context) {
                        fragment = f;
                        if (e !== i) {
                            this.fragments.splice(e, 1);
                        }
                    }
                }
                if (fragment === null) {
                    fragment = new ContentFragment(this, context, offset).update();
                }
                if (i < this.fragments.length) {
                    this.fragments.splice(i, 0, fragment);
                }
                else {
                    this.fragments.push(fragment);
                }
                offset += this.children.length;
            }
            return stream;
        };
        ContentBinding.prototype.text = function (ast, options) {
            var binding = new TextBinding(ast);
            options.fragment.insert(binding.dom, options.child);
            return binding;
        };
        ContentBinding.prototype.content = function (ast, children, options) {
            var binding = new ContentBinding(ast, function (dom) { return options.fragment.insert(dom, options.child); }, children);
            return binding;
        };
        return ContentBinding;
    }(rebind_1.Reactive.Binding));
    Dom.ContentBinding = ContentBinding;
    var ContentFragment = (function () {
        function ContentFragment(owner, context, offset) {
            this.owner = owner;
            this.context = context;
            this.offset = offset;
            this.bindings = [];
        }
        ContentFragment.prototype.insert = function (dom, index) {
            this.owner.parentInsert(dom, this.offset + index);
        };
        ContentFragment.prototype.update = function () {
            var context = this.context;
            for (var e = 0; e < this.owner.children.length; e++) {
                this.bindings[e] =
                    this.owner.children[e].accept(this.owner, { fragment: this, child: e }).update(context);
            }
            return this;
        };
        return ContentFragment;
    }());
    var TextBinding = (function (_super) {
        __extends(TextBinding, _super);
        function TextBinding(ast) {
            var _this = _super.call(this) || this;
            _this.ast = ast;
            _this.dom = document.createTextNode("");
            return _this;
        }
        TextBinding.prototype.render = function (context) {
            var newValue = fsharp_1.accept(this.ast, this, context);
            if (!!newValue && !!newValue.onNext) {
                newValue.subscribe(this);
            }
            else {
                this.onNext(newValue.valueOf());
            }
        };
        TextBinding.prototype.onNext = function (newValue) {
            this.dom.textContent = newValue;
        };
        return TextBinding;
    }(rebind_1.Reactive.Binding));
    Dom.TextBinding = TextBinding;
    var TagBinding = (function (_super) {
        __extends(TagBinding, _super);
        function TagBinding(name, ns, attributes, events) {
            var _this = _super.call(this) || this;
            _this.ns = ns;
            _this.events = events;
            _this.attributeBindings = [];
            if (ns === null)
                _this.dom = document.createElement(name);
            else {
                _this.dom = document.createElementNS(ns, name.toLowerCase());
            }
            _this.dom.attributes["__binding"] = _this;
            var classBinding = new ClassBinding(_this);
            var length = attributes.length;
            for (var i = 0; i < length; i++) {
                var attr = attributes[i];
                var attrTpl = attr.tpl;
                var attrName = attr.name;
                if (attrName === "class") {
                    classBinding.setBaseClass(attrTpl);
                }
                else if (attrName.startsWith("class.")) {
                    classBinding.addClass(attrName.substr(6), attrTpl);
                }
                else {
                    var attrBinding = new AttributeBinding(_this, attrName, attrTpl);
                    _this.attributeBindings.push(attrBinding);
                }
            }
            ;
            _this.attributeBindings.push(classBinding);
            return _this;
        }
        TagBinding.prototype.render = function (context) {
            for (var i = 0; i < this.attributeBindings.length; i++) {
                this.attributeBindings[i].render(context);
            }
            return this.dom;
        };
        TagBinding.prototype.trigger = function (name) {
            var handler = this.events.get(name);
            if (!!handler) {
                var result = handler.execute(this.context, {
                    get: function (obj, name) {
                        return obj.get(name);
                    },
                    set: function (obj, name, value) {
                        obj.get(name).set(value);
                    },
                    invoke: function (_, fn, args) {
                        if (!!fn.invoke) {
                            var xs = args.map(function (x) { return x.valueOf(); });
                            return fn.invoke(xs);
                        }
                        return fn;
                    }
                });
                if (!!result && typeof result.value === "function")
                    result.invoke();
            }
        };
        return TagBinding;
    }(rebind_1.Reactive.Binding));
    Dom.TagBinding = TagBinding;
    var ClassBinding = (function (_super) {
        __extends(ClassBinding, _super);
        function ClassBinding(parent) {
            var _this = _super.call(this) || this;
            _this.parent = parent;
            _this.conditions = [];
            return _this;
        }
        ClassBinding.prototype.setBaseClass = function (tpl) {
            this.baseClassTpl = tpl;
        };
        ClassBinding.prototype.addClass = function (className, condition) {
            this.conditions.push({ className: className, condition: condition });
        };
        ClassBinding.prototype.render = function (context) {
            this.context = context;
            var classes = [];
            if (!!this.baseClassTpl) {
                var value = this.baseClassTpl.execute(context, this).valueOf();
                classes.push(value);
            }
            for (var i = 0; i < this.conditions.length; i++) {
                var _a = this.conditions[i], className = _a.className, condition = _a.condition;
                if (!!condition.execute(context, this).valueOf()) {
                    classes.push(className);
                }
            }
            this.setAttribute("class", classes.length > 0 ? join(" ", classes) : null);
        };
        ClassBinding.prototype.setAttribute = function (attrName, newValue) {
            var oldValue = this.oldValue;
            var tag = this.parent.dom;
            if (typeof newValue === "undefined" || newValue === null) {
                tag[attrName] = void 0;
                tag.removeAttribute(attrName);
            }
            else {
                if (typeof oldValue === "undefined") {
                    var attr = document.createAttribute(attrName);
                    attr.value = newValue;
                    tag.setAttributeNode(attr);
                }
                else {
                    tag.className = newValue;
                }
            }
            this.oldValue = newValue;
        };
        return ClassBinding;
    }(rebind_1.Reactive.Binding));
    Dom.ClassBinding = ClassBinding;
    var AttributeBinding = (function (_super) {
        __extends(AttributeBinding, _super);
        function AttributeBinding(parent, name, tpl) {
            var _this = _super.call(this) || this;
            _this.parent = parent;
            _this.name = name;
            _this.tpl = tpl;
            return _this;
        }
        AttributeBinding.prototype.render = function (context) {
            this.context = context;
            var value = this.tpl.execute(context, this);
            if (!!value && !!value.onNext) {
                value.subscribe(this);
            }
            else {
                this.onNext(value);
            }
        };
        AttributeBinding.prototype.onNext = function (value) {
            if (value !== null && value !== void 0 && !!value.valueOf)
                value = value.valueOf();
            var newValue;
            if (this.name === "checked") {
                newValue = !!value ? "checked" : null;
            }
            else {
                newValue = value;
            }
            var oldValue = this.oldValue;
            var attrName = this.name;
            var tag = this.parent.dom;
            if (typeof newValue === "undefined" || newValue === null) {
                tag[attrName] = void 0;
                tag.removeAttribute(attrName);
            }
            else {
                if (typeof oldValue === "undefined") {
                    var attr = document.createAttribute(attrName);
                    attr.value = newValue;
                    tag.setAttributeNode(attr);
                }
                else {
                    tag[attrName] = newValue;
                    tag.setAttribute(attrName, newValue);
                }
            }
            this.oldValue = newValue;
        };
        return AttributeBinding;
    }(rebind_1.Reactive.Binding));
    Dom.AttributeBinding = AttributeBinding;
})(Dom = exports.Dom || (exports.Dom = {}));
function join(separator, value) {
    if (Array.isArray(value)) {
        return value.length > 0 ? value.sort().join(separator) : null;
    }
    return value;
}
exports.join = join;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2RvbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSxtQ0FBeUM7QUFDekMsbUNBQWlDO0FBR2pDLElBQWMsR0FBRyxDQXVpQmhCO0FBdmlCRCxXQUFjLEdBQUc7SUFFYixJQUFJLFFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDO0lBZ0IvQjtRQUFvQyxrQ0FBVTtRQUcxQyx3QkFBb0IsR0FBRyxFQUFTLFlBQTRDLEVBQVMsUUFBMEI7WUFBL0csWUFDSSxpQkFBTyxTQUNWO1lBRm1CLFNBQUcsR0FBSCxHQUFHLENBQUE7WUFBUyxrQkFBWSxHQUFaLFlBQVksQ0FBZ0M7WUFBUyxjQUFRLEdBQVIsUUFBUSxDQUFrQjtZQUZ2RyxlQUFTLEdBQXNCLEVBQUUsQ0FBQzs7UUFJMUMsQ0FBQztRQUVELCtCQUFNLEdBQU47WUFDSSxJQUFJLE1BQU0sR0FBRyxlQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBRWxELElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQztZQUNmLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO2dCQUNyQyxJQUFJLE9BQU8sR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBRXhCLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQztnQkFDcEIsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO29CQUM3QyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUMxQixFQUFFLENBQUMsQ0FB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LENBQUM7Z0JBQ0osRUFBRSxDQUFDLENBQUMsT0FBTyxRQUFRLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQztvQkFDbEMsSUFBSSxJQUFJLEdBQUcsUUFBUSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQztvQkFDOUMsSUFBSSxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUM7b0JBQ3RCLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDL0IsQ0FBQztnQkFBQyxJQUFJLENBQUMsQ0FBQztvQkFDSixHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsUUFBUSxDQUFDO29CQUN6QixHQUFHLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztnQkFDekMsQ0FBQztZQUNMLENBQUM7WUFDRCxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUM3QixDQUFDO1FBQ0wsdUJBQUM7SUFBRCxDQUFDLEFBakRELENBQXNDLGlCQUFFLENBQUMsT0FBTyxHQWlEL0M7SUFqRFksb0JBQWdCLG1CQWlENUIsQ0FBQTtBQXFRTCxDQUFDLEVBdmlCYSxHQUFHLEdBQUgsV0FBRyxLQUFILFdBQUcsUUF1aUJoQjtBQUVELGNBQXFCLFNBQWlCLEVBQUUsS0FBSztJQUN6QyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2QixNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDbEUsQ0FBQztJQUNELE1BQU0sQ0FBQyxLQUFLLENBQUM7QUFDakIsQ0FBQztBQUxELG9CQUtDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29yZSB9IGZyb20gJy4vY29yZSdcclxuaW1wb3J0IHsgUmVhY3RpdmUgYXMgUmUgfSBmcm9tICcuL3JlYmluZCdcclxuaW1wb3J0IHsgYWNjZXB0IH0gZnJvbSAnLi9mc2hhcnAnXHJcbmltcG9ydCB7IFRlbXBsYXRlIH0gZnJvbSAnLi90ZW1wbGF0ZSdcclxuXHJcbmV4cG9ydCBtb2R1bGUgRG9tIHtcclxuXHJcbiAgICB2YXIgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XHJcblxyXG4gICAgaW50ZXJmYWNlIElWaXNpdG9yIGV4dGVuZHMgVGVtcGxhdGUuSVZpc2l0b3I8UmUuQmluZGluZz4ge1xyXG4gICAgfVxyXG5cclxuICAgIC8vZXhwb3J0IGNsYXNzIFRlbXBsYXRlVmlzaXRvciBpbXBsZW1lbnRzIElWaXNpdG9yIHtcclxuICAgIC8vICAgIHB1YmxpYyB0ZXh0KGFzdCk6IFRleHRCaW5kaW5nIHtcclxuICAgIC8vICAgICAgICByZXR1cm4gbmV3IFRleHRCaW5kaW5nKGFzdCk7XHJcbiAgICAvLyAgICB9XHJcblxyXG4gICAgLy8gICAgcHVibGljIGNvbnRlbnQoYXN0LCBjaGlsZHJlbjogVGVtcGxhdGUuSU5vZGVbXSk6IENvbnRlbnRCaW5kaW5nIHtcclxuICAgIC8vICAgICAgICB2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XHJcbiAgICAvLyAgICAgICAgcmV0dXJuIG5ldyBDb250ZW50QmluZGluZyhhc3QsIGRvbSA9PiBmcmFnbWVudC5hcHBlbmRDaGlsZChkb20pLCBjaGlsZHJlbik7XHJcbiAgICAvLyAgICB9XHJcbiAgICAvL31cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgQ29udGVudEJpbmRpbmcgZXh0ZW5kcyBSZS5CaW5kaW5nIGltcGxlbWVudHMgSVZpc2l0b3Ige1xyXG4gICAgICAgIHByaXZhdGUgZnJhZ21lbnRzOiBDb250ZW50RnJhZ21lbnRbXSA9IFtdO1xyXG5cclxuICAgICAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFzdCwgcHVibGljIHBhcmVudEluc2VydDogKG46IE5vZGUsIGlkeDogbnVtYmVyKSA9PiB2b2lkLCBwdWJsaWMgY2hpbGRyZW46IFRlbXBsYXRlLklOb2RlW10pIHtcclxuICAgICAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJlbmRlcigpIHtcclxuICAgICAgICAgICAgdmFyIHN0cmVhbSA9IGFjY2VwdCh0aGlzLmFzdCwgdGhpcywgdGhpcy5jb250ZXh0KTtcclxuXHJcbiAgICAgICAgICAgIHZhciBvZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0cmVhbS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvbnRleHQgPSBzdHJlYW1baV07XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGZyYWdtZW50ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGUgPSBpOyBlIDwgdGhpcy5mcmFnbWVudHMubGVuZ3RoOyBlKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZiA9IHRoaXMuZnJhZ21lbnRzW2VdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmLmNvbnRleHQgPT09IGNvbnRleHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJhZ21lbnQgPSBmO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZSAhPT0gaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogZm91bmQgZnJhZ21lbnQgYXQgZSBieSBzaG91bGQgYmUgbG9jYXRlZCBhdCBpICovXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZyYWdtZW50cy5zcGxpY2UoZSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGZyYWdtZW50ID09PSBudWxsIC8qIG5vdCBmb3VuZCAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIGZyYWdtZW50ID0gbmV3IENvbnRlbnRGcmFnbWVudCh0aGlzLCBjb250ZXh0LCBvZmZzZXQpLnVwZGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChpIDwgdGhpcy5mcmFnbWVudHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mcmFnbWVudHMuc3BsaWNlKGksIDAsIGZyYWdtZW50KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mcmFnbWVudHMucHVzaChmcmFnbWVudCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgb2Zmc2V0ICs9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gc3RyZWFtO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHRleHQoYXN0LCBvcHRpb25zOiB7IGZyYWdtZW50OiBDb250ZW50RnJhZ21lbnQsIGNoaWxkOiBudW1iZXIgfSk6IFRleHRCaW5kaW5nIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBiaW5kaW5nID0gbmV3IFRleHRCaW5kaW5nKGFzdCk7XHJcblxyXG4gICAgICAgICAgICBvcHRpb25zLmZyYWdtZW50Lmluc2VydChiaW5kaW5nLmRvbSwgb3B0aW9ucy5jaGlsZCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gYmluZGluZztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBjb250ZW50KGFzdCwgY2hpbGRyZW4sIG9wdGlvbnM6IHsgZnJhZ21lbnQ6IENvbnRlbnRGcmFnbWVudCwgY2hpbGQ6IG51bWJlciB9KTogQ29udGVudEJpbmRpbmcge1xyXG4gICAgICAgICAgICB2YXIgYmluZGluZyA9IG5ldyBDb250ZW50QmluZGluZyhhc3QsIGRvbSA9PiBvcHRpb25zLmZyYWdtZW50Lmluc2VydChkb20sIG9wdGlvbnMuY2hpbGQpLCBjaGlsZHJlbik7XHJcbiAgICAgICAgICAgIHJldHVybiBiaW5kaW5nO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjbGFzcyBDb250ZW50RnJhZ21lbnQge1xyXG4gICAgICAgIHB1YmxpYyBiaW5kaW5nczogUmUuQmluZGluZ1tdID0gW107XHJcblxyXG4gICAgICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgb3duZXI6IENvbnRlbnRCaW5kaW5nLCBwdWJsaWMgY29udGV4dCwgcHJpdmF0ZSBvZmZzZXQ6IG51bWJlcikgeyB9XHJcblxyXG4gICAgICAgIGluc2VydChkb20sIGluZGV4KSB7XHJcbiAgICAgICAgICAgIHRoaXMub3duZXIucGFyZW50SW5zZXJ0KGRvbSwgdGhpcy5vZmZzZXQgKyBpbmRleCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB1cGRhdGUoKSB7XHJcbiAgICAgICAgICAgIHZhciBjb250ZXh0ID0gdGhpcy5jb250ZXh0O1xyXG4gICAgICAgICAgICBmb3IgKHZhciBlID0gMDsgZSA8IHRoaXMub3duZXIuY2hpbGRyZW4ubGVuZ3RoOyBlKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYmluZGluZ3NbZV0gPVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3duZXIuY2hpbGRyZW5bZV0uYWNjZXB0KHRoaXMub3duZXIgYXMgSVZpc2l0b3IsIHsgZnJhZ21lbnQ6IHRoaXMsIGNoaWxkOiBlIH0pLnVwZGF0ZShjb250ZXh0KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBUZXh0QmluZGluZyBleHRlbmRzIFJlLkJpbmRpbmcge1xyXG4gICAgICAgIHB1YmxpYyBkb207XHJcblxyXG4gICAgICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYXN0KSB7XHJcbiAgICAgICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMuZG9tID0gKDxhbnk+ZG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKFwiXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmVuZGVyKGNvbnRleHQpIHtcclxuICAgICAgICAgICAgY29uc3QgbmV3VmFsdWUgPSBhY2NlcHQodGhpcy5hc3QsIHRoaXMsIGNvbnRleHQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCEhbmV3VmFsdWUgJiYgISFuZXdWYWx1ZS5vbk5leHQpIHtcclxuICAgICAgICAgICAgICAgIG5ld1ZhbHVlLnN1YnNjcmliZSh0aGlzKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub25OZXh0KG5ld1ZhbHVlLnZhbHVlT2YoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG9uTmV4dChuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLmRvbS50ZXh0Q29udGVudCA9IG5ld1ZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgVGFnQmluZGluZyBleHRlbmRzIFJlLkJpbmRpbmcge1xyXG4gICAgICAgIHB1YmxpYyBkb207XHJcbiAgICAgICAgcHJpdmF0ZSBhdHRyaWJ1dGVCaW5kaW5ncyA9IFtdO1xyXG5cclxuICAgICAgICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcsIHByaXZhdGUgbnM6IHN0cmluZywgYXR0cmlidXRlczogeyBuYW1lOyB0cGwgfVtdLCBwcml2YXRlIGV2ZW50cykge1xyXG4gICAgICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgICAgICBpZiAobnMgPT09IG51bGwpXHJcbiAgICAgICAgICAgICAgICB0aGlzLmRvbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobmFtZSk7XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kb20gPSAoPGFueT5kb2N1bWVudCkuY3JlYXRlRWxlbWVudE5TKG5zLCBuYW1lLnRvTG93ZXJDYXNlKCkpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmRvbS5hdHRyaWJ1dGVzW1wiX19iaW5kaW5nXCJdID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgIHZhciBjbGFzc0JpbmRpbmcgPSBuZXcgQ2xhc3NCaW5kaW5nKHRoaXMpO1xyXG4gICAgICAgICAgICBjb25zdCBsZW5ndGggPSBhdHRyaWJ1dGVzLmxlbmd0aDtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGF0dHIgPSBhdHRyaWJ1dGVzW2ldO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBhdHRyVHBsID0gYXR0ci50cGw7XHJcbiAgICAgICAgICAgICAgICB2YXIgYXR0ck5hbWUgPSBhdHRyLm5hbWU7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGF0dHJOYW1lID09PSBcImNsYXNzXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc0JpbmRpbmcuc2V0QmFzZUNsYXNzKGF0dHJUcGwpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhdHRyTmFtZS5zdGFydHNXaXRoKFwiY2xhc3MuXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NCaW5kaW5nLmFkZENsYXNzKGF0dHJOYW1lLnN1YnN0cig2KSwgYXR0clRwbCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhdHRyQmluZGluZyA9IG5ldyBBdHRyaWJ1dGVCaW5kaW5nKHRoaXMsIGF0dHJOYW1lLCBhdHRyVHBsKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmF0dHJpYnV0ZUJpbmRpbmdzLnB1c2goYXR0ckJpbmRpbmcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB0aGlzLmF0dHJpYnV0ZUJpbmRpbmdzLnB1c2goY2xhc3NCaW5kaW5nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJlbmRlcihjb250ZXh0KSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5hdHRyaWJ1dGVCaW5kaW5ncy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hdHRyaWJ1dGVCaW5kaW5nc1tpXS5yZW5kZXIoY29udGV4dCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZG9tO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdHJpZ2dlcihuYW1lKSB7XHJcbiAgICAgICAgICAgIHZhciBoYW5kbGVyID0gdGhpcy5ldmVudHMuZ2V0KG5hbWUpO1xyXG4gICAgICAgICAgICBpZiAoISFoYW5kbGVyKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gaGFuZGxlci5leGVjdXRlKHRoaXMuY29udGV4dCwge1xyXG4gICAgICAgICAgICAgICAgICAgIGdldChvYmosIG5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9iai5nZXQobmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBzZXQob2JqOiBhbnksIG5hbWU6IHN0cmluZywgdmFsdWU6IGFueSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmouZ2V0KG5hbWUpLnNldCh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBpbnZva2UoXywgZm4sIGFyZ3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEhZm4uaW52b2tlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgeHMgPSBhcmdzLm1hcCh4ID0+IHgudmFsdWVPZigpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmbi5pbnZva2UoeHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmbjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoISFyZXN1bHQgJiYgdHlwZW9mIHJlc3VsdC52YWx1ZSA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5pbnZva2UoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgQ2xhc3NCaW5kaW5nIGV4dGVuZHMgUmUuQmluZGluZyB7XHJcbiAgICAgICAgcHVibGljIGRvbTtcclxuICAgICAgICBwcml2YXRlIGNvbmRpdGlvbnMgPSBbXTtcclxuICAgICAgICBwcml2YXRlIG9sZFZhbHVlO1xyXG4gICAgICAgIHByaXZhdGUgYmFzZUNsYXNzVHBsO1xyXG5cclxuICAgICAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHBhcmVudDogVGFnQmluZGluZykge1xyXG4gICAgICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2V0QmFzZUNsYXNzKHRwbCkge1xyXG4gICAgICAgICAgICB0aGlzLmJhc2VDbGFzc1RwbCA9IHRwbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGFkZENsYXNzKGNsYXNzTmFtZSwgY29uZGl0aW9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29uZGl0aW9ucy5wdXNoKHsgY2xhc3NOYW1lLCBjb25kaXRpb24gfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZW5kZXIoY29udGV4dCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgICAgICAgICBjb25zdCBjbGFzc2VzID0gW107XHJcbiAgICAgICAgICAgIGlmICghIXRoaXMuYmFzZUNsYXNzVHBsKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLmJhc2VDbGFzc1RwbC5leGVjdXRlKGNvbnRleHQsIHRoaXMpLnZhbHVlT2YoKTtcclxuICAgICAgICAgICAgICAgIGNsYXNzZXMucHVzaCh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5jb25kaXRpb25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgeyBjbGFzc05hbWUsIGNvbmRpdGlvbiB9ID0gdGhpcy5jb25kaXRpb25zW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKCEhY29uZGl0aW9uLmV4ZWN1dGUoY29udGV4dCwgdGhpcykudmFsdWVPZigpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3Nlcy5wdXNoKGNsYXNzTmFtZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgY2xhc3Nlcy5sZW5ndGggPiAwID8gam9pbihcIiBcIiwgY2xhc3NlcykgOiBudWxsKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzZXRBdHRyaWJ1dGUoYXR0ck5hbWU6IHN0cmluZywgbmV3VmFsdWUpIHtcclxuICAgICAgICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy5vbGRWYWx1ZTtcclxuXHJcbiAgICAgICAgICAgIHZhciB0YWcgPSB0aGlzLnBhcmVudC5kb207XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbmV3VmFsdWUgPT09IFwidW5kZWZpbmVkXCIgfHwgbmV3VmFsdWUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRhZ1thdHRyTmFtZV0gPSB2b2lkIDA7XHJcbiAgICAgICAgICAgICAgICB0YWcucmVtb3ZlQXR0cmlidXRlKGF0dHJOYW1lKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2xkVmFsdWUgPT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYXR0ciA9IGRvY3VtZW50LmNyZWF0ZUF0dHJpYnV0ZShhdHRyTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXR0ci52YWx1ZSA9IG5ld1ZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRhZy5zZXRBdHRyaWJ1dGVOb2RlKGF0dHIpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0YWcuY2xhc3NOYW1lID0gbmV3VmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5vbGRWYWx1ZSA9IG5ld1ZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIEF0dHJpYnV0ZUJpbmRpbmcgZXh0ZW5kcyBSZS5CaW5kaW5nIHtcclxuICAgICAgICBwdWJsaWMgZG9tO1xyXG4gICAgICAgIHByaXZhdGUgb2xkVmFsdWU7XHJcblxyXG4gICAgICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcGFyZW50OiBUYWdCaW5kaW5nLCBwcml2YXRlIG5hbWUsIHByaXZhdGUgdHBsKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZW5kZXIoY29udGV4dCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnRwbC5leGVjdXRlKGNvbnRleHQsIHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCEhdmFsdWUgJiYgISF2YWx1ZS5vbk5leHQpIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlLnN1YnNjcmliZSh0aGlzKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub25OZXh0KHZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIG9uTmV4dCh2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAodmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHZvaWQgMCAmJiAhIXZhbHVlLnZhbHVlT2YpXHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnZhbHVlT2YoKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBuZXdWYWx1ZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMubmFtZSA9PT0gXCJjaGVja2VkXCIpIHtcclxuICAgICAgICAgICAgICAgIG5ld1ZhbHVlID0gISF2YWx1ZSA/IFwiY2hlY2tlZFwiIDogbnVsbDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG5ld1ZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMub2xkVmFsdWU7XHJcblxyXG4gICAgICAgICAgICB2YXIgYXR0ck5hbWUgPSB0aGlzLm5hbWU7XHJcbiAgICAgICAgICAgIHZhciB0YWcgPSB0aGlzLnBhcmVudC5kb207XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbmV3VmFsdWUgPT09IFwidW5kZWZpbmVkXCIgfHwgbmV3VmFsdWUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRhZ1thdHRyTmFtZV0gPSB2b2lkIDA7XHJcbiAgICAgICAgICAgICAgICB0YWcucmVtb3ZlQXR0cmlidXRlKGF0dHJOYW1lKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2xkVmFsdWUgPT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYXR0ciA9IGRvY3VtZW50LmNyZWF0ZUF0dHJpYnV0ZShhdHRyTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXR0ci52YWx1ZSA9IG5ld1ZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRhZy5zZXRBdHRyaWJ1dGVOb2RlKGF0dHIpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0YWdbYXR0ck5hbWVdID0gbmV3VmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFnLnNldEF0dHJpYnV0ZShhdHRyTmFtZSwgbmV3VmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMub2xkVmFsdWUgPSBuZXdWYWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy9jbGFzcyBSZWFjdGl2ZUJpbmRpbmcgZXh0ZW5kcyBEb21CaW5kaW5nIHtcclxuICAgIC8vICAgIHByaXZhdGUgYmluZGluZ3MgPSBbXTtcclxuICAgIC8vICAgIHByaXZhdGUgc3RyZWFtO1xyXG4gICAgLy8gICAgcHJpdmF0ZSBsZW5ndGg7XHJcblxyXG4gICAgLy8gICAgY29uc3RydWN0b3IocHJpdmF0ZSB0cGw6IFRlbXBsYXRlLklOb2RlLCBwcml2YXRlIHRhcmdldCwgcHJpdmF0ZSBvZmZzZXQpIHtcclxuICAgIC8vICAgICAgICBzdXBlcigpO1xyXG4gICAgLy8gICAgfVxyXG5cclxuICAgIC8vICAgIHJlbmRlcihjb250ZXh0KSB7XHJcbiAgICAvLyAgICAgICAgdmFyIHsgYmluZGluZ3MsIHRhcmdldCwgdHBsIH0gPSB0aGlzO1xyXG4gICAgLy8gICAgICAgIGlmICghIXRwbC5tb2RlbEFjY2Vzc29yKSB7XHJcbiAgICAvLyAgICAgICAgICAgIHZhciBzdHJlYW0gPSB0cGwubW9kZWxBY2Nlc3Nvci5leGVjdXRlKGNvbnRleHQsIHRoaXMpO1xyXG4gICAgLy8gICAgICAgICAgICB0aGlzLmxlbmd0aCA9IDA7XHJcblxyXG4gICAgLy8gICAgICAgICAgICBzdHJlYW0uZm9yRWFjaCgoY3R4LCBpZHgpID0+IHtcclxuICAgIC8vICAgICAgICAgICAgICAgIHRoaXMubGVuZ3RoID0gaWR4ICsgMTtcclxuICAgIC8vICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYmluZGluZ3MubGVuZ3RoOyBpKyspIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICB2YXIgYmluZGluZyA9IGJpbmRpbmdzW2ldO1xyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgIGlmIChiaW5kaW5nLmNvbnRleHQudmFsdWUgPT09IGN0eC52YWx1ZSkge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSAhPT0gaWR4KSB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICBiaW5kaW5nc1tpXSA9IGJpbmRpbmdzW2lkeF07XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICBiaW5kaW5nc1tpZHhdID0gYmluZGluZztcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgICAgICAgICAgdGhpcy5leGVjdXRlKGN0eCwgaWR4KTtcclxuICAgIC8vICAgICAgICAgICAgfSk7XHJcbiAgICAvLyAgICAgICAgfSBlbHNlIHtcclxuICAgIC8vICAgICAgICAgICAgdGhpcy5leGVjdXRlKGNvbnRleHQsIDApO1xyXG4gICAgLy8gICAgICAgICAgICB0aGlzLmxlbmd0aCA9IDE7XHJcbiAgICAvLyAgICAgICAgfVxyXG5cclxuICAgIC8vICAgICAgICB3aGlsZSAoYmluZGluZ3MubGVuZ3RoID4gdGhpcy5sZW5ndGgpIHtcclxuICAgIC8vICAgICAgICAgICAgY29uc3Qgb2xkQmluZGluZyA9IGJpbmRpbmdzLnBvcCgpO1xyXG4gICAgLy8gICAgICAgICAgICB0YXJnZXQucmVtb3ZlQ2hpbGQob2xkQmluZGluZy5kb20pO1xyXG4gICAgLy8gICAgICAgIH1cclxuXHJcbiAgICAvLyAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAvLyAgICB9XHJcblxyXG4gICAgLy8gICAgZXhlY3V0ZShyZXN1bHQsIGlkeCkge1xyXG4gICAgLy8gICAgICAgIHRoaXMuYWRkQmluZGluZyh0aGlzLnRwbC5iaW5kKHJlc3VsdCksIGlkeCk7XHJcbiAgICAvLyAgICB9XHJcblxyXG4gICAgLy8gICAgYWRkQmluZGluZyhuZXdCaW5kaW5nLCBpZHgpIHtcclxuICAgIC8vICAgICAgICB2YXIgeyBvZmZzZXQsIHRhcmdldCwgYmluZGluZ3MgfSA9IHRoaXM7XHJcbiAgICAvLyAgICAgICAgdmFyIGluc2VydEF0ID0gb2Zmc2V0ICsgaWR4O1xyXG5cclxuICAgIC8vICAgICAgICBpZiAoaW5zZXJ0QXQgPCB0YXJnZXQuY2hpbGROb2Rlcy5sZW5ndGgpIHtcclxuICAgIC8vICAgICAgICAgICAgdmFyIGJlZm9yZUVsZW1lbnQgPSB0YXJnZXQuY2hpbGROb2Rlc1tpbnNlcnRBdF07XHJcbiAgICAvLyAgICAgICAgICAgIHRhcmdldC5pbnNlcnRCZWZvcmUobmV3QmluZGluZy5kb20sIGJlZm9yZUVsZW1lbnQpO1xyXG4gICAgLy8gICAgICAgIH0gZWxzZSB7XHJcbiAgICAvLyAgICAgICAgICAgIHRhcmdldC5hcHBlbmRDaGlsZChuZXdCaW5kaW5nLmRvbSk7XHJcbiAgICAvLyAgICAgICAgfVxyXG5cclxuICAgIC8vICAgICAgICBiaW5kaW5ncy5zcGxpY2UoaWR4LCAwLCBuZXdCaW5kaW5nKTtcclxuICAgIC8vICAgIH1cclxuICAgIC8vfVxyXG5cclxuICAgIC8vZXhwb3J0IGZ1bmN0aW9uIGV4ZWN1dGVUZW1wbGF0ZShvYnNlcnZhYmxlLCB0cGw6IFRlbXBsYXRlLklOb2RlLCB0YXJnZXQsIG9mZnNldCkge1xyXG4gICAgLy8gICAgcmV0dXJuIG5ldyBSZWFjdGl2ZUJpbmRpbmcodHBsLCB0YXJnZXQsIG9mZnNldCkudXBkYXRlKG9ic2VydmFibGUpO1xyXG4gICAgLy99XHJcblxyXG4gICAgLy9jbGFzcyBCaW5kZXIge1xyXG4gICAgLy8gICAgcHJpdmF0ZSBjb21waWxlOiBGdW5jdGlvbjtcclxuICAgIC8vICAgIHByaXZhdGUgY29tcGlsZXI6IEFzdC5Db21waWxlcjtcclxuICAgIC8vICAgIHB1YmxpYyBjb250ZXh0czogRGF0YTQuSVZhbHVlW10gPSBbXTtcclxuXHJcbiAgICAvLyAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGxpYnM6IGFueVtdKSB7XHJcbiAgICAvLyAgICAgICAgdGhpcy5jb21waWxlciA9IG5ldyBBc3QuQ29tcGlsZXIoKTtcclxuICAgIC8vICAgICAgICB0aGlzLmNvbXBpbGUgPSB0aGlzLmNvbXBpbGVyLnRlbXBsYXRlLmJpbmQodGhpcy5jb21waWxlcik7XHJcbiAgICAvLyAgICB9XHJcblxyXG4gICAgLy8gICAgc3RhdGljIGxpc3Rlbih0YXJnZXQsIHN0b3JlOiBEYXRhNS5TdG9yZSkge1xyXG4gICAgLy8gICAgICAgIHZhciBldmVudEhhbmRsZXIgPSAodGFyZ2V0LCBuYW1lKSA9PiB7XHJcbiAgICAvLyAgICAgICAgICAgIHZhciBiaW5kaW5nID0gdGFyZ2V0LmF0dHJpYnV0ZXNbXCJfX2JpbmRpbmdcIl07XHJcbiAgICAvLyAgICAgICAgICAgIGlmICghIWJpbmRpbmcpIHtcclxuICAgIC8vICAgICAgICAgICAgICAgIGJpbmRpbmcudHJpZ2dlcihuYW1lKTtcclxuICAgIC8vICAgICAgICAgICAgICAgIHN0b3JlLnVwZGF0ZSgpO1xyXG4gICAgLy8gICAgICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgfTtcclxuXHJcbiAgICAvLyAgICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBldnQgPT4gZXZlbnRIYW5kbGVyKGV2dC50YXJnZXQsIGV2dC50eXBlKSk7XHJcblxyXG4gICAgLy8gICAgICAgIGNvbnN0IG9uY2hhbmdlID0gZXZ0ID0+IHtcclxuICAgIC8vICAgICAgICAgICAgdmFyIGJpbmRpbmcgPSBldnQudGFyZ2V0LmF0dHJpYnV0ZXNbXCJfX2JpbmRpbmdcIl07XHJcbiAgICAvLyAgICAgICAgICAgIGlmIChiaW5kaW5nICE9IG51bGwpIHtcclxuICAgIC8vICAgICAgICAgICAgICAgIGNvbnN0IG5hbWVBdHRyID0gZXZ0LnRhcmdldC5hdHRyaWJ1dGVzW1wibmFtZVwiXTtcclxuICAgIC8vICAgICAgICAgICAgICAgIGlmICghIW5hbWVBdHRyKSB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgdmFyIGFyciA9IG5hbWVBdHRyLnZhbHVlLnNwbGl0KCcuJyk7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRleHQgPSBiaW5kaW5nLmNvbnRleHQ7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHAgPSBhcnJbaV07XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQgPSBjb250ZXh0LmdldChwKTtcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgY29udGV4dC5zZXQoZXZ0LnRhcmdldC52YWx1ZSk7XHJcblxyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgIHN0b3JlLnVwZGF0ZSgpO1xyXG4gICAgLy8gICAgICAgICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgfTtcclxuICAgIC8vICAgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsXHJcbiAgICAvLyAgICAgICAgICAgIGV2dCA9PiB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICBpZiAoZXZ0LmtleUNvZGUgPT09IDEzKSB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgZXZlbnRIYW5kbGVyKGV2dC50YXJnZXQsIFwia2V5dXAuZW50ZXJcIik7XHJcbiAgICAvLyAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgIG9uY2hhbmdlKGV2dCk7XHJcbiAgICAvLyAgICAgICAgICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgICAgIH0pO1xyXG4gICAgLy8gICAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VvdmVyXCIsXHJcbiAgICAvLyAgICAgICAgICAgIGV2dCA9PiB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICBldmVudEhhbmRsZXIoZXZ0LnRhcmdldCwgXCJtb3VzZW92ZXJcIik7XHJcbiAgICAvLyAgICAgICAgICAgIH1cclxuICAgIC8vICAgICAgICApO1xyXG4gICAgLy8gICAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VvdXRcIixcclxuICAgIC8vICAgICAgICAgICAgZXZ0ID0+IHtcclxuICAgIC8vICAgICAgICAgICAgICAgIGV2ZW50SGFuZGxlcihldnQudGFyZ2V0LCBcIm1vdXNlb3V0XCIpO1xyXG4gICAgLy8gICAgICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgKTtcclxuICAgIC8vICAgIH1cclxuXHJcbiAgICAvLyAgICBwdWJsaWMgdXBkYXRlMigpIHtcclxuICAgIC8vICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY29udGV4dHMubGVuZ3RoOyBpKyspIHtcclxuICAgIC8vICAgICAgICAgICAgdmFyIGN0eCA9IHRoaXMuY29udGV4dHNbaV07XHJcbiAgICAvLyAgICAgICAgICAgIGN0eC51cGRhdGUobnVsbCk7XHJcbiAgICAvLyAgICAgICAgfVxyXG4gICAgLy8gICAgfVxyXG5cclxuICAgIC8vICAgIHBhcnNlRG9tKHJvb3REb206IE5vZGUpOiBUZW1wbGF0ZS5JTm9kZSB7XHJcbiAgICAvLyAgICAgICAgY29uc3Qgc3RhY2sgPSBbXTtcclxuICAgIC8vICAgICAgICBsZXQgaTogbnVtYmVyO1xyXG4gICAgLy8gICAgICAgIHZhciByb290VHBsO1xyXG4gICAgLy8gICAgICAgIHN0YWNrLnB1c2goe1xyXG4gICAgLy8gICAgICAgICAgICBub2RlOiByb290RG9tLFxyXG4gICAgLy8gICAgICAgICAgICBwdXNoKGUpIHtcclxuICAgIC8vICAgICAgICAgICAgICAgIHJvb3RUcGwgPSBlO1xyXG4gICAgLy8gICAgICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgfSk7XHJcblxyXG4gICAgLy8gICAgICAgIHdoaWxlIChzdGFjay5sZW5ndGggPiAwKSB7XHJcbiAgICAvLyAgICAgICAgICAgIGNvbnN0IGN1ciA9IHN0YWNrLnBvcCgpO1xyXG4gICAgLy8gICAgICAgICAgICBjb25zdCBub2RlOiBOb2RlID0gY3VyLm5vZGU7XHJcbiAgICAvLyAgICAgICAgICAgIGNvbnN0IHB1c2ggPSBjdXIucHVzaDtcclxuXHJcbiAgICAvLyAgICAgICAgICAgIGlmICghIW5vZGVbXCJjb250ZW50XCJdKSB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICBjb25zdCBlbHQgPSA8SFRNTEVsZW1lbnQ+bm9kZVtcImNvbnRlbnRcIl07XHJcbiAgICAvLyAgICAgICAgICAgICAgICB2YXIgdGVtcGxhdGUgPSBuZXcgVGVtcGxhdGUuQ29udGVudFRlbXBsYXRlKCk7XHJcbiAgICAvLyAgICAgICAgICAgICAgICBmb3IgKGkgPSBlbHQuY2hpbGROb2Rlcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2goeyBub2RlOiBlbHQuY2hpbGROb2Rlc1tpXSwgcHVzaDogdGVtcGxhdGUuYWRkQ2hpbGQuYmluZCh0ZW1wbGF0ZSkgfSk7XHJcbiAgICAvLyAgICAgICAgICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgICAgICAgICBwdXNoKHRlbXBsYXRlKTtcclxuICAgIC8vICAgICAgICAgICAgfSBlbHNlIGlmIChub2RlLm5vZGVUeXBlID09PSAxKSB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICBjb25zdCBlbHQgPSA8SFRNTEVsZW1lbnQ+bm9kZTtcclxuICAgIC8vICAgICAgICAgICAgICAgIGNvbnN0IHRlbXBsYXRlID0gbmV3IFRlbXBsYXRlLlRhZ1RlbXBsYXRlKGVsdC50YWdOYW1lLCBlbHQubmFtZXNwYWNlVVJJKTtcclxuXHJcbiAgICAvLyAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyAhIWVsdC5hdHRyaWJ1dGVzICYmIGkgPCBlbHQuYXR0cmlidXRlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBlbHQuYXR0cmlidXRlc1tpXTtcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcnNlQXR0cih0ZW1wbGF0ZSwgYXR0cmlidXRlKTtcclxuICAgIC8vICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAvLyAgICAgICAgICAgICAgICBmb3IgKGkgPSBlbHQuY2hpbGROb2Rlcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2goeyBub2RlOiBlbHQuY2hpbGROb2Rlc1tpXSwgcHVzaDogdGVtcGxhdGUuYWRkQ2hpbGQuYmluZCh0ZW1wbGF0ZSkgfSk7XHJcbiAgICAvLyAgICAgICAgICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgICAgICAgICBwdXNoKHRlbXBsYXRlKTtcclxuICAgIC8vICAgICAgICAgICAgfSBlbHNlIGlmIChub2RlLm5vZGVUeXBlID09PSAzKSB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICB2YXIgdGV4dENvbnRlbnQgPSBub2RlLnRleHRDb250ZW50O1xyXG4gICAgLy8gICAgICAgICAgICAgICAgaWYgKHRleHRDb250ZW50LnRyaW0oKS5sZW5ndGggPiAwKSB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgY29uc3QgdHBsID0gdGhpcy5jb21waWxlKHRleHRDb250ZW50KTtcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICBwdXNoKG5ldyBUZW1wbGF0ZS5UZXh0VGVtcGxhdGUodHBsIHx8IG5vZGUudGV4dENvbnRlbnQpKTtcclxuICAgIC8vICAgICAgICAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgIH1cclxuXHJcbiAgICAvLyAgICAgICAgcmV0dXJuIHJvb3RUcGw7XHJcbiAgICAvLyAgICB9XHJcblxyXG4gICAgLy8gICAgcGFyc2VBdHRyKHRhZ0VsZW1lbnQ6IFRlbXBsYXRlLlRhZ1RlbXBsYXRlLCBhdHRyOiBBdHRyKSB7XHJcbiAgICAvLyAgICAgICAgY29uc3QgbmFtZSA9IGF0dHIubmFtZTtcclxuICAgIC8vICAgICAgICBpZiAobmFtZSA9PT0gXCJjbGlja1wiIHx8IG5hbWUubWF0Y2goL2tleXVwXFwuLykgfHwgbmFtZSA9PT0gXCJtb3VzZW92ZXJcIiB8fCBuYW1lID09PSBcIm1vdXNlb3V0XCIpIHtcclxuICAgIC8vICAgICAgICAgICAgY29uc3QgZm4gPSB0aGlzLmNvbXBpbGUoYXR0ci52YWx1ZSk7XHJcbiAgICAvLyAgICAgICAgICAgIHRhZ0VsZW1lbnQuYWRkRXZlbnQobmFtZSwgZm4pO1xyXG4gICAgLy8gICAgICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gXCJkYXRhLXNlbGVjdFwiIHx8IG5hbWUgPT09IFwiZGF0YS1mcm9tXCIpIHtcclxuICAgIC8vICAgICAgICAgICAgY29uc3QgZm4gPSB0aGlzLmNvbXBpbGUoYXR0ci52YWx1ZSk7XHJcbiAgICAvLyAgICAgICAgICAgIHRhZ0VsZW1lbnQuc2VsZWN0KGZuKTtcclxuICAgIC8vICAgICAgICB9IGVsc2Uge1xyXG4gICAgLy8gICAgICAgICAgICBjb25zdCB0cGwgPSB0aGlzLmNvbXBpbGUoYXR0ci52YWx1ZSk7XHJcbiAgICAvLyAgICAgICAgICAgIHRhZ0VsZW1lbnQuYXR0cihuYW1lLCB0cGwgfHwgYXR0ci52YWx1ZSk7XHJcblxyXG4gICAgLy8gICAgICAgICAgICAvLyBjb252ZW50aW9uc1xyXG4gICAgLy8gICAgICAgICAgICBpZiAoISF0YWdFbGVtZW50Lm5hbWUubWF0Y2goL15pbnB1dCQvaSkgJiZcclxuICAgIC8vICAgICAgICAgICAgICAgICEhYXR0ci5uYW1lLm1hdGNoKC9ebmFtZSQvaSkgJiZcclxuICAgIC8vICAgICAgICAgICAgICAgICF0YWdFbGVtZW50LmdldEF0dHJpYnV0ZShcInZhbHVlXCIpKSB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZUFjY2Vzc29yID0gdGhpcy5jb21waWxlKGB7eyAke2F0dHIudmFsdWV9IH19YCk7XHJcbiAgICAvLyAgICAgICAgICAgICAgICB0YWdFbGVtZW50LmF0dHIoXCJ2YWx1ZVwiLCB2YWx1ZUFjY2Vzc29yKTtcclxuICAgIC8vICAgICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgIH1cclxuICAgIC8vICAgIH1cclxuXHJcbiAgICAvL31cclxuXHJcbiAgICAvL2V4cG9ydCBmdW5jdGlvbiBpbXBvcnRWaWV3KHZpZXc6IHN0cmluZywgLi4uYXJncyk6IGFueSB7XHJcbiAgICAvLyAgICBpZiAoIShcImltcG9ydFwiIGluIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpKSkge1xyXG4gICAgLy8gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkhUTUwgaW1wb3J0IGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyXCIpO1xyXG4gICAgLy8gICAgfVxyXG5cclxuICAgIC8vICAgIHZhciBkZWZlcnJlZCA9IGRlZmVyKCk7XHJcbiAgICAvLyAgICB2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKTtcclxuICAgIC8vICAgIGxpbmsucmVsID0gJ2ltcG9ydCc7XHJcbiAgICAvLyAgICBsaW5rLmhyZWYgPSB2aWV3O1xyXG4gICAgLy8gICAgbGluay5zZXRBdHRyaWJ1dGUoJ2FzeW5jJywgXCJcIik7IC8vIG1ha2UgaXQgYXN5bmMhXHJcbiAgICAvLyAgICBsaW5rLm9ubG9hZCA9IGUgPT4ge1xyXG4gICAgLy8gICAgICAgIHZhciBsaW5rID0gKDxhbnk+ZS50YXJnZXQpO1xyXG4gICAgLy8gICAgICAgIGRlZmVycmVkLm5vdGlmeShsaW5rLmltcG9ydC5xdWVyeVNlbGVjdG9yKFwidGVtcGxhdGVcIikpO1xyXG4gICAgLy8gICAgICAgIGxpbmsub25sb2FkID0gbnVsbDtcclxuICAgIC8vICAgIH1cclxuICAgIC8vICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQobGluayk7XHJcblxyXG4gICAgLy8gICAgcmV0dXJuIGRlZmVycmVkO1xyXG4gICAgLy99XHJcblxyXG4gICAgLy9mdW5jdGlvbiBkZWZlcigpIHtcclxuICAgIC8vICAgIHJldHVybiB7XHJcbiAgICAvLyAgICAgICAgdmFsdWU6IHZvaWQgMCxcclxuICAgIC8vICAgICAgICByZXNvbHZlcnM6IFtdLFxyXG4gICAgLy8gICAgICAgIG5vdGlmeSh2YWx1ZSkge1xyXG4gICAgLy8gICAgICAgICAgICBpZiAodmFsdWUgPT09IHZvaWQgMClcclxuICAgIC8vICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInVuZGVmaW5lZCByZXN1bHRcIik7XHJcblxyXG4gICAgLy8gICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XHJcblxyXG4gICAgLy8gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVzb2x2ZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICB0aGlzLnJlc29sdmVyc1tpXS5jYWxsKG51bGwsIHZhbHVlKTtcclxuICAgIC8vICAgICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgIH0sXHJcbiAgICAvLyAgICAgICAgdGhlbihyZXNvbHZlKSB7XHJcbiAgICAvLyAgICAgICAgICAgIGlmICh0aGlzLnZhbHVlID09PSB2b2lkIDApIHtcclxuICAgIC8vICAgICAgICAgICAgICAgIHRoaXMucmVzb2x2ZXJzLnB1c2gocmVzb2x2ZSk7XHJcbiAgICAvLyAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICByZXNvbHZlLmNhbGwobnVsbCwgdGhpcy52YWx1ZSk7XHJcbiAgICAvLyAgICAgICAgICAgIH1cclxuICAgIC8vICAgICAgICB9XHJcbiAgICAvLyAgICB9O1xyXG4gICAgLy99XHJcblxyXG4gICAgLy9leHBvcnQgZnVuY3Rpb24gYmluZChkb206IE5vZGUsIHN0b3JlKSB7XHJcblxyXG4gICAgLy8gICAgdmFyIGJpbmRlciA9IG5ldyBCaW5kZXIoW0NvcmUuTGlzdCwgQ29yZS5NYXRoLCBDb3JlLkRhdGVzXSk7XHJcblxyXG4gICAgLy8gICAgbGV0IGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xyXG4gICAgLy8gICAgRG9tLmV4ZWN1dGVUZW1wbGF0ZShzdG9yZSwgYmluZGVyLnBhcnNlRG9tKGRvbSksIGZyYWdtZW50LCAwKTtcclxuICAgIC8vICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgLy8gICAgICAgIHZhciBjaGlsZCA9IGZyYWdtZW50LmNoaWxkTm9kZXNbaV07XHJcbiAgICAvLyAgICAgICAgQmluZGVyLmxpc3RlbihjaGlsZCwgc3RvcmUpO1xyXG4gICAgLy8gICAgfVxyXG5cclxuICAgIC8vICAgIHJldHVybiBmcmFnbWVudDtcclxuICAgIC8vfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gam9pbihzZXBhcmF0b3I6IHN0cmluZywgdmFsdWUpIHtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgIHJldHVybiB2YWx1ZS5sZW5ndGggPiAwID8gdmFsdWUuc29ydCgpLmpvaW4oc2VwYXJhdG9yKSA6IG51bGw7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbn1cclxuXHJcbiAgICAvLyBSZVNoYXJwZXIgcmVzdG9yZSBJbmNvbnNpc3RlbnROYW1pbmdcclxuIl19