"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var rebind_1 = require("./rebind");
var fsharp_1 = require("./fsharp");
var Dom;
(function (Dom) {
    var document = window.document;
    var ContentBinding = (function (_super) {
        __extends(ContentBinding, _super);
        function ContentBinding() {
            var _this = _super.call(this) || this;
            _this.dom = document.createDocumentFragment();
            return _this;
        }
        ContentBinding.prototype.render = function () {
            return this.dom;
        };
        return ContentBinding;
    }(rebind_1.Reactive.Binding));
    Dom.ContentBinding = ContentBinding;
    var TextBinding = (function (_super) {
        __extends(TextBinding, _super);
        function TextBinding(modelAccessor) {
            var _this = _super.call(this) || this;
            _this.modelAccessor = modelAccessor;
            _this.dom = document.createTextNode("");
            return _this;
        }
        TextBinding.prototype.render = function (context) {
            var newValue = fsharp_1.accept(this.modelAccessor, this);
            if (!!newValue && !!newValue.onNext) {
                newValue.subscribe(this);
            }
            else {
                this.onNext(newValue.valueOf());
            }
            return newValue.valueOf();
        };
        TextBinding.prototype.onNext = function (newValue) {
            this.dom.textContent = newValue;
        };
        return TextBinding;
    }(rebind_1.Reactive.Binding));
    Dom.TextBinding = TextBinding;
    var TagBinding = (function (_super) {
        __extends(TagBinding, _super);
        function TagBinding(name, ns, attributes, events) {
            var _this = _super.call(this) || this;
            _this.ns = ns;
            _this.events = events;
            _this.attributeBindings = [];
            if (ns === null)
                _this.dom = document.createElement(name);
            else {
                _this.dom = document.createElementNS(ns, name.toLowerCase());
            }
            _this.dom.attributes["__binding"] = _this;
            var classBinding = new ClassBinding(_this);
            var length = attributes.length;
            for (var i = 0; i < length; i++) {
                var attr = attributes[i];
                var attrTpl = attr.tpl;
                var attrName = attr.name;
                if (attrName === "class") {
                    classBinding.setBaseClass(attrTpl);
                }
                else if (attrName.startsWith("class.")) {
                    classBinding.addClass(attrName.substr(6), attrTpl);
                }
                else {
                    var attrBinding = new AttributeBinding(_this, attrName, attrTpl);
                    _this.attributeBindings.push(attrBinding);
                }
            }
            ;
            _this.attributeBindings.push(classBinding);
            return _this;
        }
        TagBinding.prototype.render = function (context) {
            for (var i = 0; i < this.attributeBindings.length; i++) {
                this.attributeBindings[i].render(context);
            }
            return this.dom;
        };
        TagBinding.prototype.trigger = function (name) {
            var handler = this.events.get(name);
            if (!!handler) {
                var result = handler.execute(this.context, {
                    get: function (obj, name) {
                        return obj.get(name);
                    },
                    set: function (obj, name, value) {
                        obj.get(name).set(value);
                    },
                    invoke: function (_, fn, args) {
                        if (!!fn.invoke) {
                            var xs = args.map(function (x) { return x.valueOf(); });
                            return fn.invoke(xs);
                        }
                        return fn;
                    }
                });
                if (!!result && typeof result.value === "function")
                    result.invoke();
            }
        };
        return TagBinding;
    }(rebind_1.Reactive.Binding));
    Dom.TagBinding = TagBinding;
    var ClassBinding = (function (_super) {
        __extends(ClassBinding, _super);
        function ClassBinding(parent) {
            var _this = _super.call(this) || this;
            _this.parent = parent;
            _this.conditions = [];
            return _this;
        }
        ClassBinding.prototype.setBaseClass = function (tpl) {
            this.baseClassTpl = tpl;
        };
        ClassBinding.prototype.addClass = function (className, condition) {
            this.conditions.push({ className: className, condition: condition });
        };
        ClassBinding.prototype.render = function (context) {
            this.context = context;
            var classes = [];
            if (!!this.baseClassTpl) {
                var value = this.baseClassTpl.execute(context, this).valueOf();
                classes.push(value);
            }
            for (var i = 0; i < this.conditions.length; i++) {
                var _a = this.conditions[i], className = _a.className, condition = _a.condition;
                if (!!condition.execute(context, this).valueOf()) {
                    classes.push(className);
                }
            }
            this.setAttribute("class", classes.length > 0 ? join(" ", classes) : null);
        };
        ClassBinding.prototype.setAttribute = function (attrName, newValue) {
            var oldValue = this.oldValue;
            var tag = this.parent.dom;
            if (typeof newValue === "undefined" || newValue === null) {
                tag[attrName] = void 0;
                tag.removeAttribute(attrName);
            }
            else {
                if (typeof oldValue === "undefined") {
                    var attr = document.createAttribute(attrName);
                    attr.value = newValue;
                    tag.setAttributeNode(attr);
                }
                else {
                    tag.className = newValue;
                }
            }
            this.oldValue = newValue;
        };
        return ClassBinding;
    }(rebind_1.Reactive.Binding));
    Dom.ClassBinding = ClassBinding;
    var AttributeBinding = (function (_super) {
        __extends(AttributeBinding, _super);
        function AttributeBinding(parent, name, tpl) {
            var _this = _super.call(this) || this;
            _this.parent = parent;
            _this.name = name;
            _this.tpl = tpl;
            return _this;
        }
        AttributeBinding.prototype.render = function (context) {
            this.context = context;
            var value = this.tpl.execute(context, this);
            if (!!value && !!value.onNext) {
                value.subscribe(this);
            }
            else {
                this.onNext(value);
            }
        };
        AttributeBinding.prototype.onNext = function (value) {
            if (value !== null && value !== void 0 && !!value.valueOf)
                value = value.valueOf();
            var newValue;
            if (this.name === "checked") {
                newValue = !!value ? "checked" : null;
            }
            else {
                newValue = value;
            }
            var oldValue = this.oldValue;
            var attrName = this.name;
            var tag = this.parent.dom;
            if (typeof newValue === "undefined" || newValue === null) {
                tag[attrName] = void 0;
                tag.removeAttribute(attrName);
            }
            else {
                if (typeof oldValue === "undefined") {
                    var attr = document.createAttribute(attrName);
                    attr.value = newValue;
                    tag.setAttributeNode(attr);
                }
                else {
                    tag[attrName] = newValue;
                    tag.setAttribute(attrName, newValue);
                }
            }
            this.oldValue = newValue;
        };
        return AttributeBinding;
    }(rebind_1.Reactive.Binding));
    Dom.AttributeBinding = AttributeBinding;
})(Dom = exports.Dom || (exports.Dom = {}));
function join(separator, value) {
    if (Array.isArray(value)) {
        return value.length > 0 ? value.sort().join(separator) : null;
    }
    return value;
}
exports.join = join;
//# sourceMappingURL=data:application/json;base64,