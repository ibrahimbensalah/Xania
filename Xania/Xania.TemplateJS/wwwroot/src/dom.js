"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var reactive_1 = require("./reactive");
var fsharp_1 = require("./fsharp");
var Dom;
(function (Dom) {
    var document = window.document;
    var ContentBinding = (function (_super) {
        __extends(ContentBinding, _super);
        function ContentBinding(ast, parentInsert, children) {
            var _this = _super.call(this) || this;
            _this.ast = ast;
            _this.parentInsert = parentInsert;
            _this.children = children;
            _this.fragments = [];
            return _this;
        }
        ContentBinding.prototype.render = function () {
            var stream = this.ast === null ? [this.context] : fsharp_1.accept(this.ast, this, this.context);
            var offset = 0;
            for (var i = 0; i < stream.length; i++) {
                var context = stream[i];
                var fragment = null;
                for (var e = i; e < this.fragments.length; e++) {
                    var f = this.fragments[e];
                    if (f.context === context) {
                        fragment = f;
                        if (e !== i) {
                            this.fragments.splice(e, 1);
                        }
                    }
                }
                if (fragment === null) {
                    fragment = new ContentFragment(this, context, offset);
                }
                if (i < this.fragments.length) {
                    this.fragments.splice(i, 0, fragment);
                }
                else {
                    this.fragments.push(fragment);
                }
                offset += this.children.length;
            }
            return stream;
        };
        ContentBinding.prototype.text = function (ast, options) {
            var binding = new TextBinding(ast);
            options.fragment.insert(binding.dom, options.child);
            return binding;
        };
        ContentBinding.prototype.content = function (ast, children, options) {
            var binding = new ContentBinding(ast, function (dom) { return options.fragment.insert(dom, options.child); }, children);
            return binding;
        };
        ContentBinding.prototype.tag = function (tagName, ns, attrs, events, children, options) {
            var tag = new TagBinding(tagName, ns);
            for (var i = 0; i < attrs.length; i++) {
                tag.attr(attrs[i].name, attrs[i].tpl);
            }
            for (var e = 0; e < children.length; e++) {
                tag.child(children[e]);
            }
            options.fragment.insert(tag.dom, options.child);
            return tag;
        };
        return ContentBinding;
    }(reactive_1.Reactive.Binding));
    Dom.ContentBinding = ContentBinding;
    var ContentFragment = (function () {
        function ContentFragment(owner, context, offset) {
            this.owner = owner;
            this.context = context;
            this.offset = offset;
            this.bindings = [];
            for (var e = 0; e < owner.children.length; e++) {
                this.bindings[e] =
                    owner.children[e].accept(owner, { fragment: this, child: e }).update(context);
            }
        }
        ContentFragment.prototype.insert = function (dom, index) {
            this.owner.parentInsert(dom, this.offset + index);
        };
        return ContentFragment;
    }());
    var TextBinding = (function (_super) {
        __extends(TextBinding, _super);
        function TextBinding(parts) {
            var _this = _super.call(this) || this;
            _this.parts = parts;
            _this.dom = document.createTextNode("");
            return _this;
        }
        TextBinding.prototype.render = function (context) {
            var result = this.evaluate(this.parts, context);
            if (result === undefined) {
                this.dom.detach();
            }
            else {
                var newValue = result && result.valueOf();
                if (!!newValue && !!newValue.onNext) {
                    newValue.subscribe(this);
                }
                else {
                    this.onNext(newValue);
                }
            }
        };
        TextBinding.prototype.onNext = function (newValue) {
            this.dom.textContent = newValue;
        };
        TextBinding.prototype.evaluate = function (parts, context) {
            var _this = this;
            if (this.parts.length === 0)
                return "";
            if (this.parts.length === 1)
                return this.evaluatePart(this.parts[0], context);
            return this.parts.map(function (p) { return _this.evaluatePart(p, context); }).join("");
        };
        TextBinding.prototype.evaluatePart = function (part, context) {
            if (typeof part === "string")
                return part;
            else {
                return fsharp_1.accept(part, this, context);
            }
        };
        return TextBinding;
    }(reactive_1.Reactive.Binding));
    Dom.TextBinding = TextBinding;
    var TagBinding = (function (_super) {
        __extends(TagBinding, _super);
        function TagBinding(tagName, ns) {
            if (ns === void 0) { ns = null; }
            var _this = _super.call(this) || this;
            _this.ns = ns;
            _this.attributeBindings = [];
            _this.childBindings = [];
            _this.events = {};
            _this.appendChild = function (dom) { return _this.dom.appendChild(dom); };
            _this.classBinding = new ClassBinding(_this);
            if (ns === null)
                _this.dom = document.createElement(tagName);
            else {
                _this.dom = document.createElementNS(ns, tagName.toLowerCase());
            }
            _this.dom.attributes["__binding"] = _this;
            return _this;
        }
        TagBinding.prototype.attr = function (name, ast) {
            if (name === "class") {
                this.classBinding.setBaseClass(ast);
            }
            else if (name.startsWith("class.")) {
                this.classBinding.addClass(name.substr(6), ast);
            }
            else {
                var attrBinding = new AttributeBinding(this, name, ast);
                this.attributeBindings.push(attrBinding);
            }
            return this;
        };
        TagBinding.prototype.child = function (child) {
            if (!!this.context)
                child.update(this.context);
            this.childBindings.push(child);
            return this;
        };
        TagBinding.prototype.on = function (name, ast) {
            this.events[name] = ast;
            return this;
        };
        TagBinding.prototype.text = function (ast) {
            var binding = new TextBinding(ast);
            this.appendChild(binding.dom);
            return binding;
        };
        TagBinding.prototype.content = function (ast, children) {
            var binding = new ContentBinding(ast, this.appendChild, children);
            return binding;
        };
        TagBinding.prototype.update = function (context) {
            _super.prototype.update.call(this, context);
            this.classBinding.update(context);
            for (var i = 0; i < this.childBindings.length; i++) {
                this.childBindings[i].update(context);
            }
            for (var e = 0; e < this.attributeBindings.length; e++) {
                this.attributeBindings[e].update(context);
            }
            return this;
        };
        TagBinding.prototype.render = function (context) {
            return this.dom;
        };
        TagBinding.prototype.trigger = function (name) {
            var handler = this.events[name];
            if (!!handler) {
                var result = fsharp_1.accept(handler, this, this.context);
                if (typeof result === "function")
                    result();
            }
        };
        return TagBinding;
    }(reactive_1.Reactive.Binding));
    Dom.TagBinding = TagBinding;
    var ClassBinding = (function (_super) {
        __extends(ClassBinding, _super);
        function ClassBinding(parent) {
            var _this = _super.call(this) || this;
            _this.parent = parent;
            _this.conditions = [];
            return _this;
        }
        ClassBinding.prototype.setBaseClass = function (tpl) {
            this.baseClassTpl = tpl;
        };
        ClassBinding.prototype.addClass = function (className, condition) {
            this.conditions.push({ className: className, condition: condition });
        };
        ClassBinding.prototype.render = function (context) {
            this.context = context;
            var classes = [];
            if (!!this.baseClassTpl) {
                var value = fsharp_1.accept(this.baseClassTpl, this, context).valueOf();
                classes.push(value);
            }
            for (var i = 0; i < this.conditions.length; i++) {
                var _a = this.conditions[i], className = _a.className, condition = _a.condition;
                if (!!fsharp_1.accept(condition, this, context).valueOf()) {
                    classes.push(className);
                }
            }
            this.setAttribute("class", classes.length > 0 ? join(" ", classes) : null);
        };
        ClassBinding.prototype.setAttribute = function (attrName, newValue) {
            var oldValue = this.oldValue;
            var tag = this.parent.dom;
            if (typeof newValue === "undefined" || newValue === null) {
                tag[attrName] = void 0;
                tag.removeAttribute(attrName);
            }
            else {
                if (typeof oldValue === "undefined") {
                    var attr = document.createAttribute(attrName);
                    attr.value = newValue;
                    tag.setAttributeNode(attr);
                }
                else {
                    tag.className = newValue;
                }
            }
            this.oldValue = newValue;
        };
        return ClassBinding;
    }(reactive_1.Reactive.Binding));
    Dom.ClassBinding = ClassBinding;
    var AttributeBinding = (function (_super) {
        __extends(AttributeBinding, _super);
        function AttributeBinding(parent, name, tpl) {
            var _this = _super.call(this) || this;
            _this.parent = parent;
            _this.name = name;
            _this.tpl = tpl;
            return _this;
        }
        AttributeBinding.prototype.render = function (context) {
            this.context = context;
            var value = fsharp_1.accept(this.tpl, this, context);
            if (!!value && !!value.onNext) {
                value.subscribe(this);
            }
            else {
                this.onNext(value);
            }
        };
        AttributeBinding.prototype.onNext = function (value) {
            if (value !== null && value !== void 0 && !!value.valueOf)
                value = value.valueOf();
            var newValue;
            if (this.name === "checked") {
                newValue = !!value ? "checked" : null;
            }
            else {
                newValue = value;
            }
            var oldValue = this.oldValue;
            var attrName = this.name;
            var tag = this.parent.dom;
            if (typeof newValue === "undefined" || newValue === null) {
                tag[attrName] = void 0;
                tag.removeAttribute(attrName);
            }
            else {
                if (typeof oldValue === "undefined") {
                    var attr = document.createAttribute(attrName);
                    attr.value = newValue;
                    tag.setAttributeNode(attr);
                }
                else {
                    tag[attrName] = newValue;
                    tag.setAttribute(attrName, newValue);
                }
            }
            this.oldValue = newValue;
        };
        return AttributeBinding;
    }(reactive_1.Reactive.Binding));
    Dom.AttributeBinding = AttributeBinding;
})(Dom = exports.Dom || (exports.Dom = {}));
function join(separator, value) {
    if (Array.isArray(value)) {
        return value.length > 0 ? value.sort().join(separator) : null;
    }
    return value;
}
exports.join = join;
//# sourceMappingURL=data:application/json;base64,