"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var template_1 = require("./template");
exports.Template = template_1.Template;
var dom_1 = require("./dom");
var fsharp_1 = require("./fsharp");
exports.fs = fsharp_1.fs;
var reactive_1 = require("./reactive");
exports.Reactive = reactive_1.Reactive;
var Xania = (function () {
    function Xania() {
    }
    Xania.templates = function (elements) {
        var result = [];
        for (var i = 0; i < elements.length; i++) {
            var child = elements[i];
            if (child.bind)
                result.push(child);
            else {
                result.push(new template_1.Template.TextTemplate(child));
            }
        }
        return result;
    };
    Xania.tag = function (element, attrs) {
        var children = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            children[_i - 2] = arguments[_i];
        }
        var childTemplates = this.templates(children);
        if (element instanceof template_1.Template.TagTemplate) {
            return element;
        }
        else if (typeof element === "string") {
            var ns = Xania.svgElements.indexOf(element) >= 0 ? "http://www.w3.org/2000/svg" : null;
            var tag = new template_1.Template.TagTemplate(element, ns, childTemplates);
            if (attrs) {
                for (var prop in attrs) {
                    if (attrs.hasOwnProperty(prop)) {
                        var attrValue = attrs[prop];
                        if (prop === "className" || prop === "classname" || prop === "clazz")
                            tag.attr("class", attrValue);
                        else
                            tag.attr(prop, attrValue);
                    }
                }
                if (typeof attrs.name === "string") {
                    if (attrs.type === "text") {
                        if (!attrs.value) {
                            tag.attr("value", fsharp_1.fs(attrs.name));
                        }
                    }
                }
            }
            return tag;
        }
        else if (typeof element === "function") {
            if (element.prototype.bind) {
                return Reflect.construct(element, [attrs, childTemplates]);
            }
            else if (element.prototype.view) {
                return new ComponentBinding(Reflect.construct(element, [attrs, childTemplates]), attrs);
            }
            else {
                var view = element(attrs, childTemplates);
                if (!view)
                    throw new Error("Failed to load view");
                return view;
            }
        }
        else if (typeof element.render === "function") {
            var tpl = element.render();
            return View.partial(tpl, new reactive_1.Reactive.Store(element));
        }
        else {
            throw Error("tag unresolved");
        }
    };
    Xania.view = function (tpl, dispatcher) {
        return dom_1.Dom.view(tpl, dispatcher);
    };
    return Xania;
}());
Xania.svgElements = ["svg", "circle", "line", "g"];
exports.Xania = Xania;
function ForEach(attr, children) {
    var tpl = new template_1.Template.FragmentTemplate(attr.expr || null);
    for (var i = 0; i < children.length; i++) {
        tpl.child(children[i]);
    }
    return tpl;
}
exports.ForEach = ForEach;
var View;
(function (View) {
    function partial(view, model) {
        return {
            bind: function () {
                var binding = new PartialBinding(view, model);
                if (view.subscribe)
                    view.subscribe(binding);
                if (model.subscribe)
                    model.subscribe(binding);
                return binding;
            }
        };
    }
    View.partial = partial;
})(View = exports.View || (exports.View = {}));
var ComponentBinding = (function (_super) {
    __extends(ComponentBinding, _super);
    function ComponentBinding(component, props) {
        var _this = _super.call(this) || this;
        _this.component = component;
        _this.props = props;
        _this.store = new reactive_1.Reactive.Store(_this.component);
        _this.binding = new dom_1.Dom.FragmentBinding(null, [component.view(Xania)]);
        return _this;
    }
    ComponentBinding.prototype.bind = function () {
        return this;
    };
    ComponentBinding.prototype.update = function (context, driver) {
        var props = this.props;
        for (var prop in props) {
            if (props.hasOwnProperty(prop)) {
                var expr = props[prop];
                var value = expr.execute(this, context).valueOf();
                this.component[prop] = value;
            }
        }
        this.binding.update(this.store, driver);
        _super.prototype.update.call(this, context, driver);
        return this;
    };
    ComponentBinding.prototype.render = function () {
    };
    ComponentBinding.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.binding.dispose();
    };
    return ComponentBinding;
}(reactive_1.Reactive.Binding));
var PartialBinding = (function (_super) {
    __extends(PartialBinding, _super);
    function PartialBinding(view, model) {
        var _this = _super.call(this) || this;
        _this.view = view;
        _this.model = model;
        _this.cache = [];
        return _this;
    }
    PartialBinding.prototype.render = function (context, parent) {
        var view = this.evaluate(this.view).valueOf();
        if (!view)
            throw new Error("view is empty");
        if (this.binding) {
            this.binding.dispose();
        }
        var newBinding = new dom_1.Dom.FragmentBinding(this.model, [view]);
        this.binding = newBinding;
        this.binding.update(context, parent);
    };
    PartialBinding.prototype.onNext = function (_) {
        this.execute();
    };
    return PartialBinding;
}(reactive_1.Reactive.Binding));
var Animate = (function () {
    function Animate(_, children) {
        this.children = children;
    }
    Animate.prototype.bind = function (visitor) {
        var bindings = this.children.map(function (x) { return x.bind(visitor); });
        return new AnimateBinding(bindings);
    };
    Animate.flipInY = function (elem, iterations) {
        var animationTimingFunction = elem.style['animation-timing-function'];
        var keyframes = [
            { transform: 'perspective(400px) rotate3d(0, 1, 0, 90deg)', opacity: '0', offset: 0 },
            { transform: 'perspective(400px) rotate3d(0, 1, 0, -20deg)', offset: 0.4 },
            { transform: 'perspective(400px) rotate3d(0, 1, 0, 10deg)', opacity: '1', offset: 0.6 },
            { transform: 'perspective(400px) rotate3d(0, 1, 0, -5deg)', opacity: '1', offset: 0.8 },
            { transform: 'perspective(400px)', opacity: '1', offset: 1 }
        ];
        var timing = { duration: 900, iterations: iterations, easing: 'ease-in' };
        return elem.animate(keyframes, timing);
    };
    Animate.flipOutY = function (elem, iterations) {
        var keyframes = [
            { height: '20px', transform: 'perspective(400px)', opacity: '1', offset: 0 },
            { height: '10px', transform: 'perspective(400px) rotate3d(0, 1, 0, -20deg)', opacity: '1', offset: 0.3 },
            { height: '0', transform: 'perspective(400px) rotate3d(0, 1, 0, 90deg)', opacity: '0', offset: 1 }
        ];
        var timing = { duration: 900, iterations: iterations };
        return elem.animate(keyframes, timing);
    };
    Animate.bounce = function (elem, iterations) {
        var keyframes = [
            { height: '0', transform: 'translate3d(0,0,0)', offset: 0 },
            { height: '10px', transform: 'translate3d(0,0,0)', offset: 0.2 },
            { height: '20px', transform: 'translate3d(0,-30px,0)', offset: 0.4 },
            { height: '30px', transform: 'translate3d(0,-30px,0)', offset: 0.43 },
            { height: '40px', transform: 'translate3d(0,0,0)', offset: 0.53 },
            { height: '50px', transform: 'translate3d(0,-15px,0)', offset: 0.7 },
            { height: '60px', transform: 'translate3d(0,0,0)', offset: 0.8 },
            { height: '90px', transform: 'translate3d(0,-15px,0)', offset: 0.9 },
            { height: '100px', transform: 'translate3d(0,0,0)', offset: 1 }
        ];
        var timing = { duration: 900, iterations: iterations, easing: 'cubic-bezier(0.215, 0.610, 0.355, 1.000)' };
        return elem.animate(keyframes, timing);
    };
    Animate.bounceIn = function (elem, iterations) {
        var keyframes = [
            { transform: 'scale3d(.3, .3, .3)', opacity: '0', offset: 0 },
            { transform: 'scale3d(1.1, 1.1, 1.1)', offset: 0.2 },
            { transform: 'scale3d(.9, .9, .9)', offset: 0.4 },
            { transform: 'scale3d(1.03, 1.03, 1.03)', opacity: '1', offset: 0.6 },
            { transform: 'scale3d(.97, .97, .97)', offset: 0.8 },
            { transform: 'scale3d(1, 1, 1)', opacity: '1', offset: 1 }
        ];
        var timing = { duration: 900, iterations: iterations, easing: 'cubic-bezier(0.215, 0.610, 0.355, 1.000)' };
        return elem.animate(keyframes, timing);
    };
    return Animate;
}());
exports.Animate = Animate;
var AnimateBinding = (function (_super) {
    __extends(AnimateBinding, _super);
    function AnimateBinding(bindings) {
        var _this = _super.call(this) || this;
        _this.bindings = bindings;
        _this.domElements = [];
        return _this;
    }
    Object.defineProperty(AnimateBinding.prototype, "length", {
        get: function () {
            var length = 0;
            for (var i = 0; i < this.bindings.length; i++) {
                length += this.bindings[i].length;
            }
            return length;
        },
        enumerable: true,
        configurable: true
    });
    AnimateBinding.prototype.update = function (context, driver) {
        _super.prototype.update.call(this, context, driver);
        for (var i = 0; i < this.bindings.length; i++) {
            this.bindings[i].update(context, this);
        }
        return this;
    };
    AnimateBinding.prototype.insert = function (binding, dom, idx) {
        this.driver.insert(this, dom, idx);
        Animate.bounce(dom, 1);
        this.domElements.push(dom);
    };
    AnimateBinding.prototype.render = function () {
    };
    AnimateBinding.prototype.dispose = function () {
        var bindings = this.bindings;
        this.bindings = [];
        var counter = this.domElements.length;
        for (var i = 0; i < this.domElements.length; i++) {
            var dom = this.domElements[i];
            var animation = Animate.flipOutY(dom, 1);
            animation.onfinish = function () {
                counter--;
                if (counter === 0) {
                    for (var e = 0; e < bindings.length; e++) {
                        bindings[e].dispose();
                    }
                }
            };
        }
    };
    return AnimateBinding;
}(reactive_1.Reactive.Binding));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieGFuaWEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMveGFuaWEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsdUNBQXFDO0FBOFFkLHVDQUFRO0FBN1EvQiw2QkFBMkI7QUFDM0IsbUNBQTZCO0FBNFFwQix5QkFBRTtBQTNRWCx1Q0FBcUM7QUEyUXhCLHVDQUFRO0FBelFyQjtJQUFBO0lBaUVBLENBQUM7SUFoRVUsZUFBUyxHQUFoQixVQUFpQixRQUFRO1FBQ3JCLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUNoQixHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUN2QyxJQUFJLEtBQUssR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFeEIsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztnQkFDWCxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxDQUFDO2dCQUNGLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxtQkFBUSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ2xELENBQUM7UUFDTCxDQUFDO1FBQ0QsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBR00sU0FBRyxHQUFWLFVBQVcsT0FBTyxFQUFFLEtBQUs7UUFBRSxrQkFBVzthQUFYLFVBQVcsRUFBWCxxQkFBVyxFQUFYLElBQVc7WUFBWCxpQ0FBVzs7UUFDbEMsSUFBSSxjQUFjLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUU5QyxFQUFFLENBQUMsQ0FBQyxPQUFPLFlBQVksbUJBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1lBQzFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7UUFDbkIsQ0FBQztR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QUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDekMsU0FBUyxDQUFDLFFBQVEsR0FBRztnQkFDakIsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsRUFBRSxDQUFDLENBQUMsT0FBTyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ2hCLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO3dCQUN2QyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7b0JBQzFCLENBQUM7Z0JBQ0wsQ0FBQztZQUNMLENBQUMsQ0FBQTtRQUNMLENBQUM7SUFDTCxDQUFDO0lBQ0wscUJBQUM7QUFBRCxDQUFDLEFBbERELENBQTZCLG1CQUFRLENBQUMsT0FBTyxHQWtENUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gXCIuL3RlbXBsYXRlXCJcclxuaW1wb3J0IHsgRG9tIH0gZnJvbSBcIi4vZG9tXCJcclxuaW1wb3J0IHsgZnMgfSBmcm9tIFwiLi9mc2hhcnBcIlxyXG5pbXBvcnQgeyBSZWFjdGl2ZSB9IGZyb20gXCIuL3JlYWN0aXZlXCJcclxuXHJcbmV4cG9ydCBjbGFzcyBYYW5pYSB7XHJcbiAgICBzdGF0aWMgdGVtcGxhdGVzKGVsZW1lbnRzKSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIGNoaWxkID0gZWxlbWVudHNbaV07XHJcblxyXG4gICAgICAgICAgICBpZiAoY2hpbGQuYmluZClcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGNoaWxkKTtcclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChuZXcgVGVtcGxhdGUuVGV4dFRlbXBsYXRlKGNoaWxkKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuICAgIHN0YXRpYyBzdmdFbGVtZW50cyA9IFtcInN2Z1wiLCBcImNpcmNsZVwiLCBcImxpbmVcIiwgXCJnXCJdO1xyXG5cclxuICAgIHN0YXRpYyB0YWcoZWxlbWVudCwgYXR0cnMsIC4uLmNoaWxkcmVuKTogVGVtcGxhdGUuSU5vZGUge1xyXG4gICAgICAgIHZhciBjaGlsZFRlbXBsYXRlcyA9IHRoaXMudGVtcGxhdGVzKGNoaWxkcmVuKTtcclxuXHJcbiAgICAgICAgaWYgKGVsZW1lbnQgaW5zdGFuY2VvZiBUZW1wbGF0ZS5UYWdUZW1wbGF0ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudDtcclxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbGVtZW50ID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHZhciBucyA9IFhhbmlhLnN2Z0VsZW1lbnRzLmluZGV4T2YoZWxlbWVudCkgPj0gMCA/IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiA6IG51bGw7XHJcbiAgICAgICAgICAgIHZhciB0YWcgPSBuZXcgVGVtcGxhdGUuVGFnVGVtcGxhdGUoZWxlbWVudCwgbnMsIGNoaWxkVGVtcGxhdGVzKTtcclxuICAgICAgICAgICAgaWYgKGF0dHJzKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIGF0dHJzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHJzLmhhc093blByb3BlcnR5KHByb3ApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdHRyVmFsdWUgPSBhdHRyc1twcm9wXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb3AgPT09IFwiY2xhc3NOYW1lXCIgfHwgcHJvcCA9PT0gXCJjbGFzc25hbWVcIiB8fCBwcm9wID09PSBcImNsYXp6XCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWcuYXR0cihcImNsYXNzXCIsIGF0dHJWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhZy5hdHRyKHByb3AsIGF0dHJWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhdHRycy5uYW1lID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHJzLnR5cGUgPT09IFwidGV4dFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYXR0cnMudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhZy5hdHRyKFwidmFsdWVcIiwgZnMoYXR0cnMubmFtZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGFnO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGVsZW1lbnQgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICBpZiAoZWxlbWVudC5wcm90b3R5cGUuYmluZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3QuY29uc3RydWN0KGVsZW1lbnQsIFthdHRycywgY2hpbGRUZW1wbGF0ZXNdKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50LnByb3RvdHlwZS52aWV3KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbXBvbmVudEJpbmRpbmcoUmVmbGVjdC5jb25zdHJ1Y3QoZWxlbWVudCwgW2F0dHJzLCBjaGlsZFRlbXBsYXRlc10pLCBhdHRycyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmlldyA9IGVsZW1lbnQoYXR0cnMsIGNoaWxkVGVtcGxhdGVzKTtcclxuICAgICAgICAgICAgICAgIGlmICghdmlldylcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gbG9hZCB2aWV3XCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpZXc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbGVtZW50LnJlbmRlciA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgIHZhciB0cGwgPSBlbGVtZW50LnJlbmRlcigpO1xyXG4gICAgICAgICAgICByZXR1cm4gVmlldy5wYXJ0aWFsKHRwbCwgbmV3IFJlYWN0aXZlLlN0b3JlKGVsZW1lbnQpKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcInRhZyB1bnJlc29sdmVkXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHN0YXRpYyB2aWV3KHRwbDogVGVtcGxhdGUuSU5vZGUsIGRpc3BhdGNoZXI/KSB7XHJcbiAgICAgICAgcmV0dXJuIERvbS52aWV3KHRwbCwgZGlzcGF0Y2hlcik7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBGb3JFYWNoKGF0dHIsIGNoaWxkcmVuKSB7XHJcbiAgICB2YXIgdHBsID0gbmV3IFRlbXBsYXRlLkZyYWdtZW50VGVtcGxhdGUoYXR0ci5leHByIHx8IG51bGwpO1xyXG5cclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB0cGwuY2hpbGQoY2hpbGRyZW5baV0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0cGw7XHJcbn1cclxuXHJcbmV4cG9ydCBtb2R1bGUgVmlldyB7XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gcGFydGlhbCh2aWV3LCBtb2RlbCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGJpbmQoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYmluZGluZyA9IG5ldyBQYXJ0aWFsQmluZGluZyh2aWV3LCBtb2RlbCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodmlldy5zdWJzY3JpYmUpIHZpZXcuc3Vic2NyaWJlKGJpbmRpbmcpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG1vZGVsLnN1YnNjcmliZSkgbW9kZWwuc3Vic2NyaWJlKGJpbmRpbmcpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJpbmRpbmc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIENvbXBvbmVudEJpbmRpbmcgZXh0ZW5kcyBSZWFjdGl2ZS5CaW5kaW5nIHtcclxuICAgIHByaXZhdGUgYmluZGluZzogRG9tLkZyYWdtZW50QmluZGluZztcclxuICAgIHByaXZhdGUgc3RvcmUgPSBuZXcgUmVhY3RpdmUuU3RvcmUodGhpcy5jb21wb25lbnQpO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgY29tcG9uZW50LCBwcml2YXRlIHByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLmJpbmRpbmcgPSBuZXcgRG9tLkZyYWdtZW50QmluZGluZyhudWxsLCBbY29tcG9uZW50LnZpZXcoWGFuaWEpXSk7XHJcbiAgICB9XHJcblxyXG4gICAgYmluZCgpOiB0aGlzIHtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoY29udGV4dCwgZHJpdmVyKTogdGhpcyB7XHJcbiAgICAgICAgbGV0IHByb3BzID0gdGhpcy5wcm9wcztcclxuICAgICAgICBmb3IgKGxldCBwcm9wIGluIHByb3BzKSB7XHJcbiAgICAgICAgICAgIGlmIChwcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGV4cHIgPSBwcm9wc1twcm9wXTtcclxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGV4cHIuZXhlY3V0ZSh0aGlzLCBjb250ZXh0KS52YWx1ZU9mKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbXBvbmVudFtwcm9wXSA9IHZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYmluZGluZy51cGRhdGUodGhpcy5zdG9yZSwgZHJpdmVyKTtcclxuICAgICAgICBzdXBlci51cGRhdGUoY29udGV4dCwgZHJpdmVyKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICB9XHJcblxyXG4gICAgZGlzcG9zZSgpIHtcclxuICAgICAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgICAgICAgdGhpcy5iaW5kaW5nLmRpc3Bvc2UoKTtcclxuICAgIH1cclxuXHJcbn1cclxuXHJcbmNsYXNzIFBhcnRpYWxCaW5kaW5nIGV4dGVuZHMgUmVhY3RpdmUuQmluZGluZyB7XHJcbiAgICBwcml2YXRlIGJpbmRpbmc7XHJcbiAgICBwcml2YXRlIGNhY2hlID0gW107XHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHZpZXcsIHByaXZhdGUgbW9kZWwpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcihjb250ZXh0LCBwYXJlbnQpIHtcclxuICAgICAgICB2YXIgdmlldyA9IHRoaXMuZXZhbHVhdGUodGhpcy52aWV3KS52YWx1ZU9mKCk7XHJcblxyXG4gICAgICAgIGlmICghdmlldylcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidmlldyBpcyBlbXB0eVwiKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuYmluZGluZykge1xyXG4gICAgICAgICAgICB0aGlzLmJpbmRpbmcuZGlzcG9zZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIG5ld0JpbmRpbmcgPSBuZXcgRG9tLkZyYWdtZW50QmluZGluZyh0aGlzLm1vZGVsLCBbdmlld10pO1xyXG5cclxuICAgICAgICB0aGlzLmJpbmRpbmcgPSBuZXdCaW5kaW5nO1xyXG4gICAgICAgIHRoaXMuYmluZGluZy51cGRhdGUoY29udGV4dCwgcGFyZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBvbk5leHQoXykge1xyXG4gICAgICAgIHRoaXMuZXhlY3V0ZSgpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQW5pbWF0ZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihfLCBwcml2YXRlIGNoaWxkcmVuOiBUZW1wbGF0ZS5JTm9kZVtdKSB7XHJcbiAgICB9XHJcblxyXG4gICAgYmluZCh2aXNpdG9yKSB7XHJcbiAgICAgICAgdmFyIGJpbmRpbmdzID0gdGhpcy5jaGlsZHJlbi5tYXAoeCA9PiB4LmJpbmQodmlzaXRvcikpO1xyXG4gICAgICAgIHJldHVybiBuZXcgQW5pbWF0ZUJpbmRpbmcoYmluZGluZ3MpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBzdGF0aWMgZmxpcEluWShlbGVtLCBpdGVyYXRpb25zKSB7XHJcbiAgICAgICAgdmFyIGFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uID0gZWxlbS5zdHlsZVsnYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbiddO1xyXG4gICAgICAgIHZhciBrZXlmcmFtZXMgPSBbXHJcbiAgICAgICAgICAgIHsgdHJhbnNmb3JtOiAncGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZTNkKDAsIDEsIDAsIDkwZGVnKScsIG9wYWNpdHk6ICcwJywgb2Zmc2V0OiAwIH0sXHJcbiAgICAgICAgICAgIHsgdHJhbnNmb3JtOiAncGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZTNkKDAsIDEsIDAsIC0yMGRlZyknLCBvZmZzZXQ6IDAuNCB9LFxyXG4gICAgICAgICAgICB7IHRyYW5zZm9ybTogJ3BlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGUzZCgwLCAxLCAwLCAxMGRlZyknLCBvcGFjaXR5OiAnMScsIG9mZnNldDogMC42IH0sXHJcbiAgICAgICAgICAgIHsgdHJhbnNmb3JtOiAncGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZTNkKDAsIDEsIDAsIC01ZGVnKScsIG9wYWNpdHk6ICcxJywgb2Zmc2V0OiAwLjggfSxcclxuICAgICAgICAgICAgeyB0cmFuc2Zvcm06ICdwZXJzcGVjdGl2ZSg0MDBweCknLCBvcGFjaXR5OiAnMScsIG9mZnNldDogMSB9XTtcclxuICAgICAgICB2YXIgdGltaW5nID0geyBkdXJhdGlvbjogOTAwLCBpdGVyYXRpb25zOiBpdGVyYXRpb25zLCBlYXNpbmc6ICdlYXNlLWluJyB9O1xyXG4gICAgICAgIHJldHVybiBlbGVtLmFuaW1hdGUoa2V5ZnJhbWVzLCB0aW1pbmcpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBmbGlwT3V0WShlbGVtLCBpdGVyYXRpb25zKSB7XHJcbiAgICAgICAgdmFyIGtleWZyYW1lcyA9IFtcclxuICAgICAgICAgICAgeyBoZWlnaHQ6ICcyMHB4JywgdHJhbnNmb3JtOiAncGVyc3BlY3RpdmUoNDAwcHgpJywgb3BhY2l0eTogJzEnLCBvZmZzZXQ6IDAgfSxcclxuICAgICAgICAgICAgeyBoZWlnaHQ6ICcxMHB4JywgdHJhbnNmb3JtOiAncGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZTNkKDAsIDEsIDAsIC0yMGRlZyknLCBvcGFjaXR5OiAnMScsIG9mZnNldDogMC4zIH0sXHJcbiAgICAgICAgICAgIHsgaGVpZ2h0OiAnMCcsIHRyYW5zZm9ybTogJ3BlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGUzZCgwLCAxLCAwLCA5MGRlZyknLCBvcGFjaXR5OiAnMCcsIG9mZnNldDogMSB9XTtcclxuICAgICAgICB2YXIgdGltaW5nID0geyBkdXJhdGlvbjogOTAwLCBpdGVyYXRpb25zOiBpdGVyYXRpb25zIH07XHJcbiAgICAgICAgcmV0dXJuIGVsZW0uYW5pbWF0ZShrZXlmcmFtZXMsIHRpbWluZyk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGJvdW5jZShlbGVtLCBpdGVyYXRpb25zKSB7XHJcbiAgICAgICAgdmFyIGtleWZyYW1lcyA9IFtcclxuICAgICAgICAgICAgeyBoZWlnaHQ6ICcwJywgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMCwwLDApJywgb2Zmc2V0OiAwIH0sXHJcbiAgICAgICAgICAgIHsgaGVpZ2h0OiAnMTBweCcsIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKDAsMCwwKScsIG9mZnNldDogMC4yIH0sXHJcbiAgICAgICAgICAgIHsgaGVpZ2h0OiAnMjBweCcsIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKDAsLTMwcHgsMCknLCBvZmZzZXQ6IDAuNCB9LFxyXG4gICAgICAgICAgICB7IGhlaWdodDogJzMwcHgnLCB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgwLC0zMHB4LDApJywgb2Zmc2V0OiAwLjQzIH0sXHJcbiAgICAgICAgICAgIHsgaGVpZ2h0OiAnNDBweCcsIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKDAsMCwwKScsIG9mZnNldDogMC41MyB9LFxyXG4gICAgICAgICAgICB7IGhlaWdodDogJzUwcHgnLCB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgwLC0xNXB4LDApJywgb2Zmc2V0OiAwLjcgfSxcclxuICAgICAgICAgICAgeyBoZWlnaHQ6ICc2MHB4JywgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMCwwLDApJywgb2Zmc2V0OiAwLjggfSxcclxuICAgICAgICAgICAgeyBoZWlnaHQ6ICc5MHB4JywgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMCwtMTVweCwwKScsIG9mZnNldDogMC45IH0sXHJcbiAgICAgICAgICAgIHsgaGVpZ2h0OiAnMTAwcHgnLCB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgwLDAsMCknLCBvZmZzZXQ6IDEgfV07XHJcbiAgICAgICAgdmFyIHRpbWluZyA9IHsgZHVyYXRpb246IDkwMCwgaXRlcmF0aW9uczogaXRlcmF0aW9ucywgZWFzaW5nOiAnY3ViaWMtYmV6aWVyKDAuMjE1LCAwLjYxMCwgMC4zNTUsIDEuMDAwKScgfTtcclxuICAgICAgICByZXR1cm4gZWxlbS5hbmltYXRlKGtleWZyYW1lcywgdGltaW5nKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgYm91bmNlSW4oZWxlbSwgaXRlcmF0aW9ucykge1xyXG4gICAgICAgIHZhciBrZXlmcmFtZXMgPSBbXHJcbiAgICAgICAgICAgIHsgdHJhbnNmb3JtOiAnc2NhbGUzZCguMywgLjMsIC4zKScsIG9wYWNpdHk6ICcwJywgb2Zmc2V0OiAwIH0sXHJcbiAgICAgICAgICAgIHsgdHJhbnNmb3JtOiAnc2NhbGUzZCgxLjEsIDEuMSwgMS4xKScsIG9mZnNldDogMC4yIH0sXHJcbiAgICAgICAgICAgIHsgdHJhbnNmb3JtOiAnc2NhbGUzZCguOSwgLjksIC45KScsIG9mZnNldDogMC40IH0sXHJcbiAgICAgICAgICAgIHsgdHJhbnNmb3JtOiAnc2NhbGUzZCgxLjAzLCAxLjAzLCAxLjAzKScsIG9wYWNpdHk6ICcxJywgb2Zmc2V0OiAwLjYgfSxcclxuICAgICAgICAgICAgeyB0cmFuc2Zvcm06ICdzY2FsZTNkKC45NywgLjk3LCAuOTcpJywgb2Zmc2V0OiAwLjggfSxcclxuICAgICAgICAgICAgeyB0cmFuc2Zvcm06ICdzY2FsZTNkKDEsIDEsIDEpJywgb3BhY2l0eTogJzEnLCBvZmZzZXQ6IDEgfV07XHJcbiAgICAgICAgdmFyIHRpbWluZyA9IHsgZHVyYXRpb246IDkwMCwgaXRlcmF0aW9uczogaXRlcmF0aW9ucywgZWFzaW5nOiAnY3ViaWMtYmV6aWVyKDAuMjE1LCAwLjYxMCwgMC4zNTUsIDEuMDAwKScgfTtcclxuICAgICAgICByZXR1cm4gZWxlbS5hbmltYXRlKGtleWZyYW1lcywgdGltaW5nKTtcclxuICAgIH1cclxufVxyXG5jbGFzcyBBbmltYXRlQmluZGluZyBleHRlbmRzIFJlYWN0aXZlLkJpbmRpbmcge1xyXG5cclxuICAgIGRvbUVsZW1lbnRzID0gW107XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBiaW5kaW5nczogYW55W10pIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBsZW5ndGgoKSB7XHJcbiAgICAgICAgdmFyIGxlbmd0aCA9IDA7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmJpbmRpbmdzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxlbmd0aCArPSB0aGlzLmJpbmRpbmdzW2ldLmxlbmd0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGxlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoY29udGV4dCwgZHJpdmVyKSB7XHJcbiAgICAgICAgc3VwZXIudXBkYXRlKGNvbnRleHQsIGRyaXZlcik7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmJpbmRpbmdzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYmluZGluZ3NbaV0udXBkYXRlKGNvbnRleHQsIHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBpbnNlcnQoYmluZGluZywgZG9tLCBpZHgpIHtcclxuICAgICAgICB0aGlzLmRyaXZlci5pbnNlcnQodGhpcywgZG9tLCBpZHgpO1xyXG4gICAgICAgIEFuaW1hdGUuYm91bmNlKGRvbSwgMSk7XHJcbiAgICAgICAgdGhpcy5kb21FbGVtZW50cy5wdXNoKGRvbSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgfVxyXG5cclxuICAgIGRpc3Bvc2UoKSB7XHJcbiAgICAgICAgdmFyIGJpbmRpbmdzID0gdGhpcy5iaW5kaW5ncztcclxuICAgICAgICB0aGlzLmJpbmRpbmdzID0gW107XHJcbiAgICAgICAgdmFyIGNvdW50ZXIgPSB0aGlzLmRvbUVsZW1lbnRzLmxlbmd0aDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZG9tRWxlbWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIGRvbSA9IHRoaXMuZG9tRWxlbWVudHNbaV07XHJcbiAgICAgICAgICAgIHZhciBhbmltYXRpb24gPSBBbmltYXRlLmZsaXBPdXRZKGRvbSwgMSk7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi5vbmZpbmlzaCA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvdW50ZXItLTtcclxuICAgICAgICAgICAgICAgIGlmIChjb3VudGVyID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgZSA9IDA7IGUgPCBiaW5kaW5ncy5sZW5ndGg7IGUrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBiaW5kaW5nc1tlXS5kaXNwb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBmcywgUmVhY3RpdmUsIFRlbXBsYXRlIH1cclxuIl19