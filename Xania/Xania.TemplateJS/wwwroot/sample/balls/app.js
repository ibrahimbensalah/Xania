"use strict";
var xania_1 = require("../../src/xania");
var anim_1 = require("../../src/anim");
require("./app.css");
var BallsApp = (function () {
    function BallsApp() {
        var _this = this;
        this.balls = [];
        this.onShuffle = function () {
            for (var i = 0; i < _this.balls.length; i++) {
                var e = Math.floor(Math.random() * _this.balls.length);
                if (e !== i) {
                    var t = _this.balls[i].idx;
                    _this.balls[i].idx = _this.balls[e].idx;
                    _this.balls[e].idx = t;
                }
            }
        };
        for (var i = 0; i < 16; i++) {
            var rgb = [100, 100, 100]
                .map(function (x) { return x + Math.random() * 150; })
                .map(Math.floor);
            this.balls.push(new Ball(i, "rgb(" + rgb.join(", ") + ")"));
        }
    }
    BallsApp.translate3d = function (idx, pressed) {
        var x = (idx % 4) * 70;
        var y = Math.floor(idx / 4) * 70;
        var s = pressed ? 1.2 : 1;
        return "translate3d(" + x + "px, " + y + "px, 0px) scale(" + s + ")";
    };
    BallsApp.initial = function (ball) {
        return this.translate3d(ball.idx, ball.pressed);
    };
    BallsApp.prototype.drag = function (event, ball, state) {
        var offsetX = event.offsetX, offsetY = event.offsetY;
        var node = event.target;
        var marginLeft, marginTop, dLeft, dTop, ballIdx;
        if (state && node.style.marginTop !== 0 && node.style.marginLeft !== 0) {
            marginLeft = state.marginLeft;
            marginTop = state.marginTop;
            dLeft = state.dLeft;
            dTop = state.dTop;
            ballIdx = state.ballIdx;
        }
        else {
            dLeft = offsetX - 25;
            dTop = offsetY - 25;
            marginLeft = 0;
            marginTop = 0;
            ballIdx = ball.idx;
        }
        marginLeft += offsetX - 25 - dLeft;
        marginTop += offsetY - 25 - dTop;
        node.style.marginLeft = marginLeft + "px";
        node.style.marginTop = marginTop + "px";
        node.style.zIndex = 100;
        var x = marginLeft + (ball.idx % 4) * 70;
        var y = marginTop + Math.floor(ball.idx / 4) * 70;
        var col = Math.max(0, Math.min(3, Math.round(x / 70)));
        var row = Math.max(0, Math.min(3, Math.round(y / 70)));
        var newBallIdx = col + row * 4;
        if (ballIdx !== newBallIdx) {
            for (var i = 0; i < this.balls.length; i++) {
                var b = this.balls[i];
                if (ball !== b && b.idx === newBallIdx)
                    b.idx = ballIdx;
            }
            ballIdx = newBallIdx;
        }
        return { marginTop: marginTop, marginLeft: marginLeft, dLeft: dLeft, dTop: dTop, ballIdx: ballIdx };
    };
    BallsApp.prototype.release = function (event, ball) {
        if (ball.pressed) {
            ball.pressed = false;
        }
        var node = event.target;
        var top = node.style.marginTop;
        var left = node.style.marginLeft;
        node.style.marginTop = 0;
        node.style.marginLeft = 0;
        node.style.zIndex = 10;
        for (var i = 0; i < this.balls.length; i++) {
            if (!this.balls.find(function (b) { return b.idx === i; })) {
                var x = (ball.idx % 4) * 70;
                var y = Math.floor(ball.idx / 4) * 70;
                var transform = "translate3d(" + left + ", " + top + ", 0) translate3d(" + x + "px, " + y + "px, 0px) scale(1.2)";
                node.style.transform = transform;
                ball.idx = i;
                break;
            }
        }
    };
    BallsApp.prototype.view = function (xania) {
        return (xania.tag("div", { className: "balls-outer" },
            xania.tag("div", null,
                xania.tag("button", { onClick: this.onShuffle }, "shuffle")),
            xania.tag("div", { className: "demo2" },
                xania.tag(xania_1.Repeat, { source: xania_1.expr("for ball in balls") },
                    xania.tag(anim_1.Animate, { transform: xania_1.expr("translate3d ball.idx ball.pressed") },
                        xania.tag("div", { className: "demo2-ball", onMouseDown: xania_1.expr("ball.press()"), onMouseMove: xania_1.expr("ball.pressed -> drag event ball state"), onMouseUp: xania_1.expr("release event ball"), onMouseOut: xania_1.expr("release event ball"), style: [
                                "background-color: ", xania_1.expr("ball.backColor"),
                                "; transform: ",
                                xania_1.expr("initial ball"),
                                "; z-index: 10; box-shadow: rgba(0, 0, 0, 0.498039) -0.666667px 5px 5px;"
                            ] }))))));
    };
    return BallsApp;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = BallsApp;
var Ball = (function () {
    function Ball(idx, backColor) {
        this.idx = idx;
        this.backColor = backColor;
        this.pressed = false;
    }
    Ball.prototype.press = function () {
        this.pressed = true;
    };
    return Ball;
}());
//# sourceMappingURL=data:application/json;base64,