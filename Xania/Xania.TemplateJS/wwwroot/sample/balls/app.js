"use strict";
var xania_1 = require("../../src/xania");
var anim_1 = require("../../src/anim");
var BallsApp = (function () {
    function BallsApp() {
        var _this = this;
        this.balls = [];
        this.onShuffle = function () {
            for (var i = 0; i < _this.balls.length; i++) {
                var e = Math.floor(Math.random() * _this.balls.length);
                if (e !== i) {
                    var t = _this.balls[i].idx;
                    _this.balls[i].idx = _this.balls[e].idx;
                    _this.balls[e].idx = t;
                }
            }
        };
        for (var i = 0; i < 16; i++) {
            var rgb = [100, 100, 100]
                .map(function (x) { return x + Math.random() * 150; })
                .map(Math.floor);
            this.balls.push(new Ball(i, "rgb(" + rgb.join(", ") + ")"));
        }
    }
    BallsApp.translate3d = function (idx, pressed) {
        var x = (idx % 4) * 70;
        var y = Math.floor(idx / 4) * 70;
        var s = pressed ? 1.2 : 1;
        return "translate3d(" + x + "px, " + y + "px, 0px) scale(" + s + ")";
    };
    BallsApp.initial = function (ball) {
        return this.translate3d(ball.idx, ball.pressed);
    };
    BallsApp.prototype.drag = function (event, ball, state) {
        var offsetX = event.offsetX, offsetY = event.offsetY;
        var node = event.target;
        var marginLeft, marginTop, dLeft, dTop, ballIdx;
        if (state && node.style.marginTop !== 0 && node.style.marginLeft !== 0) {
            marginLeft = state.marginLeft;
            marginTop = state.marginTop;
            dLeft = state.dLeft;
            dTop = state.dTop;
            ballIdx = state.ballIdx;
        }
        else {
            dLeft = offsetX - 25;
            dTop = offsetY - 25;
            marginLeft = 0;
            marginTop = 0;
            ballIdx = ball.idx;
        }
        marginLeft += offsetX - 25 - dLeft;
        marginTop += offsetY - 25 - dTop;
        node.style.marginLeft = marginLeft + "px";
        node.style.marginTop = marginTop + "px";
        node.style.zIndex = 100;
        var x = marginLeft + (ball.idx % 4) * 70;
        var y = marginTop + Math.floor(ball.idx / 4) * 70;
        var col = Math.max(0, Math.min(3, Math.round(x / 70)));
        var row = Math.max(0, Math.min(3, Math.round(y / 70)));
        var newBallIdx = col + row * 4;
        if (ballIdx !== newBallIdx) {
            for (var i = 0; i < this.balls.length; i++) {
                var b = this.balls[i];
                if (ball !== b && b.idx === newBallIdx)
                    b.idx = ballIdx;
            }
            ballIdx = newBallIdx;
        }
        return { marginTop: marginTop, marginLeft: marginLeft, dLeft: dLeft, dTop: dTop, ballIdx: ballIdx };
    };
    BallsApp.prototype.release = function (event, ball) {
        if (ball.pressed) {
            ball.pressed = false;
        }
        var node = event.target;
        var top = node.style.marginTop;
        var left = node.style.marginLeft;
        node.style.marginTop = 0;
        node.style.marginLeft = 0;
        node.style.zIndex = 10;
        for (var i = 0; i < this.balls.length; i++) {
            if (!this.balls.find(function (b) { return b.idx === i; })) {
                var x = (ball.idx % 4) * 70;
                var y = Math.floor(ball.idx / 4) * 70;
                var transform = "translate3d(" + left + ", " + top + ", 0) translate3d(" + x + "px, " + y + "px, 0px) scale(1.2)";
                node.style.transform = transform;
                ball.idx = i;
                break;
            }
        }
    };
    BallsApp.prototype.view = function (xania) {
        return (xania.tag("div", { className: "balls-outer" },
            xania.tag("div", null,
                xania.tag("button", { onClick: this.onShuffle }, "shuffle")),
            xania.tag("div", { className: "demo2" },
                xania.tag(xania_1.ForEach, { expr: xania_1.fs("for ball in balls") },
                    xania.tag(anim_1.Animate, { transform: xania_1.fs("translate3d ball.idx ball.pressed") },
                        xania.tag("div", { className: "demo2-ball", onMouseDown: xania_1.fs("ball.press()"), onMouseMove: xania_1.fs("ball.pressed -> drag event ball state"), onMouseUp: xania_1.fs("release event ball"), onMouseOut: xania_1.fs("release event ball"), style: [
                                "background-color: ", xania_1.fs("ball.backColor"),
                                "; transform: ",
                                xania_1.fs("initial ball"),
                                "; z-index: 10; box-shadow: rgba(0, 0, 0, 0.498039) -0.666667px 5px 5px;"
                            ] }))))));
    };
    return BallsApp;
}());
exports.BallsApp = BallsApp;
var Ball = (function () {
    function Ball(idx, backColor) {
        this.idx = idx;
        this.backColor = backColor;
        this.pressed = false;
    }
    Ball.prototype.press = function () {
        this.pressed = true;
    };
    return Ball;
}());
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc2FtcGxlL2JhbGxzL2FwcC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHlDQUFrRTtBQUNsRSx1Q0FBd0M7QUFFeEM7SUFJSTtRQUFBLGlCQU9DO1FBVE8sVUFBSyxHQUFHLEVBQUUsQ0FBQztRQXdCbkIsY0FBUyxHQUFHO1lBQ1IsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO2dCQUN6QyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxLQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUN0RCxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDVixJQUFJLENBQUMsR0FBRyxLQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztvQkFDMUIsS0FBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsS0FBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7b0JBQ3RDLEtBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztnQkFDMUIsQ0FBQztZQUNMLENBQUM7UUFDTCxDQUFDLENBQUE7UUE5QkcsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUMxQixJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDO2lCQUNwQixHQUFHLENBQUMsVUFBQSxDQUFDLElBQUksT0FB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QUs7UUFDTixNQUFNLENBQUMsQ0FDSCxtQkFBSyxTQUFTLEVBQUMsYUFBYTtZQUN4QjtnQkFDSSxzQkFBUSxPQUFPLEVBQUUsSUFBSSxDQUFDLFNBQVMsY0FBa0IsQ0FDL0M7WUFDTixtQkFBSyxTQUFTLEVBQUMsT0FBTztnQkFDbEIsVUFBQyxlQUFPLElBQUMsSUFBSSxFQUFFLFVBQUUsQ0FBQyxtQkFBbUIsQ0FBQztvQkFDbEMsVUFBQyxjQUFPLElBQUMsU0FBUyxFQUFFLFVBQUUsQ0FBQyxtQ0FBbUMsQ0FBQzt3QkFDdkQsbUJBQUssU0FBUyxFQUFDLFlBQVksRUFDdkIsV0FBVyxFQUFFLFVBQUUsQ0FBQyxjQUFjLENBQUMsRUFDL0IsV0FBVyxFQUFFLFVBQUUsQ0FBQyx1Q0FBdUMsQ0FBQyxFQUN4RCxTQUFTLEVBQUUsVUFBRSxDQUFDLG9CQUFvQixDQUFDLEVBQ25DLFVBQVUsRUFBRSxVQUFFLENBQUMsb0JBQW9CLENBQUMsRUFDcEMsS0FBSyxFQUFFO2dDQUNILG9CQUFvQixFQUFFLFVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQztnQ0FDMUMsZUFBZTtnQ0FDZixVQUFFLENBQUMsY0FBYyxDQUFDO2dDQUNsQix5RUFBeUU7NkJBQUMsR0FDNUUsQ0FDQSxDQUNKLENBRVIsQ0FDSixDQUNULENBQUM7SUFDTixDQUFDO0lBQ0wsZUFBQztBQUFELENBQUMsQUF2SUQsSUF1SUM7QUF2SVksNEJBQVE7QUF5SXJCO0lBQ0ksY0FBbUIsR0FBVyxFQUFTLFNBQVM7UUFBN0IsUUFBRyxHQUFILEdBQUcsQ0FBUTtRQUFTLGNBQVMsR0FBVCxTQUFTLENBQUE7UUFHaEQsWUFBTyxHQUFHLEtBQUssQ0FBQztJQUZoQixDQUFDO0lBSUQsb0JBQUssR0FBTDtRQUNJLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO0lBQ3hCLENBQUM7SUFDTCxXQUFDO0FBQUQsQ0FBQyxBQVRELElBU0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGb3JFYWNoLCBmcywgVGVtcGxhdGUsIFJlYWN0aXZlIH0gZnJvbSBcIi4uLy4uL3NyYy94YW5pYVwiO1xyXG5pbXBvcnQgeyBBbmltYXRlIH0gZnJvbSBcIi4uLy4uL3NyYy9hbmltXCJcclxuXHJcbmV4cG9ydCBjbGFzcyBCYWxsc0FwcCB7XHJcblxyXG4gICAgcHJpdmF0ZSBiYWxscyA9IFtdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgcmdiID0gWzEwMCwgMTAwLCAxMDBdXHJcbiAgICAgICAgICAgICAgICAubWFwKHggPT4geCArIE1hdGgucmFuZG9tKCkgKiAxNTApXHJcbiAgICAgICAgICAgICAgICAubWFwKE1hdGguZmxvb3IpO1xyXG4gICAgICAgICAgICB0aGlzLmJhbGxzLnB1c2gobmV3IEJhbGwoaSwgYHJnYigke3JnYi5qb2luKFwiLCBcIil9KWApKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHRyYW5zbGF0ZTNkKGlkeCwgcHJlc3NlZCkge1xyXG4gICAgICAgIHZhciB4ID0gKGlkeCAlIDQpICogNzA7XHJcbiAgICAgICAgdmFyIHkgPSBNYXRoLmZsb29yKGlkeCAvIDQpICogNzA7XHJcblxyXG4gICAgICAgIHZhciBzID0gcHJlc3NlZCA/IDEuMiA6IDE7XHJcblxyXG4gICAgICAgIHJldHVybiBgdHJhbnNsYXRlM2QoJHt4fXB4LCAke3l9cHgsIDBweCkgc2NhbGUoJHtzfSlgO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBpbml0aWFsKGJhbGwpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50cmFuc2xhdGUzZChiYWxsLmlkeCwgYmFsbC5wcmVzc2VkKTtcclxuICAgIH1cclxuXHJcbiAgICBvblNodWZmbGUgPSAoKSA9PiB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmJhbGxzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBlID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdGhpcy5iYWxscy5sZW5ndGgpO1xyXG4gICAgICAgICAgICBpZiAoZSAhPT0gaSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLmJhbGxzW2ldLmlkeDtcclxuICAgICAgICAgICAgICAgIHRoaXMuYmFsbHNbaV0uaWR4ID0gdGhpcy5iYWxsc1tlXS5pZHg7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJhbGxzW2VdLmlkeCA9IHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZHJhZyhldmVudCwgYmFsbCwgc3RhdGUpIHtcclxuICAgICAgICB2YXIgeyBvZmZzZXRYLCBvZmZzZXRZIH0gPSBldmVudDtcclxuICAgICAgICB2YXIgbm9kZSA9IGV2ZW50LnRhcmdldDtcclxuICAgICAgICBcclxuICAgICAgICB2YXIgbWFyZ2luTGVmdCwgbWFyZ2luVG9wLCBkTGVmdCwgZFRvcCwgYmFsbElkeDtcclxuICAgICAgICBpZiAoc3RhdGUgJiYgbm9kZS5zdHlsZS5tYXJnaW5Ub3AgIT09IDAgJiYgbm9kZS5zdHlsZS5tYXJnaW5MZWZ0ICE9PSAwKSB7XHJcbiAgICAgICAgICAgIG1hcmdpbkxlZnQgPSBzdGF0ZS5tYXJnaW5MZWZ0O1xyXG4gICAgICAgICAgICBtYXJnaW5Ub3AgPSBzdGF0ZS5tYXJnaW5Ub3A7XHJcbiAgICAgICAgICAgIGRMZWZ0ID0gc3RhdGUuZExlZnQ7XHJcbiAgICAgICAgICAgIGRUb3AgPSBzdGF0ZS5kVG9wO1xyXG4gICAgICAgICAgICBiYWxsSWR4ID0gc3RhdGUuYmFsbElkeDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBkTGVmdCA9IG9mZnNldFggLSAyNTtcclxuICAgICAgICAgICAgZFRvcCA9IG9mZnNldFkgLSAyNTtcclxuICAgICAgICAgICAgbWFyZ2luTGVmdCA9IDA7XHJcbiAgICAgICAgICAgIG1hcmdpblRvcCA9IDA7XHJcbiAgICAgICAgICAgIGJhbGxJZHggPSBiYWxsLmlkeDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG1hcmdpbkxlZnQgKz0gb2Zmc2V0WCAtIDI1IC0gZExlZnQ7XHJcbiAgICAgICAgbWFyZ2luVG9wICs9IG9mZnNldFkgLSAyNSAtIGRUb3A7XHJcblxyXG4gICAgICAgIG5vZGUuc3R5bGUubWFyZ2luTGVmdCA9IG1hcmdpbkxlZnQgKyBcInB4XCI7XHJcbiAgICAgICAgbm9kZS5zdHlsZS5tYXJnaW5Ub3AgPSBtYXJnaW5Ub3AgKyBcInB4XCI7XHJcbiAgICAgICAgbm9kZS5zdHlsZS56SW5kZXggPSAxMDA7XHJcblxyXG5cclxuICAgICAgICB2YXIgeCA9IG1hcmdpbkxlZnQgKyAoYmFsbC5pZHggJSA0KSAqIDcwO1xyXG4gICAgICAgIHZhciB5ID0gbWFyZ2luVG9wICsgTWF0aC5mbG9vcihiYWxsLmlkeCAvIDQpICogNzA7XHJcblxyXG4gICAgICAgIHZhciBjb2wgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigzLCBNYXRoLnJvdW5kKHggLyA3MCkpKTtcclxuICAgICAgICB2YXIgcm93ID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMywgTWF0aC5yb3VuZCh5IC8gNzApKSk7XHJcbiAgICAgICAgdmFyIG5ld0JhbGxJZHggPSBjb2wgKyByb3cgKiA0O1xyXG5cclxuICAgICAgICBpZiAoYmFsbElkeCAhPT0gbmV3QmFsbElkeCkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuYmFsbHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBiID0gdGhpcy5iYWxsc1tpXTtcclxuICAgICAgICAgICAgICAgIGlmIChiYWxsICE9PSBiICYmIGIuaWR4ID09PSBuZXdCYWxsSWR4KVxyXG4gICAgICAgICAgICAgICAgICAgIGIuaWR4ID0gYmFsbElkeDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBiYWxsSWR4ID0gbmV3QmFsbElkeDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB7IG1hcmdpblRvcCwgbWFyZ2luTGVmdCwgZExlZnQsIGRUb3AsIGJhbGxJZHggfTtcclxuICAgIH1cclxuXHJcbiAgICByZWxlYXNlKGV2ZW50LCBiYWxsOiBCYWxsKSB7XHJcbiAgICAgICAgaWYgKGJhbGwucHJlc3NlZCkge1xyXG4gICAgICAgICAgICBiYWxsLnByZXNzZWQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG5vZGUgPSBldmVudC50YXJnZXQ7XHJcbiAgICAgICAgdmFyIHRvcCA9IG5vZGUuc3R5bGUubWFyZ2luVG9wO1xyXG4gICAgICAgIHZhciBsZWZ0ID0gbm9kZS5zdHlsZS5tYXJnaW5MZWZ0O1xyXG4gICAgICAgIG5vZGUuc3R5bGUubWFyZ2luVG9wID0gMDtcclxuICAgICAgICBub2RlLnN0eWxlLm1hcmdpbkxlZnQgPSAwO1xyXG4gICAgICAgIG5vZGUuc3R5bGUuekluZGV4ID0gMTA7XHJcblxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5iYWxscy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuYmFsbHMuZmluZChiID0+IGIuaWR4ID09PSBpKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHggPSAoYmFsbC5pZHggJSA0KSAqIDcwO1xyXG4gICAgICAgICAgICAgICAgdmFyIHkgPSBNYXRoLmZsb29yKGJhbGwuaWR4IC8gNCkgKiA3MDtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgdHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKCR7bGVmdH0sICR7dG9wfSwgMCkgdHJhbnNsYXRlM2QoJHt4fXB4LCAke3l9cHgsIDBweCkgc2NhbGUoMS4yKWA7XHJcbiAgICAgICAgICAgICAgICBub2RlLnN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcclxuXHJcbiAgICAgICAgICAgICAgICBiYWxsLmlkeCA9IGk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB2aWV3KHhhbmlhKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJiYWxscy1vdXRlclwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e3RoaXMub25TaHVmZmxlfT5zaHVmZmxlPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZGVtbzJcIj5cclxuICAgICAgICAgICAgICAgICAgICA8Rm9yRWFjaCBleHByPXtmcyhcImZvciBiYWxsIGluIGJhbGxzXCIpfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPEFuaW1hdGUgdHJhbnNmb3JtPXtmcyhcInRyYW5zbGF0ZTNkIGJhbGwuaWR4IGJhbGwucHJlc3NlZFwiKX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRlbW8yLWJhbGxcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uTW91c2VEb3duPXtmcyhcImJhbGwucHJlc3MoKVwiKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbk1vdXNlTW92ZT17ZnMoXCJiYWxsLnByZXNzZWQgLT4gZHJhZyBldmVudCBiYWxsIHN0YXRlXCIpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uTW91c2VVcD17ZnMoXCJyZWxlYXNlIGV2ZW50IGJhbGxcIil9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25Nb3VzZU91dD17ZnMoXCJyZWxlYXNlIGV2ZW50IGJhbGxcIil9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e1tcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJiYWNrZ3JvdW5kLWNvbG9yOiBcIiwgZnMoXCJiYWxsLmJhY2tDb2xvclwiKSAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiOyB0cmFuc2Zvcm06IFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcyhcImluaXRpYWwgYmFsbFwiKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCI7IHotaW5kZXg6IDEwOyBib3gtc2hhZG93OiByZ2JhKDAsIDAsIDAsIDAuNDk4MDM5KSAtMC42NjY2NjdweCA1cHggNXB4O1wiXX0gPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQW5pbWF0ZT5cclxuICAgICAgICAgICAgICAgICAgICA8L0ZvckVhY2g+XHJcblxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIEJhbGwge1xyXG4gICAgY29uc3RydWN0b3IocHVibGljIGlkeDogbnVtYmVyLCBwdWJsaWMgYmFja0NvbG9yKSB7XHJcbiAgICB9XHJcblxyXG4gICAgcHJlc3NlZCA9IGZhbHNlO1xyXG5cclxuICAgIHByZXNzKCkge1xyXG4gICAgICAgIHRoaXMucHJlc3NlZCA9IHRydWU7XHJcbiAgICB9XHJcbn0iXX0=