"use strict";
var observables_1 = require("../../src/observables");
var xania_1 = require("../../src/xania");
require("sample/clock/app.css");
var ClockApp = (function () {
    function ClockApp() {
        this.time = new observables_1.Observables.Time();
    }
    ClockApp.secondsAngle = function (time) {
        var f = 4;
        return 360 * (Math.floor(time / (1000 / f)) % (60 * f)) / (60 * f);
    };
    ClockApp.minutesAngle = function (time) {
        var f = 60 * 60 * 1000;
        return 360 * (time % f) / f;
    };
    ClockApp.hoursAngle = function (time) {
        var f = 12 * 60 * 60 * 1000;
        return 360 * (time % f) / f;
    };
    ClockApp.prototype.view = function (xania) {
        return (xania.tag("div", { style: "height: 200px;" },
            xania.tag("svg", { viewBox: "0 0 200 200" },
                xania.tag("g", { transform: "scale(2) translate(50,50)" },
                    xania.tag("circle", { className: "clock-face", r: "35" }),
                    xania.tag(xania_1.ForEach, { expr: xania_1.fs("for p in [ 0..59 ]") },
                        xania.tag("line", { className: "minor", y1: "42", y2: "45", transform: ["rotate(", xania_1.fs("p * 6"), ")"] })),
                    xania.tag(xania_1.ForEach, { expr: xania_1.fs("for p in [ 0..11 ]") },
                        xania.tag("line", { className: "major", y1: "35", y2: "45", transform: ["rotate(", xania_1.fs("p * 30"), ")"] })),
                    xania.tag("line", { className: "hour", y1: "2", y2: "-20", transform: ["rotate(", xania_1.fs("hoursAngle (await time)"), ")"] }),
                    xania.tag("line", { className: "minute", y1: "4", y2: "-30", transform: ["rotate(", xania_1.fs("minutesAngle (await time)"), ")"] }),
                    xania.tag("g", { transform: ["rotate(", xania_1.fs("secondsAngle (await time)"), ")"] },
                        xania.tag("line", { className: "second", y1: "10", y2: "-38" }),
                        xania.tag("line", { className: "second-counterweight", y1: "10", y2: "2" }))))));
    };
    return ClockApp;
}());
exports.ClockApp = ClockApp;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjbG9jay50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHFEQUFtRDtBQUNuRCx5Q0FBNkM7QUFDN0MsZ0NBQTZCO0FBRTdCO0lBQUE7UUFDSSxTQUFJLEdBQUcsSUFBSSx5QkFBVyxDQUFDLElBQUksRUFBRSxDQUFDO0lBd0NsQyxDQUFDO0lBdENVLHFCQUFZLEdBQW5CLFVBQW9CLElBQUk7UUFDcEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1YsTUFBTSxDQUFDLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN2RSxDQUFDO0lBRU0scUJBQVksR0FBbkIsVUFBb0IsSUFBSTtRQUNwQixJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQztRQUN2QixNQUFNLENBQUMsR0FBRyxHQUFHLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRU0sbUJBQVUsR0FBakIsVUFBa0IsSUFBSTtRQUNsQixJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFDNUIsTUFBTSxDQUFDLEdBQUcsR0FBRyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVELHVCQUFJLEdBQUosVUFBSyxLQUFLO1FBQ04sTUFBTSxDQUFDLENBQ0gsbUJBQUssS0FBSyxFQUFDLGdCQUFnQjtZQUN2QixtQkFBSyxPQUFPLEVBQUMsYUFBYTtnQkFDdEIsaUJBQUcsU0FBUyxFQUFDLDJCQUEyQjtvQkFDcEMsc0JBQVEsU0FBUyxFQUFDLFlBQVksRUFBQyxDQUFDLEVBQUMsSUFBSSxHQUFVO29CQUMvQyxVQUFDLGVBQU8sSUFBQyxJQUFJLEVBQUUsVUFBRSxDQUFDLG9CQUFvQixDQUFDO3dCQUNuQyxvQkFBTSxTQUFTLEVBQUMsT0FBTyxFQUFDLEVBQUUsRUFBQyxJQUFJLEVBQUMsRUFBRSxFQUFDLElBQUksRUFBQyxTQUFTLEVBQUUsQ0FBQyxTQUFTLEVBQUUsVUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFJLENBQzlFO29CQUNWLFVBQUMsZUFBTyxJQUFDLElBQUksRUFBRSxVQUFFLENBQUMsb0JBQW9CLENBQUM7d0JBQ25DLG9CQUFNLFNBQVMsRUFBQyxPQUFPLEVBQUMsRUFBRSxFQUFDLElBQUksRUFBQyxFQUFFLEVBQUMsSUFBSSxFQUFDLFNBQVMsRUFBRSxDQUFDLFNBQVMsRUFBRSxVQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUksQ0FDL0U7b0JBQ1Ysb0JBQU0sU0FBUyxFQUFDLE1BQU0sRUFBQyxFQUFFLEVBQUMsR0FBRyxFQUFDLEVBQUUsRUFBQyxLQUFLLEVBQUMsU0FBUyxFQUFFLENBQUMsU0FBUyxFQUFFLFVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFJO29CQUNyRyxvQkFBTSxTQUFTLEVBQUMsUUFBUSxFQUFDLEVBQUUsRUFBQyxHQUFHLEVBQUMsRUFBRSxFQUFDLEtBQUssRUFBQyxTQUFTLEVBQUUsQ0FBQyxTQUFTLEVBQUUsVUFBRSxDQUFDLDJCQUEyQixDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUk7b0JBQ3pHLGlCQUFHLFNBQVMsRUFBRSxDQUFDLFNBQVMsRUFBRSxVQUFFLENBQUMsMkJBQTJCLENBQUMsRUFBRSxHQUFHLENBQUM7d0JBQzNELG9CQUFNLFNBQVMsRUFBQyxRQUFRLEVBQUMsRUFBRSxFQUFDLElBQUksRUFBQyxFQUFFLEVBQUMsS0FBSyxHQUFRO3dCQUNqRCxvQkFBTSxTQUFTLEVBQUMsc0JBQXNCLEVBQUMsRUFBRSxFQUFDLElBQUksRUFBQyxFQUFFLEVBQUMsR0FBRyxHQUFRLENBQzdELENBQ0osQ0FDRixDQUNKLENBQ1QsQ0FBQztJQUNOLENBQUM7SUFDTCxlQUFDO0FBQUQsQ0FBQyxBQXpDRCxJQXlDQztBQXpDWSw0QkFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGVzIH0gZnJvbSBcIi4uLy4uL3NyYy9vYnNlcnZhYmxlc1wiXHJcbmltcG9ydCB7IEZvckVhY2gsIGZzIH0gZnJvbSBcIi4uLy4uL3NyYy94YW5pYVwiXHJcbmltcG9ydCAnc2FtcGxlL2Nsb2NrL2FwcC5jc3MnXHJcblxyXG5leHBvcnQgY2xhc3MgQ2xvY2tBcHAge1xyXG4gICAgdGltZSA9IG5ldyBPYnNlcnZhYmxlcy5UaW1lKCk7XHJcblxyXG4gICAgc3RhdGljIHNlY29uZHNBbmdsZSh0aW1lKSB7XHJcbiAgICAgICAgdmFyIGYgPSA0O1xyXG4gICAgICAgIHJldHVybiAzNjAgKiAoTWF0aC5mbG9vcih0aW1lIC8gKDEwMDAgLyBmKSkgJSAoNjAgKiBmKSkgLyAoNjAgKiBmKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgbWludXRlc0FuZ2xlKHRpbWUpIHtcclxuICAgICAgICB2YXIgZiA9IDYwICogNjAgKiAxMDAwO1xyXG4gICAgICAgIHJldHVybiAzNjAgKiAodGltZSAlIGYpIC8gZjtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgaG91cnNBbmdsZSh0aW1lKSB7XHJcbiAgICAgICAgdmFyIGYgPSAxMiAqIDYwICogNjAgKiAxMDAwO1xyXG4gICAgICAgIHJldHVybiAzNjAgKiAodGltZSAlIGYpIC8gZjtcclxuICAgIH1cclxuXHJcbiAgICB2aWV3KHhhbmlhKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBzdHlsZT1cImhlaWdodDogMjAwcHg7XCI+XHJcbiAgICAgICAgICAgICAgICA8c3ZnIHZpZXdCb3g9XCIwIDAgMjAwIDIwMFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxnIHRyYW5zZm9ybT1cInNjYWxlKDIpIHRyYW5zbGF0ZSg1MCw1MClcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGNpcmNsZSBjbGFzc05hbWU9XCJjbG9jay1mYWNlXCIgcj1cIjM1XCI+PC9jaXJjbGU+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxGb3JFYWNoIGV4cHI9e2ZzKFwiZm9yIHAgaW4gWyAwLi41OSBdXCIpfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaW5lIGNsYXNzTmFtZT1cIm1pbm9yXCIgeTE9XCI0MlwiIHkyPVwiNDVcIiB0cmFuc2Zvcm09e1tcInJvdGF0ZShcIiwgZnMoXCJwICogNlwiKSwgXCIpXCJdfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0ZvckVhY2g+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxGb3JFYWNoIGV4cHI9e2ZzKFwiZm9yIHAgaW4gWyAwLi4xMSBdXCIpfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaW5lIGNsYXNzTmFtZT1cIm1ham9yXCIgeTE9XCIzNVwiIHkyPVwiNDVcIiB0cmFuc2Zvcm09e1tcInJvdGF0ZShcIiwgZnMoXCJwICogMzBcIiksIFwiKVwiXX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Gb3JFYWNoPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGluZSBjbGFzc05hbWU9XCJob3VyXCIgeTE9XCIyXCIgeTI9XCItMjBcIiB0cmFuc2Zvcm09e1tcInJvdGF0ZShcIiwgZnMoXCJob3Vyc0FuZ2xlIChhd2FpdCB0aW1lKVwiKSwgXCIpXCJdfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGluZSBjbGFzc05hbWU9XCJtaW51dGVcIiB5MT1cIjRcIiB5Mj1cIi0zMFwiIHRyYW5zZm9ybT17W1wicm90YXRlKFwiLCBmcyhcIm1pbnV0ZXNBbmdsZSAoYXdhaXQgdGltZSlcIiksIFwiKVwiXX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGcgdHJhbnNmb3JtPXtbXCJyb3RhdGUoXCIsIGZzKFwic2Vjb25kc0FuZ2xlIChhd2FpdCB0aW1lKVwiKSwgXCIpXCJdfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaW5lIGNsYXNzTmFtZT1cInNlY29uZFwiIHkxPVwiMTBcIiB5Mj1cIi0zOFwiPjwvbGluZT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaW5lIGNsYXNzTmFtZT1cInNlY29uZC1jb3VudGVyd2VpZ2h0XCIgeTE9XCIxMFwiIHkyPVwiMlwiPjwvbGluZT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9nPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZz5cclxuICAgICAgICAgICAgICAgIDwvc3ZnPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcblxyXG4iXX0=