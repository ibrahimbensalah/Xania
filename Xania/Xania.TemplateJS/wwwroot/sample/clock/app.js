"use strict";
var xania_1 = require("../../src/xania");
require("./app.css");
var ClockApp = (function () {
    function ClockApp() {
        this.time = new Date().getTime();
    }
    ClockApp.secondsAngle = function (time) {
        var f = 4;
        return 360 * (Math.floor(time / (1000 / f)) % (60 * f)) / (60 * f);
    };
    ClockApp.minutesAngle = function (time) {
        var f = 60 * 60 * 1000;
        return 360 * (time % f) / f;
    };
    ClockApp.hoursAngle = function (time) {
        var f = 12 * 60 * 60 * 1000;
        return 360 * (time % f) / f;
    };
    ClockApp.prototype.view = function (xania) {
        return (xania.tag("div", { style: "height: 200px;" },
            xania.tag("svg", { viewBox: "0 0 200 200" },
                xania.tag("g", { transform: "scale(2) translate(50,50)" },
                    xania.tag("circle", { className: "clock-face", r: "35" }),
                    xania.tag(xania_1.Repeat, { source: xania_1.expr("for p in [ 0..59 ]") },
                        xania.tag("line", { className: "minor", y1: "42", y2: "45", transform: ["rotate(", xania_1.expr("p * 6"), ")"] })),
                    xania.tag(xania_1.Repeat, { source: xania_1.expr("for p in [ 0..11 ]") },
                        xania.tag("line", { className: "major", y1: "35", y2: "45", transform: ["rotate(", xania_1.expr("p * 30"), ")"] })),
                    xania.tag("line", { className: "hour", y1: "2", y2: "-20", transform: ["rotate(", xania_1.expr("hoursAngle (time)"), ")"] }),
                    xania.tag("line", { className: "minute", y1: "4", y2: "-30", transform: ["rotate(", xania_1.expr("minutesAngle (time)"), ")"] }),
                    xania.tag("g", { transform: ["rotate(", xania_1.expr("secondsAngle (time)"), ")"] },
                        xania.tag("line", { className: "second", y1: "10", y2: "-38" }),
                        xania.tag("line", { className: "second-counterweight", y1: "10", y2: "2" }))))));
    };
    return ClockApp;
}());
exports.ClockApp = ClockApp;
function execute(_a) {
    var driver = _a.driver;
    return xania_1.Xania.render(ClockApp, driver);
}
exports.execute = execute;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBwLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEseUNBQW9GO0FBQ3BGLHFCQUFrQjtBQUVsQjtJQUFBO1FBQ0ksU0FBSSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7SUF3Q2hDLENBQUM7SUF0Q1UscUJBQVksR0FBbkIsVUFBb0IsSUFBSTtRQUNwQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDVixNQUFNLENBQUMsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7SUFFTSxxQkFBWSxHQUFuQixVQUFvQixJQUFJO1FBQ3BCLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBQ3ZCLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFTSxtQkFBVSxHQUFqQixVQUFrQixJQUFJO1FBQ2xCLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQztRQUM1QixNQUFNLENBQUMsR0FBRyxHQUFHLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQsdUJBQUksR0FBSixVQUFLLEtBQUs7UUFDTixNQUFNLENBQUMsQ0FDSCxtQkFBSyxLQUFLLEVBQUMsZ0JBQWdCO1lBQ3ZCLG1CQUFLLE9BQU8sRUFBQyxhQUFhO2dCQUN0QixpQkFBRyxTQUFTLEVBQUMsMkJBQTJCO29CQUNwQyxzQkFBUSxTQUFTLEVBQUMsWUFBWSxFQUFDLENBQUMsRUFBQyxJQUFJLEdBQVU7b0JBQy9DLFVBQUMsY0FBTSxJQUFDLE1BQU0sRUFBRSxZQUFJLENBQUMsb0JBQW9CLENBQUM7d0JBQ3RDLG9CQUFNLFNBQVMsRUFBQyxPQUFPLEVBQUMsRUFBRSxFQUFDLElBQUksRUFBQyxFQUFFLEVBQUMsSUFBSSxFQUFDLFNBQVMsRUFBRSxDQUFDLFNBQVMsRUFBRSxZQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUksQ0FDakY7b0JBQ1QsVUFBQyxjQUFNLElBQUMsTUFBTSxFQUFFLFlBQUksQ0FBQyxvQkFBb0IsQ0FBQzt3QkFDdEMsb0JBQU0sU0FBUyxFQUFDLE9BQU8sRUFBQyxFQUFFLEVBQUMsSUFBSSxFQUFDLEVBQUUsRUFBQyxJQUFJLEVBQUMsU0FBUyxFQUFFLENBQUMsU0FBUyxFQUFFLFlBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxHQUFHLENBQUMsR0FBSSxDQUNsRjtvQkFDVCxvQkFBTSxTQUFTLEVBQUMsTUFBTSxFQUFDLEVBQUUsRUFBQyxHQUFHLEVBQUMsRUFBRSxFQUFDLEtBQUssRUFBQyxTQUFTLEVBQUUsQ0FBQyxTQUFTLEVBQUUsWUFBSSxDQUFDLG1CQUFtQixDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUk7b0JBQ2pHLG9CQUFNLFNBQVMsRUFBQyxRQUFRLEVBQUMsRUFBRSxFQUFDLEdBQUcsRUFBQyxFQUFFLEVBQUMsS0FBSyxFQUFDLFNBQVMsRUFBRSxDQUFDLFNBQVMsRUFBRSxZQUFJLENBQUMscUJBQXFCLENBQUMsRUFBRSxHQUFHLENBQUMsR0FBSTtvQkFDckcsaUJBQUcsU0FBUyxFQUFFLENBQUMsU0FBUyxFQUFFLFlBQUksQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLEdBQUcsQ0FBQzt3QkFDdkQsb0JBQU0sU0FBUyxFQUFDLFFBQVEsRUFBQyxFQUFFLEVBQUMsSUFBSSxFQUFDLEVBQUUsRUFBQyxLQUFLLEdBQVE7d0JBQ2pELG9CQUFNLFNBQVMsRUFBQyxzQkFBc0IsRUFBQyxFQUFFLEVBQUMsSUFBSSxFQUFDLEVBQUUsRUFBQyxHQUFHLEdBQVEsQ0FDN0QsQ0FDSixDQUNGLENBQ0osQ0FDVCxDQUFDO0lBQ04sQ0FBQztJQUNMLGVBQUM7QUFBRCxDQUFDLEFBekNELElBeUNDO0FBekNZLDRCQUFRO0FBMkNyQixpQkFBd0IsRUFBVTtRQUFSLGtCQUFNO0lBQzVCLE1BQU0sQ0FBQyxhQUFLLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUMxQyxDQUFDO0FBRkQsMEJBRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBYYW5pYSwgUmVwZWF0LCBUZW1wbGF0ZSwgRG9tLCBSZWFjdGl2ZSBhcyBSZSwgZXhwciB9IGZyb20gXCIuLi8uLi9zcmMveGFuaWFcIlxyXG5pbXBvcnQgJy4vYXBwLmNzcydcclxuXHJcbmV4cG9ydCBjbGFzcyBDbG9ja0FwcCB7XHJcbiAgICB0aW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcblxyXG4gICAgc3RhdGljIHNlY29uZHNBbmdsZSh0aW1lKSB7XHJcbiAgICAgICAgdmFyIGYgPSA0O1xyXG4gICAgICAgIHJldHVybiAzNjAgKiAoTWF0aC5mbG9vcih0aW1lIC8gKDEwMDAgLyBmKSkgJSAoNjAgKiBmKSkgLyAoNjAgKiBmKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgbWludXRlc0FuZ2xlKHRpbWUpIHtcclxuICAgICAgICB2YXIgZiA9IDYwICogNjAgKiAxMDAwO1xyXG4gICAgICAgIHJldHVybiAzNjAgKiAodGltZSAlIGYpIC8gZjtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgaG91cnNBbmdsZSh0aW1lKSB7XHJcbiAgICAgICAgdmFyIGYgPSAxMiAqIDYwICogNjAgKiAxMDAwO1xyXG4gICAgICAgIHJldHVybiAzNjAgKiAodGltZSAlIGYpIC8gZjtcclxuICAgIH1cclxuXHJcbiAgICB2aWV3KHhhbmlhKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBzdHlsZT1cImhlaWdodDogMjAwcHg7XCI+XHJcbiAgICAgICAgICAgICAgICA8c3ZnIHZpZXdCb3g9XCIwIDAgMjAwIDIwMFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxnIHRyYW5zZm9ybT1cInNjYWxlKDIpIHRyYW5zbGF0ZSg1MCw1MClcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGNpcmNsZSBjbGFzc05hbWU9XCJjbG9jay1mYWNlXCIgcj1cIjM1XCI+PC9jaXJjbGU+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxSZXBlYXQgc291cmNlPXtleHByKFwiZm9yIHAgaW4gWyAwLi41OSBdXCIpfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaW5lIGNsYXNzTmFtZT1cIm1pbm9yXCIgeTE9XCI0MlwiIHkyPVwiNDVcIiB0cmFuc2Zvcm09e1tcInJvdGF0ZShcIiwgZXhwcihcInAgKiA2XCIpLCBcIilcIl19IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvUmVwZWF0PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8UmVwZWF0IHNvdXJjZT17ZXhwcihcImZvciBwIGluIFsgMC4uMTEgXVwiKX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGluZSBjbGFzc05hbWU9XCJtYWpvclwiIHkxPVwiMzVcIiB5Mj1cIjQ1XCIgdHJhbnNmb3JtPXtbXCJyb3RhdGUoXCIsIGV4cHIoXCJwICogMzBcIiksIFwiKVwiXX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9SZXBlYXQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaW5lIGNsYXNzTmFtZT1cImhvdXJcIiB5MT1cIjJcIiB5Mj1cIi0yMFwiIHRyYW5zZm9ybT17W1wicm90YXRlKFwiLCBleHByKFwiaG91cnNBbmdsZSAodGltZSlcIiksIFwiKVwiXX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpbmUgY2xhc3NOYW1lPVwibWludXRlXCIgeTE9XCI0XCIgeTI9XCItMzBcIiB0cmFuc2Zvcm09e1tcInJvdGF0ZShcIiwgZXhwcihcIm1pbnV0ZXNBbmdsZSAodGltZSlcIiksIFwiKVwiXX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGcgdHJhbnNmb3JtPXtbXCJyb3RhdGUoXCIsIGV4cHIoXCJzZWNvbmRzQW5nbGUgKHRpbWUpXCIpLCBcIilcIl19PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpbmUgY2xhc3NOYW1lPVwic2Vjb25kXCIgeTE9XCIxMFwiIHkyPVwiLTM4XCI+PC9saW5lPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpbmUgY2xhc3NOYW1lPVwic2Vjb25kLWNvdW50ZXJ3ZWlnaHRcIiB5MT1cIjEwXCIgeTI9XCIyXCI+PC9saW5lPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2c+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9nPlxyXG4gICAgICAgICAgICAgICAgPC9zdmc+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBleGVjdXRlKHsgZHJpdmVyIH0pIHtcclxuICAgIHJldHVybiBYYW5pYS5yZW5kZXIoQ2xvY2tBcHAsIGRyaXZlcik7XHJcbn1cclxuIl19