"use strict";
var observables_1 = require("../../src/observables");
var xania_1 = require("../../src/xania");
function bind(target) {
    var store = new xania_1.Reactive.Store({
        time: new observables_1.Observables.Time(),
        message: "hello, dbmon",
        databases: ENV.generateData(true).toArray()
    });
    xania_1.Xania.view(dbmon(xania_1.Xania)).bind(target, store);
    var load = function () {
        ENV.generateData(true);
        store.refresh();
        Monitoring.renderRate.ping();
        window.setTimeout(load, ENV.timeout);
    };
    load();
}
exports.bind = bind;
var dbmon = function (xania) {
    return xania.tag("table", { clazz: "table table-striped latest-data" },
        xania.tag("tbody", null,
            xania.tag(xania_1.ForEach, { expr: xania_1.fs("for db in databases") },
                xania.tag("tr", null,
                    xania.tag("td", { className: "dbname" }, xania_1.fs("db.dbname")),
                    xania.tag("td", { className: "query-count" },
                        xania.tag("span", { className: xania_1.fs("db.lastSample.countClassName") }, xania_1.fs("db.lastSample.nbQueries"))),
                    xania.tag(xania_1.ForEach, { expr: xania_1.fs("for q in db.lastSample.topFiveQueries") },
                        xania.tag("td", { className: xania_1.fs("q.elapsedClassName") },
                            xania_1.fs("q.formatElapsed"),
                            xania.tag("div", { className: "popover left" },
                                xania.tag("div", { className: "popover-content" }, xania_1.fs("q.query")),
                                xania.tag("div", { className: "arrow" }))))))));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc2FtcGxlL2RibW9uL2FwcC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHFEQUFtRDtBQUVuRCx5Q0FBb0U7QUFRcEUsY0FBcUIsTUFBWTtJQUU3QixJQUFJLEtBQUssR0FBRyxJQUFJLGdCQUFFLENBQUMsS0FBSyxDQUFDO1FBQ2pCLElBQUksRUFBRSxJQUFJLHlCQUFXLENBQUMsSUFBSSxFQUFFO1FBQzVCLE9BQU8sRUFBRSxjQUFjO1FBQ3ZCLFNBQVMsRUFBRSxHQUFHLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRTtLQUNsRCxDQUFDLENBQUM7SUFDSCxhQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFN0MsSUFBSSxJQUFJLEdBQUc7UUFDUCxHQUFHLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXZCLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUVoQixVQUFVLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzdCLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN6QyxDQUFDLENBQUM7SUFDRixJQUFJLEVBQUUsQ0FBQztBQUVYLENBQUM7QUFuQkQsb0JBbUJDO0FBRUQsSUFBSSxLQUFLLEdBQVEsVUFBQyxLQUFLO0lBQ25CLE9BQUEscUJBQU8sS0FBSyxFQUFDLGlDQUFpQztRQUMxQztZQUNBLFVBQUMsZUFBTyxJQUFDLElBQUksRUFBRSxVQUFFLENBQUMscUJBQXFCLENBQUM7Z0JBQ3BDO29CQUNJLGtCQUFJLFNBQVMsRUFBQyxRQUFRLElBQ2pCLFVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FDZjtvQkFDTCxrQkFBSSxTQUFTLEVBQUMsYUFBYTt3QkFDdkIsb0JBQU0sU0FBUyxFQUFFLFVBQUUsQ0FBQyw4QkFBOEIsQ0FBQyxJQUM5QyxVQUFFLENBQUMseUJBQXlCLENBQUMsQ0FDM0IsQ0FDTjtvQkFDTCxVQUFDLGVBQU8sSUFBQyxJQUFJLEVBQUUsVUFBRSxDQUFDLHVDQUF1QyxDQUFDO3dCQUN0RCxrQkFBSSxTQUFTLEVBQUUsVUFBRSxDQUFDLG9CQUFvQixDQUFDOzRCQUNsQyxVQUFFLENBQUMsaUJBQWlCLENBQUM7NEJBQ3RCLG1CQUFLLFNBQVMsRUFBQyxjQUFjO2dDQUN6QixtQkFBSyxTQUFTLEVBQUMsaUJBQWlCLElBQzNCLFVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FDWjtnQ0FDTixtQkFBSyxTQUFTLEVBQUMsT0FBTyxHQUFPLENBQzNCLENBQ0wsQ0FDQyxDQUNULENBQ0MsQ0FDRixDQUNKO0FBMUJSLENBMEJRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlcyB9IGZyb20gXCIuLi8uLi9zcmMvb2JzZXJ2YWJsZXNcIlxyXG5cclxuaW1wb3J0IHsgWGFuaWEsIEZvckVhY2gsIGZzLCBSZWFjdGl2ZSBhcyBSZSB9IGZyb20gXCIuLi8uLi9zcmMveGFuaWFcIlxyXG5cclxuLy8gUmVTaGFycGVyIGRpc2FibGUgSW5jb25zaXN0ZW50TmFtaW5nXHJcbmRlY2xhcmUgdmFyIEVOVjtcclxuZGVjbGFyZSB2YXIgTW9uaXRvcmluZztcclxuLy8gUmVTaGFycGVyIHJlc3RvcmUgSW5jb25zaXN0ZW50TmFtaW5nXHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGJpbmQodGFyZ2V0OiBOb2RlKSB7XHJcblxyXG4gICAgdmFyIHN0b3JlID0gbmV3IFJlLlN0b3JlKHtcclxuICAgICAgICAgICAgdGltZTogbmV3IE9ic2VydmFibGVzLlRpbWUoKSxcclxuICAgICAgICAgICAgbWVzc2FnZTogXCJoZWxsbywgZGJtb25cIixcclxuICAgICAgICAgICAgZGF0YWJhc2VzOiBFTlYuZ2VuZXJhdGVEYXRhKHRydWUpLnRvQXJyYXkoKVxyXG4gICAgfSk7XHJcbiAgICBYYW5pYS52aWV3KGRibW9uKFhhbmlhKSkuYmluZCh0YXJnZXQsIHN0b3JlKTtcclxuXHJcbiAgICB2YXIgbG9hZCA9ICgpID0+IHtcclxuICAgICAgICBFTlYuZ2VuZXJhdGVEYXRhKHRydWUpO1xyXG5cclxuICAgICAgICBzdG9yZS5yZWZyZXNoKCk7XHJcblxyXG4gICAgICAgIE1vbml0b3JpbmcucmVuZGVyUmF0ZS5waW5nKCk7XHJcbiAgICAgICAgd2luZG93LnNldFRpbWVvdXQobG9hZCwgRU5WLnRpbWVvdXQpO1xyXG4gICAgfTtcclxuICAgIGxvYWQoKTtcclxuXHJcbn1cclxuXHJcbnZhciBkYm1vbjogYW55ID0gKHhhbmlhKSA9PlxyXG4gICAgPHRhYmxlIGNsYXp6PVwidGFibGUgdGFibGUtc3RyaXBlZCBsYXRlc3QtZGF0YVwiPlxyXG4gICAgICAgIDx0Ym9keT5cclxuICAgICAgICA8Rm9yRWFjaCBleHByPXtmcyhcImZvciBkYiBpbiBkYXRhYmFzZXNcIil9PlxyXG4gICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwiZGJuYW1lXCI+XHJcbiAgICAgICAgICAgICAgICAgICAge2ZzKFwiZGIuZGJuYW1lXCIpfVxyXG4gICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJxdWVyeS1jb3VudFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT17ZnMoXCJkYi5sYXN0U2FtcGxlLmNvdW50Q2xhc3NOYW1lXCIpfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAge2ZzKFwiZGIubGFzdFNhbXBsZS5uYlF1ZXJpZXNcIil9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgIDxGb3JFYWNoIGV4cHI9e2ZzKFwiZm9yIHEgaW4gZGIubGFzdFNhbXBsZS50b3BGaXZlUXVlcmllc1wiKX0+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT17ZnMoXCJxLmVsYXBzZWRDbGFzc05hbWVcIil9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7ZnMoXCJxLmZvcm1hdEVsYXBzZWRcIil9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicG9wb3ZlciBsZWZ0XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBvcG92ZXItY29udGVudFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtmcyhcInEucXVlcnlcIil9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYXJyb3dcIj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgIDwvRm9yRWFjaD5cclxuICAgICAgICAgICAgPC90cj5cclxuICAgICAgICA8L0ZvckVhY2g+XHJcbiAgICAgICAgPC90Ym9keT5cclxuICAgIDwvdGFibGU+OyJdfQ==