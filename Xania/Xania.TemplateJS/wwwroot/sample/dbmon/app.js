"use strict";
var observables_1 = require("../../src/observables");
var xania_1 = require("../../src/xania");
var BufferedDispatcher = (function () {
    function BufferedDispatcher() {
        this.buffer = new Set();
    }
    BufferedDispatcher.prototype.dispatch = function (action) {
        this.buffer.add(action);
    };
    BufferedDispatcher.executeAction = function (action) {
        action.execute();
    };
    BufferedDispatcher.prototype.flush = function () {
        this.buffer.forEach(BufferedDispatcher.executeAction);
        this.buffer.clear();
    };
    return BufferedDispatcher;
}());
function bind(target) {
    var store = new xania_1.Store({
        time: new observables_1.Observables.Time(),
        message: "hello, dbmon",
        databases: ENV.generateData(true).toArray()
    }, {});
    view().bind(target, store);
    var load = function () {
        ENV.generateData(true);
        store.update();
        Monitoring.renderRate.ping();
        window.setTimeout(load, ENV.timeout);
    };
    load();
}
exports.bind = bind;
function view() {
    var view = xania_1.Xania.tag("table", { clazz: "table table-striped latest-data" },
        xania_1.Xania.tag("tbody", null,
            xania_1.Xania.tag(xania_1.ForEach, { expr: xania_1.fs("for db in databases") },
                xania_1.Xania.tag("tr", null,
                    xania_1.Xania.tag("td", { className: "dbname" }, xania_1.fs("db.dbname")),
                    xania_1.Xania.tag("td", { className: "query-count" },
                        xania_1.Xania.tag("span", { className: xania_1.fs("db.lastSample.countClassName") }, xania_1.fs("db.lastSample.nbQueries"))),
                    xania_1.Xania.tag(xania_1.ForEach, { expr: xania_1.fs("for q in db.lastSample.topFiveQueries") },
                        xania_1.Xania.tag("td", { className: xania_1.fs("q.elapsedClassName") },
                            xania_1.fs("q.formatElapsed"),
                            xania_1.Xania.tag("div", { className: "popover left" },
                                xania_1.Xania.tag("div", { className: "popover-content" }, xania_1.fs("q.query")),
                                xania_1.Xania.tag("div", { className: "arrow" }))))))));
    return view;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc2FtcGxlL2RibW9uL2FwcC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHFEQUFtRDtBQUVuRCx5Q0FBMkQ7QUFPM0Q7SUFBQTtRQUNZLFdBQU0sR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO0lBYS9CLENBQUM7SUFaRyxxQ0FBUSxHQUFSLFVBQVMsTUFBTTtRQUNYLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFTSxnQ0FBYSxHQUFwQixVQUFxQixNQUFNO1FBQ3ZCLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRUQsa0NBQUssR0FBTDtRQUNJLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3RELElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQUNMLHlCQUFDO0FBQUQsQ0FBQyxBQWRELElBY0M7QUFHRCxjQUFxQixNQUFZO0lBRzdCLElBQUksS0FBSyxHQUFHLElBQUksYUFBSyxDQUFDO1FBQ2QsSUFBSSxFQUFFLElBQUkseUJBQVcsQ0FBQyxJQUFJLEVBQUU7UUFDNUIsT0FBTyxFQUFFLGNBQWM7UUFDdkIsU0FBUyxFQUFFLEdBQUcsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFO0tBQzlDLEVBQ0QsRUFBRSxDQUFDLENBQUM7SUFDUixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRTNCLElBQUksSUFBSSxHQUFHO1FBQ1AsR0FBRyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV2QixLQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7UUF5QmYsVUFBVSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUM3QixNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDekMsQ0FBQyxDQUFDO0lBQ0YsSUFBSSxFQUFFLENBQUM7QUFFWCxDQUFDO0FBNUNELG9CQTRDQztBQUVEO0lBQ0ksSUFBSSxJQUFJLEdBQ0osNkJBQU8sS0FBSyxFQUFDLGlDQUFpQztRQUMxQztZQUNJLGtCQUFDLGVBQU8sSUFBQyxJQUFJLEVBQUUsVUFBRSxDQUFDLHFCQUFxQixDQUFDO2dCQUNwQztvQkFDSSwwQkFBSSxTQUFTLEVBQUMsUUFBUSxJQUNqQixVQUFFLENBQUMsV0FBVyxDQUFDLENBQ2Y7b0JBQ0wsMEJBQUksU0FBUyxFQUFDLGFBQWE7d0JBQ3ZCLDRCQUFNLFNBQVMsRUFBRSxVQUFFLENBQUMsOEJBQThCLENBQUMsSUFDOUMsVUFBRSxDQUFDLHlCQUF5QixDQUFDLENBQzNCLENBQ047b0JBQ0wsa0JBQUMsZUFBTyxJQUFDLElBQUksRUFBRSxVQUFFLENBQUMsdUNBQXVDLENBQUM7d0JBQ3RELDBCQUFJLFNBQVMsRUFBRSxVQUFFLENBQUMsb0JBQW9CLENBQUM7NEJBQ2xDLFVBQUUsQ0FBQyxpQkFBaUIsQ0FBQzs0QkFDdEIsMkJBQUssU0FBUyxFQUFDLGNBQWM7Z0NBQ3pCLDJCQUFLLFNBQVMsRUFBQyxpQkFBaUIsSUFDM0IsVUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUNaO2dDQUNOLDJCQUFLLFNBQVMsRUFBQyxPQUFPLEdBQU8sQ0FDM0IsQ0FDTCxDQUNDLENBQ1QsQ0FDQyxDQUNOLENBQ0osQ0FBQztJQUViLE1BQU0sQ0FBQyxJQUFXLENBQUM7QUFDdkIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGVzIH0gZnJvbSBcIi4uLy4uL3NyYy9vYnNlcnZhYmxlc1wiXHJcblxyXG5pbXBvcnQgeyBYYW5pYSwgRm9yRWFjaCwgZnMsIFN0b3JlIH0gZnJvbSBcIi4uLy4uL3NyYy94YW5pYVwiXHJcblxyXG4vLyBSZVNoYXJwZXIgZGlzYWJsZSBJbmNvbnNpc3RlbnROYW1pbmdcclxuZGVjbGFyZSB2YXIgRU5WO1xyXG5kZWNsYXJlIHZhciBNb25pdG9yaW5nO1xyXG4vLyBSZVNoYXJwZXIgcmVzdG9yZSBJbmNvbnNpc3RlbnROYW1pbmdcclxuXHJcbmNsYXNzIEJ1ZmZlcmVkRGlzcGF0Y2hlciB7XHJcbiAgICBwcml2YXRlIGJ1ZmZlciA9IG5ldyBTZXQoKTtcclxuICAgIGRpc3BhdGNoKGFjdGlvbikge1xyXG4gICAgICAgIHRoaXMuYnVmZmVyLmFkZChhY3Rpb24pO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBleGVjdXRlQWN0aW9uKGFjdGlvbikge1xyXG4gICAgICAgIGFjdGlvbi5leGVjdXRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZmx1c2goKSB7XHJcbiAgICAgICAgdGhpcy5idWZmZXIuZm9yRWFjaChCdWZmZXJlZERpc3BhdGNoZXIuZXhlY3V0ZUFjdGlvbik7XHJcbiAgICAgICAgdGhpcy5idWZmZXIuY2xlYXIoKTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBiaW5kKHRhcmdldDogTm9kZSkge1xyXG5cclxuICAgIC8vIHZhciBkaXNwYXRjaGVyID0gbmV3IEJ1ZmZlcmVkRGlzcGF0Y2hlcigpO1xyXG4gICAgdmFyIHN0b3JlID0gbmV3IFN0b3JlKHtcclxuICAgICAgICAgICAgdGltZTogbmV3IE9ic2VydmFibGVzLlRpbWUoKSxcclxuICAgICAgICAgICAgbWVzc2FnZTogXCJoZWxsbywgZGJtb25cIixcclxuICAgICAgICAgICAgZGF0YWJhc2VzOiBFTlYuZ2VuZXJhdGVEYXRhKHRydWUpLnRvQXJyYXkoKVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge30pO1xyXG4gICAgdmlldygpLmJpbmQodGFyZ2V0LCBzdG9yZSk7XHJcblxyXG4gICAgdmFyIGxvYWQgPSAoKSA9PiB7XHJcbiAgICAgICAgRU5WLmdlbmVyYXRlRGF0YSh0cnVlKTtcclxuXHJcbiAgICAgICAgc3RvcmUudXBkYXRlKCk7XHJcbiAgICAgICAgLy8gZGlzcGF0Y2hlci5mbHVzaCgpO1xyXG5cclxuICAgICAgICAvL2ZvciAodmFyIGkgPSAwOyBpIDwgMTAwOyBpKyspIHtcclxuICAgICAgICAvLyAgICB2YXIgJGRiID0gJGRhdGFiYXNlcy5nZXQoaSk7XHJcbiAgICAgICAgLy8gICAgdmFyICRsYXN0U2FtcGxlID0gJGRiLmdldChcImxhc3RTYW1wbGVcIik7XHJcbiAgICAgICAgLy8gICAgdmFyICRjb3VudENsYXNzTmFtZSA9ICRsYXN0U2FtcGxlLmdldChcImNvdW50Q2xhc3NOYW1lXCIpO1xyXG4gICAgICAgIC8vICAgIHZhciAkbmJRdWVyaWVzID0gJGxhc3RTYW1wbGUuZ2V0KFwibmJRdWVyaWVzXCIpO1xyXG4gICAgICAgIC8vICAgIHZhciAkdG9wRml2ZVF1ZXJpZXMgPSAkbGFzdFNhbXBsZS5nZXQoXCJ0b3BGaXZlUXVlcmllc1wiKTtcclxuXHJcbiAgICAgICAgLy8gICAgLy8gJGNvdW50Q2xhc3NOYW1lLnVwZGF0ZSgkZGIudmFsdWVbJ2NvdW50Q2xhc3NOYW1lJ10pO1xyXG4gICAgICAgIC8vICAgIC8vICRuYlF1ZXJpZXMudXBkYXRlKCRkYi52YWx1ZVsnbmJRdWVyaWVzJ10pO1xyXG5cclxuICAgICAgICAvLyAgICBmb3IgKHZhciBqID0gMDsgaiA8IDU7IGorKykge1xyXG4gICAgICAgIC8vICAgICAgICB2YXIgJHEgPSAkdG9wRml2ZVF1ZXJpZXMuZ2V0KGopO1xyXG5cclxuICAgICAgICAvLyAgICAgICAgdmFyIHEgPSAkcS52YWx1ZTtcclxuXHJcbiAgICAgICAgLy8gICAgICAgICRxLmdldCgnZWxhcHNlZENsYXNzTmFtZScpLnVwZGF0ZTIocSk7XHJcbiAgICAgICAgLy8gICAgICAgICRxLmdldCgnZm9ybWF0RWxhcHNlZCcpLnVwZGF0ZTIocSk7XHJcbiAgICAgICAgLy8gICAgICAgICRxLmdldChcInF1ZXJ5XCIpLnVwZGF0ZTIocSk7XHJcbiAgICAgICAgLy8gICAgfVxyXG5cclxuICAgICAgICAvL31cclxuXHJcbiAgICAgICAgTW9uaXRvcmluZy5yZW5kZXJSYXRlLnBpbmcoKTtcclxuICAgICAgICB3aW5kb3cuc2V0VGltZW91dChsb2FkLCBFTlYudGltZW91dCk7XHJcbiAgICB9O1xyXG4gICAgbG9hZCgpO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gdmlldygpIHtcclxuICAgIHZhciB2aWV3ID1cclxuICAgICAgICA8dGFibGUgY2xheno9XCJ0YWJsZSB0YWJsZS1zdHJpcGVkIGxhdGVzdC1kYXRhXCI+XHJcbiAgICAgICAgICAgIDx0Ym9keT5cclxuICAgICAgICAgICAgICAgIDxGb3JFYWNoIGV4cHI9e2ZzKFwiZm9yIGRiIGluIGRhdGFiYXNlc1wiKX0+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwiZGJuYW1lXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ZnMoXCJkYi5kYm5hbWVcIil9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJxdWVyeS1jb3VudFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtmcyhcImRiLmxhc3RTYW1wbGUuY291bnRDbGFzc05hbWVcIil9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtmcyhcImRiLmxhc3RTYW1wbGUubmJRdWVyaWVzXCIpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Rm9yRWFjaCBleHByPXtmcyhcImZvciBxIGluIGRiLmxhc3RTYW1wbGUudG9wRml2ZVF1ZXJpZXNcIil9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT17ZnMoXCJxLmVsYXBzZWRDbGFzc05hbWVcIil9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtmcyhcInEuZm9ybWF0RWxhcHNlZFwiKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBvcG92ZXIgbGVmdFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBvcG92ZXItY29udGVudFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2ZzKFwicS5xdWVyeVwiKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYXJyb3dcIj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvRm9yRWFjaD5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgPC9Gb3JFYWNoPlxyXG4gICAgICAgICAgICA8L3Rib2R5PlxyXG4gICAgICAgIDwvdGFibGU+O1xyXG5cclxuICAgIHJldHVybiB2aWV3IGFzIGFueTtcclxufSJdfQ==