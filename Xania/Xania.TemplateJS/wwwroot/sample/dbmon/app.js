"use strict";
var observables_1 = require("../../src/observables");
var xania_1 = require("../../src/xania");
var BufferedDispatcher = (function () {
    function BufferedDispatcher() {
        this.buffer = new Set();
    }
    BufferedDispatcher.prototype.dispatch = function (action) {
        this.buffer.add(action);
    };
    BufferedDispatcher.executeAction = function (action) {
        action.execute();
    };
    BufferedDispatcher.prototype.flush = function () {
        this.buffer.forEach(BufferedDispatcher.executeAction);
        this.buffer.clear();
    };
    return BufferedDispatcher;
}());
function bind(target) {
    var dispatcher = new BufferedDispatcher();
    var store = new xania_1.Store({
        time: new observables_1.Observables.Time(),
        message: "hello, dbmon",
        databases: ENV.generateData(true).toArray()
    }, {}, dispatcher);
    view().bind(target, store);
    var load = function () {
        ENV.generateData(true);
        store.update();
        dispatcher.flush();
        Monitoring.renderRate.ping();
        window.setTimeout(load, ENV.timeout);
    };
    load();
}
exports.bind = bind;
function view() {
    var view = xania_1.Xania.tag("table", { clazz: "table table-striped latest-data" },
        xania_1.Xania.tag("tbody", null,
            xania_1.Xania.tag(xania_1.ForEach, { expr: xania_1.fs("for db in databases") },
                xania_1.Xania.tag("tr", null,
                    xania_1.Xania.tag("td", { className: "dbname" }, xania_1.fs("db.dbname")),
                    xania_1.Xania.tag("td", { className: "query-count" },
                        xania_1.Xania.tag("span", { className: xania_1.fs("db.lastSample.countClassName") }, xania_1.fs("db.lastSample.nbQueries"))),
                    xania_1.Xania.tag(xania_1.ForEach, { expr: xania_1.fs("for q in db.lastSample.topFiveQueries") },
                        xania_1.Xania.tag("td", { className: xania_1.fs("q.elapsedClassName") },
                            xania_1.fs("q.formatElapsed"),
                            xania_1.Xania.tag("div", { className: "popover left" },
                                xania_1.Xania.tag("div", { className: "popover-content" }, xania_1.fs("q.query")),
                                xania_1.Xania.tag("div", { className: "arrow" }))))))));
    return view;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc2FtcGxlL2RibW9uL2FwcC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHFEQUFtRDtBQUVuRCx5Q0FBMkQ7QUFPM0Q7SUFBQTtRQUNZLFdBQU0sR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO0lBYS9CLENBQUM7SUFaRyxxQ0FBUSxHQUFSLFVBQVMsTUFBTTtRQUNYLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFTSxnQ0FBYSxHQUFwQixVQUFxQixNQUFNO1FBQ3ZCLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRUQsa0NBQUssR0FBTDtRQUNJLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3RELElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQUNMLHlCQUFDO0FBQUQsQ0FBQyxBQWRELElBY0M7QUFHRCxjQUFxQixNQUFZO0lBRTdCLElBQUksVUFBVSxHQUFHLElBQUksa0JBQWtCLEVBQUUsQ0FBQztJQUMxQyxJQUFJLEtBQUssR0FBRyxJQUFJLGFBQUssQ0FBQztRQUNkLElBQUksRUFBRSxJQUFJLHlCQUFXLENBQUMsSUFBSSxFQUFFO1FBQzVCLE9BQU8sRUFBRSxjQUFjO1FBQ3ZCLFNBQVMsRUFBRSxHQUFHLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRTtLQUM5QyxFQUNELEVBQUUsRUFDRixVQUFVLENBQUMsQ0FBQztJQUNoQixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRTNCLElBQUksSUFBSSxHQUFHO1FBQ1AsR0FBRyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV2QixLQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDZixVQUFVLENBQUMsS0FBSyxFQUFFLENBQUM7UUF3Qm5CLFVBQVUsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDN0IsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3pDLENBQUMsQ0FBQztJQUNGLElBQUksRUFBRSxDQUFDO0FBRVgsQ0FBQztBQTdDRCxvQkE2Q0M7QUFFRDtJQUNJLElBQUksSUFBSSxHQUNKLDZCQUFPLEtBQUssRUFBQyxpQ0FBaUM7UUFDMUM7WUFDSSxrQkFBQyxlQUFPLElBQUMsSUFBSSxFQUFFLFVBQUUsQ0FBQyxxQkFBcUIsQ0FBQztnQkFDcEM7b0JBQ0ksMEJBQUksU0FBUyxFQUFDLFFBQVEsSUFDakIsVUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUNmO29CQUNMLDBCQUFJLFNBQVMsRUFBQyxhQUFhO3dCQUN2Qiw0QkFBTSxTQUFTLEVBQUUsVUFBRSxDQUFDLDhCQUE4QixDQUFDLElBQzlDLFVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxDQUMzQixDQUNOO29CQUNMLGtCQUFDLGVBQU8sSUFBQyxJQUFJLEVBQUUsVUFBRSxDQUFDLHVDQUF1QyxDQUFDO3dCQUN0RCwwQkFBSSxTQUFTLEVBQUUsVUFBRSxDQUFDLG9CQUFvQixDQUFDOzRCQUNsQyxVQUFFLENBQUMsaUJBQWlCLENBQUM7NEJBQ3RCLDJCQUFLLFNBQVMsRUFBQyxjQUFjO2dDQUN6QiwyQkFBSyxTQUFTLEVBQUMsaUJBQWlCLElBQzNCLFVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FDWjtnQ0FDTiwyQkFBSyxTQUFTLEVBQUMsT0FBTyxHQUFPLENBQzNCLENBQ0wsQ0FDQyxDQUNULENBQ0MsQ0FDTixDQUNKLENBQUM7SUFFYixNQUFNLENBQUMsSUFBVyxDQUFDO0FBQ3ZCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlcyB9IGZyb20gXCIuLi8uLi9zcmMvb2JzZXJ2YWJsZXNcIlxyXG5cclxuaW1wb3J0IHsgWGFuaWEsIEZvckVhY2gsIGZzLCBTdG9yZSB9IGZyb20gXCIuLi8uLi9zcmMveGFuaWFcIlxyXG5cclxuLy8gUmVTaGFycGVyIGRpc2FibGUgSW5jb25zaXN0ZW50TmFtaW5nXHJcbmRlY2xhcmUgdmFyIEVOVjtcclxuZGVjbGFyZSB2YXIgTW9uaXRvcmluZztcclxuLy8gUmVTaGFycGVyIHJlc3RvcmUgSW5jb25zaXN0ZW50TmFtaW5nXHJcblxyXG5jbGFzcyBCdWZmZXJlZERpc3BhdGNoZXIge1xyXG4gICAgcHJpdmF0ZSBidWZmZXIgPSBuZXcgU2V0KCk7XHJcbiAgICBkaXNwYXRjaChhY3Rpb24pIHtcclxuICAgICAgICB0aGlzLmJ1ZmZlci5hZGQoYWN0aW9uKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZXhlY3V0ZUFjdGlvbihhY3Rpb24pIHtcclxuICAgICAgICBhY3Rpb24uZXhlY3V0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGZsdXNoKCkge1xyXG4gICAgICAgIHRoaXMuYnVmZmVyLmZvckVhY2goQnVmZmVyZWREaXNwYXRjaGVyLmV4ZWN1dGVBY3Rpb24pO1xyXG4gICAgICAgIHRoaXMuYnVmZmVyLmNsZWFyKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYmluZCh0YXJnZXQ6IE5vZGUpIHtcclxuXHJcbiAgICB2YXIgZGlzcGF0Y2hlciA9IG5ldyBCdWZmZXJlZERpc3BhdGNoZXIoKTtcclxuICAgIHZhciBzdG9yZSA9IG5ldyBTdG9yZSh7XHJcbiAgICAgICAgICAgIHRpbWU6IG5ldyBPYnNlcnZhYmxlcy5UaW1lKCksXHJcbiAgICAgICAgICAgIG1lc3NhZ2U6IFwiaGVsbG8sIGRibW9uXCIsXHJcbiAgICAgICAgICAgIGRhdGFiYXNlczogRU5WLmdlbmVyYXRlRGF0YSh0cnVlKS50b0FycmF5KClcclxuICAgICAgICB9LFxyXG4gICAgICAgIHt9LFxyXG4gICAgICAgIGRpc3BhdGNoZXIpO1xyXG4gICAgdmlldygpLmJpbmQodGFyZ2V0LCBzdG9yZSk7XHJcblxyXG4gICAgdmFyIGxvYWQgPSAoKSA9PiB7XHJcbiAgICAgICAgRU5WLmdlbmVyYXRlRGF0YSh0cnVlKTtcclxuXHJcbiAgICAgICAgc3RvcmUudXBkYXRlKCk7XHJcbiAgICAgICAgZGlzcGF0Y2hlci5mbHVzaCgpO1xyXG5cclxuICAgICAgICAvL2ZvciAodmFyIGkgPSAwOyBpIDwgMTAwOyBpKyspIHtcclxuICAgICAgICAvLyAgICB2YXIgJGRiID0gJGRhdGFiYXNlcy5nZXQoaSk7XHJcbiAgICAgICAgLy8gICAgdmFyICRsYXN0U2FtcGxlID0gJGRiLmdldChcImxhc3RTYW1wbGVcIik7XHJcbiAgICAgICAgLy8gICAgdmFyICRjb3VudENsYXNzTmFtZSA9ICRsYXN0U2FtcGxlLmdldChcImNvdW50Q2xhc3NOYW1lXCIpO1xyXG4gICAgICAgIC8vICAgIHZhciAkbmJRdWVyaWVzID0gJGxhc3RTYW1wbGUuZ2V0KFwibmJRdWVyaWVzXCIpO1xyXG4gICAgICAgIC8vICAgIHZhciAkdG9wRml2ZVF1ZXJpZXMgPSAkbGFzdFNhbXBsZS5nZXQoXCJ0b3BGaXZlUXVlcmllc1wiKTtcclxuXHJcbiAgICAgICAgLy8gICAgLy8gJGNvdW50Q2xhc3NOYW1lLnVwZGF0ZSgkZGIudmFsdWVbJ2NvdW50Q2xhc3NOYW1lJ10pO1xyXG4gICAgICAgIC8vICAgIC8vICRuYlF1ZXJpZXMudXBkYXRlKCRkYi52YWx1ZVsnbmJRdWVyaWVzJ10pO1xyXG5cclxuICAgICAgICAvLyAgICBmb3IgKHZhciBqID0gMDsgaiA8IDU7IGorKykge1xyXG4gICAgICAgIC8vICAgICAgICB2YXIgJHEgPSAkdG9wRml2ZVF1ZXJpZXMuZ2V0KGopO1xyXG5cclxuICAgICAgICAvLyAgICAgICAgdmFyIHEgPSAkcS52YWx1ZTtcclxuXHJcbiAgICAgICAgLy8gICAgICAgICRxLmdldCgnZWxhcHNlZENsYXNzTmFtZScpLnVwZGF0ZTIocSk7XHJcbiAgICAgICAgLy8gICAgICAgICRxLmdldCgnZm9ybWF0RWxhcHNlZCcpLnVwZGF0ZTIocSk7XHJcbiAgICAgICAgLy8gICAgICAgICRxLmdldChcInF1ZXJ5XCIpLnVwZGF0ZTIocSk7XHJcbiAgICAgICAgLy8gICAgfVxyXG5cclxuICAgICAgICAvL31cclxuXHJcbiAgICAgICAgTW9uaXRvcmluZy5yZW5kZXJSYXRlLnBpbmcoKTtcclxuICAgICAgICB3aW5kb3cuc2V0VGltZW91dChsb2FkLCBFTlYudGltZW91dCk7XHJcbiAgICB9O1xyXG4gICAgbG9hZCgpO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gdmlldygpIHtcclxuICAgIHZhciB2aWV3ID1cclxuICAgICAgICA8dGFibGUgY2xheno9XCJ0YWJsZSB0YWJsZS1zdHJpcGVkIGxhdGVzdC1kYXRhXCI+XHJcbiAgICAgICAgICAgIDx0Ym9keT5cclxuICAgICAgICAgICAgICAgIDxGb3JFYWNoIGV4cHI9e2ZzKFwiZm9yIGRiIGluIGRhdGFiYXNlc1wiKX0+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwiZGJuYW1lXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ZnMoXCJkYi5kYm5hbWVcIil9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJxdWVyeS1jb3VudFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtmcyhcImRiLmxhc3RTYW1wbGUuY291bnRDbGFzc05hbWVcIil9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtmcyhcImRiLmxhc3RTYW1wbGUubmJRdWVyaWVzXCIpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Rm9yRWFjaCBleHByPXtmcyhcImZvciBxIGluIGRiLmxhc3RTYW1wbGUudG9wRml2ZVF1ZXJpZXNcIil9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT17ZnMoXCJxLmVsYXBzZWRDbGFzc05hbWVcIil9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtmcyhcInEuZm9ybWF0RWxhcHNlZFwiKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBvcG92ZXIgbGVmdFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBvcG92ZXItY29udGVudFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2ZzKFwicS5xdWVyeVwiKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYXJyb3dcIj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvRm9yRWFjaD5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgPC9Gb3JFYWNoPlxyXG4gICAgICAgICAgICA8L3Rib2R5PlxyXG4gICAgICAgIDwvdGFibGU+O1xyXG5cclxuICAgIHJldHVybiB2aWV3IGFzIGFueTtcclxufSJdfQ==