"use strict";
var xania_1 = require("../../src/xania");
function run(target) {
    var state = {
        databases: ENV.generateData(true).toArray()
    };
    var store = new xania_1.Reactive.Store(state);
    dbmon(xania_1.Xania)
        .bind(xania_1.Dom.DomVisitor)
        .update(store, new xania_1.Dom.DomDriver(target));
    var load = function () {
        ENV.generateData(true);
        store.refresh();
        Monitoring.renderRate.ping();
        window.setTimeout(load, ENV.timeout);
    };
    load();
}
exports.run = run;
var dbmon = function (xania) {
    return xania.tag("table", { clazz: "table table-striped latest-data" },
        xania.tag("tbody", null, xania_1.query("databases").map(xania.tag("tr", null,
            xania.tag("td", { className: "dbname" }, xania_1.text("dbname")),
            xania.tag("td", { className: "query-count" },
                xania.tag("span", { className: xania_1.text("lastSample.countClassName") }, xania_1.text("lastSample.nbQueries"))),
            xania_1.query("lastSample.topFiveQueries").map(xania.tag("td", { className: xania_1.text("elapsedClassName") },
                xania_1.text("formatElapsed"),
                xania.tag("div", { className: "popover left" },
                    xania.tag("div", { className: "popover-content" }, xania_1.text("query")),
                    xania.tag("div", { className: "arrow" }))))))));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBwLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEseUNBQWtGO0FBUWxGLGFBQW9CLE1BQVk7SUFFNUIsSUFBSSxLQUFLLEdBQUc7UUFDUixTQUFTLEVBQUUsR0FBRyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUU7S0FDOUMsQ0FBQztJQUNGLElBQUksS0FBSyxHQUFHLElBQUksZ0JBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFaEMsS0FBSyxDQUFDLGFBQUssQ0FBQztTQUNQLElBQUksQ0FBQyxXQUFHLENBQUMsVUFBVSxDQUFDO1NBQ3BCLE1BQU0sQ0FBQyxLQUFLLEVBQUUsSUFBSSxXQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFFOUMsSUFBSSxJQUFJLEdBQUc7UUFDUCxHQUFHLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZCLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUVoQixVQUFVLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzdCLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN6QyxDQUFDLENBQUM7SUFDRixJQUFJLEVBQUUsQ0FBQztBQUVYLENBQUM7QUFwQkQsa0JBb0JDO0FBRUQsSUFBSSxLQUFLLEdBQVEsVUFBQyxLQUFLO0lBQ25CLE9BQUEscUJBQU8sS0FBSyxFQUFDLGlDQUFpQztRQUMxQyx5QkFDSyxhQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsR0FBRyxDQUNuQjtZQUNJLGtCQUFJLFNBQVMsRUFBQyxRQUFRLElBQ2pCLFlBQUksQ0FBQyxRQUFRLENBQUMsQ0FDZDtZQUNMLGtCQUFJLFNBQVMsRUFBQyxhQUFhO2dCQUN2QixvQkFBTSxTQUFTLEVBQUUsWUFBSSxDQUFDLDJCQUEyQixDQUFDLElBQzdDLFlBQUksQ0FBQyxzQkFBc0IsQ0FBQyxDQUMxQixDQUNOO1lBQ0osYUFBSyxDQUFDLDJCQUEyQixDQUFDLENBQUMsR0FBRyxDQUNuQyxrQkFBSSxTQUFTLEVBQUUsWUFBSSxDQUFDLGtCQUFrQixDQUFDO2dCQUNsQyxZQUFJLENBQUMsZUFBZSxDQUFDO2dCQUN0QixtQkFBSyxTQUFTLEVBQUMsY0FBYztvQkFDekIsbUJBQUssU0FBUyxFQUFDLGlCQUFpQixJQUMzQixZQUFJLENBQUMsT0FBTyxDQUFDLENBQ1o7b0JBQ04sbUJBQUssU0FBUyxFQUFDLE9BQU8sR0FBTyxDQUMzQixDQUNMLENBQ1IsQ0FDQSxDQUNSLENBQ0csQ0FDSjtBQTFCUixDQTBCUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgWGFuaWEsIEZvckVhY2gsIHF1ZXJ5LCB0ZXh0LCBSZWFjdGl2ZSBhcyBSZSwgRG9tIH0gZnJvbSBcIi4uLy4uL3NyYy94YW5pYVwiXHJcblxyXG4vLyBSZVNoYXJwZXIgZGlzYWJsZSBJbmNvbnNpc3RlbnROYW1pbmdcclxuZGVjbGFyZSB2YXIgRU5WO1xyXG5kZWNsYXJlIHZhciBNb25pdG9yaW5nO1xyXG4vLyBSZVNoYXJwZXIgcmVzdG9yZSBJbmNvbnNpc3RlbnROYW1pbmdcclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcnVuKHRhcmdldDogTm9kZSkge1xyXG5cclxuICAgIHZhciBzdGF0ZSA9IHtcclxuICAgICAgICBkYXRhYmFzZXM6IEVOVi5nZW5lcmF0ZURhdGEodHJ1ZSkudG9BcnJheSgpXHJcbiAgICB9O1xyXG4gICAgdmFyIHN0b3JlID0gbmV3IFJlLlN0b3JlKHN0YXRlKTtcclxuXHJcbiAgICBkYm1vbihYYW5pYSlcclxuICAgICAgICAuYmluZChEb20uRG9tVmlzaXRvcilcclxuICAgICAgICAudXBkYXRlKHN0b3JlLCBuZXcgRG9tLkRvbURyaXZlcih0YXJnZXQpKTtcclxuXHJcbiAgICB2YXIgbG9hZCA9ICgpID0+IHtcclxuICAgICAgICBFTlYuZ2VuZXJhdGVEYXRhKHRydWUpO1xyXG4gICAgICAgIHN0b3JlLnJlZnJlc2goKTtcclxuXHJcbiAgICAgICAgTW9uaXRvcmluZy5yZW5kZXJSYXRlLnBpbmcoKTtcclxuICAgICAgICB3aW5kb3cuc2V0VGltZW91dChsb2FkLCBFTlYudGltZW91dCk7XHJcbiAgICB9O1xyXG4gICAgbG9hZCgpO1xyXG5cclxufVxyXG5cclxudmFyIGRibW9uOiBhbnkgPSAoeGFuaWEpID0+XHJcbiAgICA8dGFibGUgY2xheno9XCJ0YWJsZSB0YWJsZS1zdHJpcGVkIGxhdGVzdC1kYXRhXCI+XHJcbiAgICAgICAgPHRib2R5PlxyXG4gICAgICAgICAgICB7cXVlcnkoXCJkYXRhYmFzZXNcIikubWFwKFxyXG4gICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJkYm5hbWVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAge3RleHQoXCJkYm5hbWVcIil9XHJcbiAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicXVlcnktY291bnRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXt0ZXh0KFwibGFzdFNhbXBsZS5jb3VudENsYXNzTmFtZVwiKX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dGV4dChcImxhc3RTYW1wbGUubmJRdWVyaWVzXCIpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICB7cXVlcnkoXCJsYXN0U2FtcGxlLnRvcEZpdmVRdWVyaWVzXCIpLm1hcChcclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT17dGV4dChcImVsYXBzZWRDbGFzc05hbWVcIil9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3RleHQoXCJmb3JtYXRFbGFwc2VkXCIpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwb3BvdmVyIGxlZnRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBvcG92ZXItY29udGVudFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dGV4dChcInF1ZXJ5XCIpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYXJyb3dcIj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICl9XHJcbiAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICApfVxyXG4gICAgICAgIDwvdGJvZHk+XHJcbiAgICA8L3RhYmxlPjsiXX0=