"use strict";
var xania_1 = require("../../src/xania");
function run(target) {
    var tracks = {};
    var state = {
        databases: ENV.generateData().toArray(),
        trackByIndex: function (key, stream) {
            var list;
            if (key in tracks) {
                list = tracks[key];
            }
            else {
                tracks[key] = list = [];
            }
            for (var i = 0; i < stream.length; i++) {
                if (i in list) {
                    var src = stream[i];
                    var dest = list[i];
                    dest.db = src.db;
                }
                else
                    list[i] = stream[i];
            }
            list.length = stream.length;
            return list;
        }
    };
    var store = new xania_1.Reactive.Store(state);
    dbmon(xania_1.Xania)
        .bind(xania_1.Dom.DomVisitor)
        .update(store, new xania_1.Dom.DomDriver(target));
    var load = function () {
        state.databases = ENV.generateData().toArray();
        store.refresh();
        Monitoring.renderRate.ping();
        window.setTimeout(load, ENV.timeout);
    };
    load();
}
exports.run = run;
var dbmon = function (xania) {
    return xania.tag("table", { clazz: "table table-striped latest-data" },
        xania.tag("tbody", null,
            xania.tag(xania_1.ForEach, { expr: xania_1.query("for db in (trackByIndex 'db' databases)") },
                xania.tag("tr", null,
                    xania.tag("td", { className: "dbname" }, xania_1.query("db.dbname")),
                    xania.tag("td", { className: "query-count" },
                        xania.tag("span", { className: xania_1.query("db.lastSample.countClassName") }, xania_1.query("db.lastSample.nbQueries"))),
                    xania.tag(xania_1.ForEach, { expr: xania_1.query("for q in (trackByIndex 'q' db.lastSample.topFiveQueries)") },
                        xania.tag("td", { className: xania_1.query("q.elapsedClassName") },
                            xania_1.query("q.formatElapsed"),
                            xania.tag("div", { className: "popover left" },
                                xania.tag("div", { className: "popover-content" }, xania_1.query("q.query")),
                                xania.tag("div", { className: "arrow" }))))))));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBwLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEseUNBQTRFO0FBUTVFLGFBQW9CLE1BQVk7SUFFNUIsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO0lBRWhCLElBQUksS0FBSyxHQUFHO1FBQ1IsU0FBUyxFQUFFLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxPQUFPLEVBQUU7UUFDdkMsWUFBWSxZQUFDLEdBQUcsRUFBRSxNQUFNO1lBQ3BCLElBQUksSUFBVyxDQUFDO1lBQ2hCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDO2dCQUNoQixJQUFJLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3ZCLENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDSixNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztZQUM1QixDQUFDO1lBQ0QsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7Z0JBQ3JDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO29CQUNaLElBQUksR0FBRyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDcEIsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNuQixJQUFJLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLENBQUM7Z0JBQ3JCLENBQUM7Z0JBQUMsSUFBSTtvQkFDRixJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzVCLENBQUM7WUFDRCxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7WUFFNUIsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNoQixDQUFDO0tBQ0osQ0FBQztJQUNGLElBQUksS0FBSyxHQUFHLElBQUksZ0JBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFaEMsS0FBSyxDQUFDLGFBQUssQ0FBQztTQUNQLElBQUksQ0FBQyxXQUFHLENBQUMsVUFBVSxDQUFDO1NBQ3BCLE1BQU0sQ0FBQyxLQUFLLEVBQUUsSUFBSSxXQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFFOUMsSUFBSSxJQUFJLEdBQUc7UUFDUCxLQUFLLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUMvQyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7UUFFaEIsVUFBVSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUM3QixNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDekMsQ0FBQyxDQUFDO0lBQ0YsSUFBSSxFQUFFLENBQUM7QUFFWCxDQUFDO0FBekNELGtCQXlDQztBQUVELElBQUksS0FBSyxHQUFRLFVBQUMsS0FBSztJQUNuQixPQUFBLHFCQUFPLEtBQUssRUFBQyxpQ0FBaUM7UUFDMUM7WUFDQSxVQUFDLGVBQU8sSUFBQyxJQUFJLEVBQUUsYUFBSyxDQUFDLHlDQUF5QyxDQUFDO2dCQUMzRDtvQkFDSSxrQkFBSSxTQUFTLEVBQUMsUUFBUSxJQUNqQixhQUFLLENBQUMsV0FBVyxDQUFDLENBQ2xCO29CQUNMLGtCQUFJLFNBQVMsRUFBQyxhQUFhO3dCQUN2QixvQkFBTSxTQUFTLEVBQUUsYUFBSyxDQUFDLDhCQUE4QixDQUFDLElBQ2pELGFBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUM5QixDQUNOO29CQUNMLFVBQUMsZUFBTyxJQUFDLElBQUksRUFBRSxhQUFLLENBQUMsMERBQTBELENBQUM7d0JBQzVFLGtCQUFJLFNBQVMsRUFBRSxhQUFLLENBQUMsb0JBQW9CLENBQUM7NEJBQ3JDLGFBQUssQ0FBQyxpQkFBaUIsQ0FBQzs0QkFDekIsbUJBQUssU0FBUyxFQUFDLGNBQWM7Z0NBQ3pCLG1CQUFLLFNBQVMsRUFBQyxpQkFBaUIsSUFDM0IsYUFBSyxDQUFDLFNBQVMsQ0FBQyxDQUNmO2dDQUNOLG1CQUFLLFNBQVMsRUFBQyxPQUFPLEdBQU8sQ0FDM0IsQ0FDTCxDQUNDLENBQ1QsQ0FDQyxDQUNGLENBQ0o7QUExQlIsQ0EwQlEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFhhbmlhLCBGb3JFYWNoLCBxdWVyeSwgUmVhY3RpdmUgYXMgUmUsIERvbSB9IGZyb20gXCIuLi8uLi9zcmMveGFuaWFcIlxyXG5cclxuLy8gUmVTaGFycGVyIGRpc2FibGUgSW5jb25zaXN0ZW50TmFtaW5nXHJcbmRlY2xhcmUgdmFyIEVOVjtcclxuZGVjbGFyZSB2YXIgTW9uaXRvcmluZztcclxuLy8gUmVTaGFycGVyIHJlc3RvcmUgSW5jb25zaXN0ZW50TmFtaW5nXHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJ1bih0YXJnZXQ6IE5vZGUpIHtcclxuXHJcbiAgICB2YXIgdHJhY2tzID0ge307XHJcblxyXG4gICAgdmFyIHN0YXRlID0ge1xyXG4gICAgICAgIGRhdGFiYXNlczogRU5WLmdlbmVyYXRlRGF0YSgpLnRvQXJyYXkoKSxcclxuICAgICAgICB0cmFja0J5SW5kZXgoa2V5LCBzdHJlYW0pIHtcclxuICAgICAgICAgICAgbGV0IGxpc3Q6IGFueVtdO1xyXG4gICAgICAgICAgICBpZiAoa2V5IGluIHRyYWNrcykge1xyXG4gICAgICAgICAgICAgICAgbGlzdCA9IHRyYWNrc1trZXldO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdHJhY2tzW2tleV0gPSBsaXN0ID0gW107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHJlYW0ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChpIGluIGxpc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc3JjID0gc3RyZWFtW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkZXN0ID0gbGlzdFtpXTtcclxuICAgICAgICAgICAgICAgICAgICBkZXN0LmRiID0gc3JjLmRiO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgbGlzdFtpXSA9IHN0cmVhbVtpXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsaXN0Lmxlbmd0aCA9IHN0cmVhbS5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gbGlzdDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgdmFyIHN0b3JlID0gbmV3IFJlLlN0b3JlKHN0YXRlKTtcclxuXHJcbiAgICBkYm1vbihYYW5pYSlcclxuICAgICAgICAuYmluZChEb20uRG9tVmlzaXRvcilcclxuICAgICAgICAudXBkYXRlKHN0b3JlLCBuZXcgRG9tLkRvbURyaXZlcih0YXJnZXQpKTtcclxuXHJcbiAgICB2YXIgbG9hZCA9ICgpID0+IHtcclxuICAgICAgICBzdGF0ZS5kYXRhYmFzZXMgPSBFTlYuZ2VuZXJhdGVEYXRhKCkudG9BcnJheSgpO1xyXG4gICAgICAgIHN0b3JlLnJlZnJlc2goKTtcclxuXHJcbiAgICAgICAgTW9uaXRvcmluZy5yZW5kZXJSYXRlLnBpbmcoKTtcclxuICAgICAgICB3aW5kb3cuc2V0VGltZW91dChsb2FkLCBFTlYudGltZW91dCk7XHJcbiAgICB9O1xyXG4gICAgbG9hZCgpO1xyXG5cclxufVxyXG5cclxudmFyIGRibW9uOiBhbnkgPSAoeGFuaWEpID0+XHJcbiAgICA8dGFibGUgY2xheno9XCJ0YWJsZSB0YWJsZS1zdHJpcGVkIGxhdGVzdC1kYXRhXCI+XHJcbiAgICAgICAgPHRib2R5PlxyXG4gICAgICAgIDxGb3JFYWNoIGV4cHI9e3F1ZXJ5KFwiZm9yIGRiIGluICh0cmFja0J5SW5kZXggJ2RiJyBkYXRhYmFzZXMpXCIpfT5cclxuICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cImRibmFtZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIHtxdWVyeShcImRiLmRibmFtZVwiKX1cclxuICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwicXVlcnktY291bnRcIj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9e3F1ZXJ5KFwiZGIubGFzdFNhbXBsZS5jb3VudENsYXNzTmFtZVwiKX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtxdWVyeShcImRiLmxhc3RTYW1wbGUubmJRdWVyaWVzXCIpfVxyXG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICA8Rm9yRWFjaCBleHByPXtxdWVyeShcImZvciBxIGluICh0cmFja0J5SW5kZXggJ3EnIGRiLmxhc3RTYW1wbGUudG9wRml2ZVF1ZXJpZXMpXCIpfT5cclxuICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPXtxdWVyeShcInEuZWxhcHNlZENsYXNzTmFtZVwiKX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtxdWVyeShcInEuZm9ybWF0RWxhcHNlZFwiKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwb3BvdmVyIGxlZnRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicG9wb3Zlci1jb250ZW50XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3F1ZXJ5KFwicS5xdWVyeVwiKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhcnJvd1wiPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgPC9Gb3JFYWNoPlxyXG4gICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgIDwvRm9yRWFjaD5cclxuICAgICAgICA8L3Rib2R5PlxyXG4gICAgPC90YWJsZT47Il19