"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var reactive_1 = require("../src/reactive");
var fsharp_1 = require("../src/fsharp");
var observables_1 = require("../src/observables");
var ibrahim = {
    age: 36,
    firstName: "Ibrahim",
    lastName: "ben Salah",
    adult: true
};
describe("fsharp parser", function () {
    it(':: fun x -> x ', function () {
        var ast = fsharp_1.fsharp("fun x -> x");
        expect(ast).toBeDefined();
        var compose = ast;
        expect(compose.type).toBe("lambda");
        expect(compose.param).toBe("x");
        expect(compose.body.name).toBe("x");
    });
    it(':: .firstName ', function () {
        var ast = fsharp_1.fsharp(".firstName");
        expect(ast).toBeDefined();
        var compose = ast;
        expect(compose.type).toBe("lambda");
        expect(compose.param).toBe("x");
        expect(compose.body.target.name).toBe("x");
        expect(compose.body.member.name).toBe("firstName");
    });
    it(':: 1 + 2', function () {
        var ast = fsharp_1.fsharp("1 + 2");
        expect(ast).toBeDefined();
        var expr = ast;
        expect(expr.type).toBe(fsharp_1.TOKENS.BINARY);
    });
    it(':: fn a', function () {
        var ast = fsharp_1.fsharp("fun a");
        expect(ast).toBeDefined();
        var expr = ast;
        expect(expr.type).toBe(fsharp_1.TOKENS.APP);
        expect(expr.fun).toEqual({ type: fsharp_1.TOKENS.IDENT, name: 'fun' });
        expect(expr.args).toEqual([{ type: fsharp_1.TOKENS.IDENT, name: "a" }]);
    });
    it(':: fn ()', function () {
        var ast = fsharp_1.fsharp("fun ()");
        expect(ast).toBeDefined();
        var expr = ast;
        expect(expr.type).toBe(fsharp_1.TOKENS.APP);
        expect(expr.fun).toEqual({ type: fsharp_1.TOKENS.IDENT, name: 'fun' });
        expect(expr.args.length).toBe(0);
    });
    it(':: (+) a b', function () {
        var ast = fsharp_1.fsharp("(+) a b");
        expect(ast).toBeDefined();
        var expr = ast;
        expect(expr).toEqual({ "type": fsharp_1.TOKENS.APP, "fun": "+", "args": [{ "type": fsharp_1.TOKENS.IDENT, "name": "a" }, { "type": fsharp_1.TOKENS.IDENT, "name": "b" }] });
    });
    it(':: a |> b |> c', function () {
        var ast = fsharp_1.fsharp("a |> b |> c");
        expect(ast).toBeDefined();
        var pipe1 = ast;
        expect(pipe1.type).toBe(fsharp_1.TOKENS.BINARY);
        expect(pipe1.op).toBe("|>");
        expect(pipe1.right).toEqual({ "type": fsharp_1.TOKENS.IDENT, "name": "c" });
        var pipe2 = pipe1.left;
        expect(pipe2.type).toBe(fsharp_1.TOKENS.BINARY);
        expect(pipe2.op).toBe("|>");
        expect(pipe2.right).toEqual({ "type": fsharp_1.TOKENS.IDENT, "name": "b" });
        expect(pipe2.left).toEqual({ "type": fsharp_1.TOKENS.IDENT, "name": "a" });
    });
    it(':: a + b |> c', function () {
        var ast = fsharp_1.fsharp("a + b |> c");
        expect(ast).toBeDefined();
        var pipe = ast;
        expect(pipe.type).toBe(fsharp_1.TOKENS.BINARY);
        expect(pipe.op).toBe("|>");
        expect(pipe.right).toEqual({ type: fsharp_1.TOKENS.IDENT, name: "c" });
        var add = pipe.left;
        expect(add.right.name).toBe("b");
        expect(add.left.name).toBe("a");
    });
    it(':: a >> b ', function () {
        var ast = fsharp_1.fsharp("a >> b");
        expect(ast).toBeDefined();
        var compose = ast;
        expect(compose.type).toBe(fsharp_1.TOKENS.COMPOSE, JSON.stringify(ast, null, 2));
        expect(compose.fun).toBe(">>", JSON.stringify(ast, null, 2));
        expect(compose.args[0].name).toBe("b", JSON.stringify(compose.args[0], null, 2));
        expect(compose.args[1].name).toBe("a", JSON.stringify(compose.args[1], null, 2));
    });
    it(':: a.b ', function () {
        var ast = fsharp_1.fsharp("a.b");
        expect(ast).toBeDefined();
        var compose = ast;
        expect(compose.type).toBe(fsharp_1.TOKENS.MEMBER, JSON.stringify(ast, null, 2));
        expect(compose.target.name).toBe("a", JSON.stringify(ast, null, 2));
        expect(compose.member).toBe("b", JSON.stringify(ast, null, 2));
    });
    it(':: [1..n] ', function () {
        var ast = fsharp_1.fsharp("[1..n]");
        expect(ast).toBeDefined();
        var range = ast;
        expect(range.type).toBe(fsharp_1.TOKENS.RANGE, JSON.stringify(ast, null, 2));
        expect(range.from.value).toBe(1, JSON.stringify(ast, null, 2));
        expect(range.to.name).toBe("n", JSON.stringify(ast, null, 2));
    });
    it(':: for p in people where p.adult ', function () {
        var ast = fsharp_1.fsharp("for p in people where p.adult");
        expect(ast).toBeDefined();
        var where = ast;
        expect(where.type).toBe(fsharp_1.TOKENS.WHERE);
        expect(where.predicate.type).toBe(fsharp_1.TOKENS.MEMBER);
        expect(where.source.type).toBe(fsharp_1.TOKENS.QUERY);
    });
    it(":: empty list -> 'list is empty' ", function () {
        var rule = fsharp_1.fsharp("empty list -> 'list is empty'");
        expect(rule).toBeDefined();
        expect(rule.type).toBe(fsharp_1.TOKENS.BINARY);
        expect(rule.op).toBe("->");
        expect(rule.right.value).toBe('list is empty');
    });
    it(':: regression test', function () {
        var start = new Date().getTime();
        var ast = fsharp_1.fsharp("a |> b.c >> (+) 1 |> d");
        for (var i = 0; i < 1000; i++) {
            fsharp_1.fsharp("a |> b >> (+) 1 |> d");
        }
        var elapsed = new Date().getTime() - start;
        if (elapsed > 2000)
            fail("too slow");
        expect(ast).toEqual({
            "type": fsharp_1.TOKENS.BINARY,
            "op": "|>",
            "right": {
                "type": fsharp_1.TOKENS.IDENT,
                "name": "d"
            },
            "left": {
                "type": fsharp_1.TOKENS.BINARY,
                "op": "|>",
                "right": {
                    "type": fsharp_1.TOKENS.COMPOSE,
                    "fun": ">>",
                    "args": [
                        {
                            "type": fsharp_1.TOKENS.APP,
                            "fun": "+",
                            "args": [
                                {
                                    "type": fsharp_1.TOKENS.CONST,
                                    "value": 1
                                }
                            ]
                        },
                        {
                            "type": fsharp_1.TOKENS.MEMBER,
                            "target": {
                                "type": fsharp_1.TOKENS.IDENT,
                                "name": "b"
                            },
                            "member": "c"
                        }
                    ]
                },
                "left": {
                    "type": fsharp_1.TOKENS.IDENT,
                    "name": "a"
                }
            }
        });
    });
});
var TestBinding = (function (_super) {
    __extends(TestBinding, _super);
    function TestBinding(ast) {
        var _this = _super.call(this) || this;
        _this.ast = ast;
        return _this;
    }
    TestBinding.prototype.render = function (context) {
        this.context = context;
        return this.value = fsharp_1.accept(this.ast, this, context).valueOf();
    };
    TestBinding.prototype.app = function (fun, args) {
        if (fun === "assign") {
            var value = args[0].valueOf();
            args[1].set(value);
            return value;
        }
        return _super.prototype.app.call(this, fun, args);
    };
    return TestBinding;
}(reactive_1.Reactive.Binding));
describe("runtime", function () {
    it("expression dependencies", function () {
        var store = new reactive_1.Reactive.Store({ p: ibrahim });
        var binding = new TestBinding(fsharp_1.fsharp("p.firstName"));
        binding.update(store);
        expect(binding.value).toBe("Ibrahim");
        store.get("p").get("firstName").set("Mr Ibraihm");
        expect(binding.value).toBe("Mr Ibraihm");
    });
    it("consistent variable identity", function () {
        var store = new reactive_1.Reactive.Store({ p: ibrahim });
        var binding = new TestBinding(fsharp_1.fsharp("p"));
        expect(binding.render(store)).toBe(binding.render(store));
    });
    it("consistent member identity", function () {
        var store = new reactive_1.Reactive.Store({ xania: { owner: ibrahim } });
        var binding = new TestBinding(fsharp_1.fsharp("xania.owner"));
        expect(binding.render(store)).toBe(binding.render(store));
    });
    it("consistent query identity", function () {
        var store = new reactive_1.Reactive.Store({ xania: { employees: [ibrahim] } });
        var binding = new TestBinding(fsharp_1.fsharp("for e in xania.employees"));
        expect(binding.render(store)[0]).toBe(binding.render(store)[0], "not identical");
    });
    it("assign expression", function () {
        var store = new reactive_1.Reactive.Store({ x: 1, y: 2, sum: 0 });
        var binding = new TestBinding(fsharp_1.fsharp("sum <- x + y"));
        binding.render(store);
        expect(store.get("sum").valueOf()).toBe(3);
    });
    it('await observable', function () {
        var observable = new observables_1.Observables.Observable(123);
        var store = new reactive_1.Reactive.Store({ observable: observable });
        var binding = new TestBinding(fsharp_1.fsharp("await observable"));
        binding.render(store);
        expect(binding.value).toBe(123);
        observable.onNext(456);
        expect(binding.value).toBe(456);
    });
});
//# sourceMappingURL=data:application/json;base64,