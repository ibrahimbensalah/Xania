"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var reactive_1 = require("../src/reactive");
var query_1 = require("../src/query");
var observables_1 = require("../src/observables");
var ibrahim = {
    age: 36,
    firstName: "Ibrahim",
    lastName: "ben Salah",
    adult: true
};
describe("query parser", function () {
    it(':: fun x -> x ', function () {
        var ast = query_1.default("fun x -> x").ast;
        expect(ast).toBeDefined();
        var compose = ast;
        expect(compose.type).toBe("lambda");
        expect(compose.param).toBe("x");
        expect(compose.body.name).toBe("x");
    });
    it(':: .firstName ', function () {
        var ast = query_1.default(".firstName").ast;
        expect(ast).toBeDefined();
        var compose = ast;
        expect(compose.type).toBe("lambda");
        expect(compose.param).toBe("x");
        expect(compose.body.target.name).toBe("x");
        expect(compose.body.member.name).toBe("firstName");
    });
    it(':: 1 + 2', function () {
        var ast = query_1.default("1 + 2").ast;
        expect(ast).toBeDefined();
        var expr = ast;
        expect(expr.type).toBe(query_1.TOKENS.BINARY);
    });
    it(':: fn a', function () {
        var ast = query_1.default("fun a").ast;
        expect(ast).toBeDefined();
        var expr = ast;
        expect(expr.type).toBe(query_1.TOKENS.APP);
        expect(expr.fun).toEqual({ type: query_1.TOKENS.IDENT, name: 'fun' });
        expect(expr.args).toEqual([{ type: query_1.TOKENS.IDENT, name: "a" }]);
    });
    it(':: fn ()', function () {
        var ast = query_1.default("fun ()").ast;
        expect(ast).toBeDefined();
        var expr = ast;
        expect(expr.type).toBe(query_1.TOKENS.APP);
        expect(expr.fun).toEqual({ type: query_1.TOKENS.IDENT, name: 'fun' });
        expect(expr.args.length).toBe(0);
    });
    it(':: (+) a b', function () {
        var ast = query_1.default("(+) a b").ast;
        expect(ast).toBeDefined();
        var expr = ast;
        expect(expr).toEqual({ "type": query_1.TOKENS.APP, "fun": "+", "args": [{ "type": query_1.TOKENS.IDENT, "name": "a" }, { "type": query_1.TOKENS.IDENT, "name": "b" }] });
    });
    it(':: a |> b |> c', function () {
        var ast = query_1.default("a |> b |> c").ast;
        expect(ast).toBeDefined();
        var pipe1 = ast;
        expect(pipe1.type).toBe(query_1.TOKENS.BINARY);
        expect(pipe1.op).toBe("|>");
        expect(pipe1.right).toEqual({ "type": query_1.TOKENS.IDENT, "name": "c" });
        var pipe2 = pipe1.left;
        expect(pipe2.type).toBe(query_1.TOKENS.BINARY);
        expect(pipe2.op).toBe("|>");
        expect(pipe2.right).toEqual({ "type": query_1.TOKENS.IDENT, "name": "b" });
        expect(pipe2.left).toEqual({ "type": query_1.TOKENS.IDENT, "name": "a" });
    });
    it(':: a + b |> c', function () {
        var ast = query_1.default("a + b |> c").ast;
        expect(ast).toBeDefined();
        var pipe = ast;
        expect(pipe.type).toBe(query_1.TOKENS.BINARY);
        expect(pipe.op).toBe("|>");
        expect(pipe.right).toEqual({ type: query_1.TOKENS.IDENT, name: "c" });
        var add = pipe.left;
        expect(add.right.name).toBe("b");
        expect(add.left.name).toBe("a");
    });
    it(':: a >> b ', function () {
        var ast = query_1.default("a >> b").ast;
        expect(ast).toBeDefined();
        var compose = ast;
        expect(compose.type).toBe(query_1.TOKENS.COMPOSE, JSON.stringify(ast, null, 2));
        expect(compose.fun).toBe(">>", JSON.stringify(ast, null, 2));
        expect(compose.args[0].name).toBe("b", JSON.stringify(compose.args[0], null, 2));
        expect(compose.args[1].name).toBe("a", JSON.stringify(compose.args[1], null, 2));
    });
    it(':: a.b ', function () {
        var ast = query_1.default("a.b").ast;
        expect(ast).toBeDefined();
        var compose = ast;
        expect(compose.type).toBe(query_1.TOKENS.MEMBER, JSON.stringify(ast, null, 2));
        expect(compose.target.name).toBe("a", JSON.stringify(ast, null, 2));
        expect(compose.member).toBe("b", JSON.stringify(ast, null, 2));
    });
    it(':: [1..n] ', function () {
        var ast = query_1.default("[1..n]").ast;
        expect(ast).toBeDefined();
        var range = ast;
        expect(range.type).toBe(query_1.TOKENS.RANGE, JSON.stringify(ast, null, 2));
        expect(range.from.value).toBe(1, JSON.stringify(ast, null, 2));
        expect(range.to.name).toBe("n", JSON.stringify(ast, null, 2));
    });
    it(':: for p in people where p.adult ', function () {
        var ast = query_1.default("for p in people where p.adult").ast;
        expect(ast).toBeDefined();
        var where = ast;
        expect(where.type).toBe(query_1.TOKENS.WHERE);
        expect(where.predicate.type).toBe(query_1.TOKENS.MEMBER);
        expect(where.source.type).toBe(query_1.TOKENS.QUERY);
    });
    it(":: empty list -> 'list is empty' ", function () {
        var rule = query_1.default("empty list -> 'list is empty'").ast;
        expect(rule).toBeDefined();
        expect(rule.type).toBe(query_1.TOKENS.BINARY);
        expect(rule.op).toBe("->");
        expect(rule.right.value).toBe('list is empty');
    });
    it(':: regression test', function () {
        var start = new Date().getTime();
        var ast = query_1.default("a |> b.c >> (+) 1 |> d");
        for (var i = 0; i < 1000; i++) {
            query_1.default("a |> b >> (+) 1 |> d");
        }
        var elapsed = new Date().getTime() - start;
        if (elapsed > 2000)
            fail("too slow");
        expect(ast).toEqual({
            "type": query_1.TOKENS.BINARY,
            "op": "|>",
            "right": {
                "type": query_1.TOKENS.IDENT,
                "name": "d"
            },
            "left": {
                "type": query_1.TOKENS.BINARY,
                "op": "|>",
                "right": {
                    "type": query_1.TOKENS.COMPOSE,
                    "fun": ">>",
                    "args": [
                        {
                            "type": query_1.TOKENS.APP,
                            "fun": "+",
                            "args": [
                                {
                                    "type": query_1.TOKENS.CONST,
                                    "value": 1
                                }
                            ]
                        },
                        {
                            "type": query_1.TOKENS.MEMBER,
                            "target": {
                                "type": query_1.TOKENS.IDENT,
                                "name": "b"
                            },
                            "member": "c"
                        }
                    ]
                },
                "left": {
                    "type": query_1.TOKENS.IDENT,
                    "name": "a"
                }
            }
        });
    });
});
var TestBinding = (function (_super) {
    __extends(TestBinding, _super);
    function TestBinding(ast) {
        var _this = _super.call(this) || this;
        _this.ast = ast;
        return _this;
    }
    TestBinding.prototype.render = function (context) {
        this.context = context;
    };
    TestBinding.prototype.app = function (fun, args) {
        if (fun === "assign") {
            var value = args[0].valueOf();
            args[1].set(value);
            return value;
        }
        return _super.prototype.app.call(this, fun, args);
    };
    return TestBinding;
}(reactive_1.Reactive.Binding));
describe("runtime", function () {
    it("expression dependencies", function () {
        var store = new reactive_1.Reactive.Store({ p: ibrahim });
        var binding = new TestBinding(query_1.default("p.firstName"));
        binding.render(store);
        expect(binding.value).toBe("Ibrahim");
        store.get("p").get("firstName").set("Mr Ibraihm");
        expect(binding.value).toBe("Mr Ibraihm");
    });
    it("consistent variable identity", function () {
        var store = new reactive_1.Reactive.Store({ p: ibrahim });
        var binding = new TestBinding(query_1.default("p"));
        expect(binding.render(store)).toBe(binding.render(store));
    });
    it("consistent member identity", function () {
        var store = new reactive_1.Reactive.Store({ xania: { owner: ibrahim } });
        var binding = new TestBinding(query_1.default("xania.owner"));
        expect(binding.render(store)).toBe(binding.render(store));
    });
    it("consistent query identity", function () {
        var store = new reactive_1.Reactive.Store({ xania: { employees: [ibrahim] } });
        var binding = new TestBinding(query_1.default("for e in xania.employees"));
        expect(binding.render(store)[0]).toBe(binding.render(store)[0], "not identical");
    });
    it("assign expression", function () {
        var store = new reactive_1.Reactive.Store({ x: 1, y: 2, sum: 0 });
        var binding = new TestBinding(query_1.default("sum <- x + y"));
        binding.render(store);
        expect(store.get("sum").valueOf()).toBe(3);
    });
    it('await observable', function () {
        var observable = new observables_1.Observables.Observable(123);
        var store = new reactive_1.Reactive.Store({ observable: observable });
        var binding = new TestBinding(query_1.default("await observable"));
        binding.render(store);
        expect(binding.value).toBe(123);
        observable.notify(456);
        expect(binding.value).toBe(456);
    });
});
//# sourceMappingURL=data:application/json;base64,