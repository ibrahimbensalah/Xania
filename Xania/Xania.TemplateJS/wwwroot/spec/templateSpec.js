"use strict";
var template_1 = require("../src/template");
var fsharp_1 = require("../src/fsharp");
var dom_1 = require("../src/dom");
var reactive_1 = require("../src/reactive");
var observables_1 = require("../src/observables");
var ibrahim, ramy;
var RootDom = (function () {
    function RootDom() {
        this.dom = document.createDocumentFragment();
    }
    RootDom.prototype.insert = function (binding, dom, insertAt) {
        if (insertAt < this.dom.childNodes.length) {
            var beforeElement = this.dom.childNodes[insertAt];
            this.dom.insertBefore(dom, beforeElement);
        }
        else {
            this.dom.appendChild(dom);
        }
    };
    Object.defineProperty(RootDom.prototype, "childNodes", {
        get: function () {
            return this.dom.childNodes;
        },
        enumerable: true,
        configurable: true
    });
    return RootDom;
}());
describe("templating", function () {
    beforeEach(function () {
        ibrahim = {
            age: 36,
            firstName: "Ibrahim",
            lastName: "ben Salah",
            adult: true,
            roles: ["developer"]
        };
        ramy = {
            age: 5,
            firstName: "Ramy",
            lastName: "ben Salah",
            adult: false,
            roles: []
        };
    });
    it("text binding", function () {
        var store = new reactive_1.Reactive.Store({ p: ibrahim });
        var binding = new dom_1.Dom.TextBinding(fsharp_1.fs("p.firstName")).update(store, null);
        store.get("p").get("firstName").set("bla");
        expect(binding.textNode.textContent).toBe("bla");
    });
    it("content binding", function () {
        var store = new reactive_1.Reactive.Store({ people: [ibrahim, ramy] });
        var fragment = new RootDom();
        var binding = new dom_1.Dom.FragmentBinding(fsharp_1.fs("for p in people"), [
            new template_1.Template.TextTemplate(fsharp_1.fs("p.firstName + ' ' + p.lastName")),
            new template_1.Template.FragmentTemplate(fsharp_1.fs("for r in p.roles"))
                .child(new template_1.Template.TextTemplate(fsharp_1.fs("':: ' + r")))
        ])
            .update(store, fragment);
        expect(fragment.childNodes.length).toBe(3);
        store.get("people").get(1).get("roles").set(["zoon"]);
        expect(fragment.childNodes.length).toBe(4);
        store.get("people").get(0).get("roles").set(["papa"]);
    });
    it("tag class binding", function () {
        var binding = new dom_1.Dom.TagBinding("div")
            .attr("class", fsharp_1.fs("p.firstName"))
            .attr("class.adult-person", fsharp_1.fs("p.adult"));
        binding.update(new reactive_1.Reactive.Store({ p: ibrahim }), null);
        expect(binding.tagNode.className).toBe("Ibrahim adult-person");
        binding.update(new reactive_1.Reactive.Store({ p: ramy }), null);
        expect(binding.tagNode.className).toBe("Ramy");
    });
    it("tag attribute binding", function () {
        var binding = new dom_1.Dom.TagBinding("div")
            .attr("id", fsharp_1.fs('p.age'));
        binding.update(new reactive_1.Reactive.Store({ p: ibrahim }), null);
        expect(binding.tagNode.id).toBe('36');
        binding.update(new reactive_1.Reactive.Store({ p: ramy }), null);
        expect(binding.tagNode.id).toBe('5');
    });
    it("tag children binding", function () {
        var store = new reactive_1.Reactive.Store({ p: ibrahim });
        var div = new dom_1.Dom.TagBinding("div")
            .child(new dom_1.Dom.TextBinding(fsharp_1.fs("p.firstName")))
            .attr("data-age", fsharp_1.fs("p.age"));
        div.update(store, null);
        expect(div.tagNode.childNodes.length).toBe(1);
        expect(div.tagNode.textContent).toBe('Ibrahim');
        store.get('p').get('firstName').set('IBRAHIM');
        expect(div.tagNode.textContent).toBe('IBRAHIM');
    });
    it("tag event binding", function () {
        var store = new reactive_1.Reactive.Store({
            p: {
                message: null,
                sayHello: function (user) {
                    if (user === void 0) { user = 'Jasmine'; }
                    this.message = "Hello, " + user + "!";
                }
            }
        });
        var button = new dom_1.Dom.TagBinding("button")
            .attr("onclick", fsharp_1.fs("p.sayHello"))
            .update(store, null);
        button.trigger('click');
        expect(store.get('p').get('message').valueOf()).toBe("Hello, Jasmine!");
    });
    it("supports streams", function () {
        var stream = new observables_1.Observables.Observable();
        var binding = new dom_1.Dom.TextBinding(fsharp_1.fs("await stream"))
            .update(new reactive_1.Reactive.Store({ stream: stream }), null);
        expect(binding.textNode.textContent).toBe("");
        stream.onNext(123);
        expect(binding.textNode.textContent).toBe("123");
        stream.onNext(456);
        expect(binding.textNode.textContent).toBe("456");
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGVTcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVtcGxhdGVTcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFFQSw0Q0FBMkM7QUFDM0Msd0NBQW1DO0FBQ25DLGtDQUFpQztBQUNqQyw0Q0FBaUQ7QUFDakQsa0RBQWlEO0FBSWpELElBQUksT0FBZ0IsRUFBRSxJQUFhLENBQUM7QUFFcEM7SUFBQTtRQUNZLFFBQUcsR0FBRyxRQUFRLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztJQWNwRCxDQUFDO0lBWkcsd0JBQU0sR0FBTixVQUFPLE9BQU8sRUFBRSxHQUFHLEVBQUUsUUFBUTtRQUN6QixFQUFFLENBQUMsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUN4QyxJQUFJLGFBQWEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNsRCxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxHQUFHLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDOUMsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ0osSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDOUIsQ0FBQztJQUNMLENBQUM7SUFFRCxzQkFBSSwrQkFBVTthQUFkO1lBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDO1FBQy9CLENBQUM7OztPQUFBO0lBQ0wsY0FBQztBQUFELENBQUMsQUFmRCxJQWVDO0FBRUQsUUFBUSxDQUFDLFlBQVksRUFDakI7SUFFSSxVQUFVLENBQUM7UUFDUCxPQUFPLEdBQUc7WUFDTixHQUFHLEVBQUUsRUFBRTtZQUNQLFNBQVMsRUFBRSxTQUFTO1lBQ3BCLFFBQVEsRUFBRSxXQUFXO1lBQ3JCLEtBQUssRUFBRSxJQUFJO1lBQ1gsS0FBSyxFQUFFLENBQUMsV0FB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WUFBWSxDQUFDLENBQUM7YUFDakMsTUFBTSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztRQUV6QixNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRXhCLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQzVFLENBQUMsQ0FBQyxDQUFDO0lBRVAsRUFBRSxDQUFDLGtCQUFrQixFQUNqQjtRQUNJLElBQUksTUFBTSxHQUFHLElBQUkseUJBQVcsQ0FBQyxVQUFVLEVBQVUsQ0FBQztRQUVsRCxJQUFJLE9BQU8sR0FBRyxJQUFJLFNBQUcsQ0FBQyxXQUFXLENBQUMsV0FBRSxDQUFDLGNBQWMsQ0FBQyxDQUFDO2FBQ2hELE1BQU0sQ0FBQyxJQUFJLG1CQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsTUFBTSxRQUFBLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzVDLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUU5QyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ25CLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUVqRCxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ25CLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyRCxDQUFDLENBQUMsQ0FBQztBQUNYLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL25vZGVfbW9kdWxlcy9AdHlwZXMvamFzbWluZS9pbmRleC5kLnRzXCIgLz5cclxuXHJcbmltcG9ydCB7IFRlbXBsYXRlIH0gZnJvbSBcIi4uL3NyYy90ZW1wbGF0ZVwiO1xyXG5pbXBvcnQgeyBmcyB9IGZyb20gXCIuLi9zcmMvZnNoYXJwXCI7XHJcbmltcG9ydCB7IERvbSB9IGZyb20gXCIuLi9zcmMvZG9tXCI7XHJcbmltcG9ydCB7IFJlYWN0aXZlIGFzIFJlIH0gZnJvbSAnLi4vc3JjL3JlYWN0aXZlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZXMgfSBmcm9tICcuLi9zcmMvb2JzZXJ2YWJsZXMnO1xyXG5cclxuaW50ZXJmYWNlIElQZXJzb24geyBmaXJzdE5hbWU6IHN0cmluZzsgbGFzdE5hbWU6IHN0cmluZzsgYWR1bHQ6IGJvb2xlYW4sIGFnZTogbnVtYmVyLCByb2xlczogc3RyaW5nW10gfVxyXG5cclxudmFyIGlicmFoaW06IElQZXJzb24sIHJhbXk6IElQZXJzb247XHJcblxyXG5jbGFzcyBSb290RG9tIHtcclxuICAgIHByaXZhdGUgZG9tID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xyXG5cclxuICAgIGluc2VydChiaW5kaW5nLCBkb20sIGluc2VydEF0KSB7XHJcbiAgICAgICAgaWYgKGluc2VydEF0IDwgdGhpcy5kb20uY2hpbGROb2Rlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdmFyIGJlZm9yZUVsZW1lbnQgPSB0aGlzLmRvbS5jaGlsZE5vZGVzW2luc2VydEF0XTtcclxuICAgICAgICAgICAgdGhpcy5kb20uaW5zZXJ0QmVmb3JlKGRvbSwgYmVmb3JlRWxlbWVudCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5kb20uYXBwZW5kQ2hpbGQoZG9tKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGNoaWxkTm9kZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9tLmNoaWxkTm9kZXM7XHJcbiAgICB9XHJcbn1cclxuXHJcbmRlc2NyaWJlKFwidGVtcGxhdGluZ1wiLFxyXG4gICAgKCkgPT4ge1xyXG5cclxuICAgICAgICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgICAgICAgICAgaWJyYWhpbSA9IHtcclxuICAgICAgICAgICAgICAgIGFnZTogMzYsXHJcbiAgICAgICAgICAgICAgICBmaXJzdE5hbWU6IFwiSWJyYWhpbVwiLFxyXG4gICAgICAgICAgICAgICAgbGFzdE5hbWU6IFwiYmVuIFNhbGFoXCIsXHJcbiAgICAgICAgICAgICAgICBhZHVsdDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHJvbGVzOiBbXCJkZXZlbG9wZXJcIl1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcmFteSA9IHtcclxuICAgICAgICAgICAgICAgIGFnZTogNSxcclxuICAgICAgICAgICAgICAgIGZpcnN0TmFtZTogXCJSYW15XCIsXHJcbiAgICAgICAgICAgICAgICBsYXN0TmFtZTogXCJiZW4gU2FsYWhcIixcclxuICAgICAgICAgICAgICAgIGFkdWx0OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHJvbGVzOiBbXVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgaXQoXCJ0ZXh0IGJpbmRpbmdcIixcclxuICAgICAgICAgICAgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdmFyIHN0b3JlID0gbmV3IFJlLlN0b3JlKHsgcDogaWJyYWhpbSB9KTtcclxuICAgICAgICAgICAgICAgIHZhciBiaW5kaW5nID0gbmV3IERvbS5UZXh0QmluZGluZyhmcyhcInAuZmlyc3ROYW1lXCIpKS51cGRhdGUoc3RvcmUsIG51bGwpO1xyXG5cclxuICAgICAgICAgICAgICAgIHN0b3JlLmdldChcInBcIikuZ2V0KFwiZmlyc3ROYW1lXCIpLnNldChcImJsYVwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICBleHBlY3QoYmluZGluZy50ZXh0Tm9kZS50ZXh0Q29udGVudCkudG9CZShcImJsYVwiKTtcclxuICAgICAgICAgICAgICAgIC8vIGV4cGVjdChiaW5kaW5nLmRlcGVuZGVuY2llcy5sZW5ndGgpLnRvQmUoMik7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpdChcImNvbnRlbnQgYmluZGluZ1wiLFxyXG4gICAgICAgICAgICAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3RvcmUgPSBuZXcgUmUuU3RvcmUoeyBwZW9wbGU6IFtpYnJhaGltLCByYW15XSB9KTtcclxuICAgICAgICAgICAgICAgIHZhciBmcmFnbWVudCA9IG5ldyBSb290RG9tKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgYmluZGluZyA9IG5ldyBEb20uRnJhZ21lbnRCaW5kaW5nKGZzKFwiZm9yIHAgaW4gcGVvcGxlXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFRlbXBsYXRlLlRleHRUZW1wbGF0ZShmcyhcInAuZmlyc3ROYW1lICsgJyAnICsgcC5sYXN0TmFtZVwiKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBUZW1wbGF0ZS5GcmFnbWVudFRlbXBsYXRlKGZzKFwiZm9yIHIgaW4gcC5yb2xlc1wiKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jaGlsZChuZXcgVGVtcGxhdGUuVGV4dFRlbXBsYXRlKGZzKFwiJzo6ICcgKyByXCIpKSlcclxuICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgICAgIC51cGRhdGUoc3RvcmUsIGZyYWdtZW50KTtcclxuXHJcbiAgICAgICAgICAgICAgICBleHBlY3QoZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGgpLnRvQmUoMyk7XHJcblxyXG4gICAgICAgICAgICAgICAgc3RvcmUuZ2V0KFwicGVvcGxlXCIpLmdldCgxKS5nZXQoXCJyb2xlc1wiKS5zZXQoW1wiem9vblwiXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgZXhwZWN0KGZyYWdtZW50LmNoaWxkTm9kZXMubGVuZ3RoKS50b0JlKDQpO1xyXG5cclxuICAgICAgICAgICAgICAgIHN0b3JlLmdldChcInBlb3BsZVwiKS5nZXQoMCkuZ2V0KFwicm9sZXNcIikuc2V0KFtcInBhcGFcIl0pO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaXQoXCJ0YWcgY2xhc3MgYmluZGluZ1wiLFxyXG4gICAgICAgICAgICAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYmluZGluZyA9IG5ldyBEb20uVGFnQmluZGluZyhcImRpdlwiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgZnMoXCJwLmZpcnN0TmFtZVwiKSlcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzLmFkdWx0LXBlcnNvblwiLCBmcyhcInAuYWR1bHRcIikpO1xyXG5cclxuICAgICAgICAgICAgICAgIGJpbmRpbmcudXBkYXRlKG5ldyBSZS5TdG9yZSh7IHA6IGlicmFoaW0gfSksIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcudGFnTm9kZS5jbGFzc05hbWUpLnRvQmUoXCJJYnJhaGltIGFkdWx0LXBlcnNvblwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICBiaW5kaW5nLnVwZGF0ZShuZXcgUmUuU3RvcmUoeyBwOiByYW15IH0pLCBudWxsKTtcclxuICAgICAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nLnRhZ05vZGUuY2xhc3NOYW1lKS50b0JlKFwiUmFteVwiKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGl0KFwidGFnIGF0dHJpYnV0ZSBiaW5kaW5nXCIsXHJcbiAgICAgICAgICAgICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHZhciBiaW5kaW5nID0gbmV3IERvbS5UYWdCaW5kaW5nKFwiZGl2XCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJpZFwiLCBmcygncC5hZ2UnKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgYmluZGluZy51cGRhdGUobmV3IFJlLlN0b3JlKHsgcDogaWJyYWhpbSB9KSwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICBleHBlY3QoYmluZGluZy50YWdOb2RlLmlkKS50b0JlKCczNicpO1xyXG5cclxuICAgICAgICAgICAgICAgIGJpbmRpbmcudXBkYXRlKG5ldyBSZS5TdG9yZSh7IHA6IHJhbXkgfSksIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcudGFnTm9kZS5pZCkudG9CZSgnNScpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaXQoXCJ0YWcgY2hpbGRyZW4gYmluZGluZ1wiLFxyXG4gICAgICAgICAgICAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3RvcmUgPSBuZXcgUmUuU3RvcmUoeyBwOiBpYnJhaGltIH0pO1xyXG4gICAgICAgICAgICAgICAgdmFyIGRpdiA9IG5ldyBEb20uVGFnQmluZGluZyhcImRpdlwiKVxyXG4gICAgICAgICAgICAgICAgICAgIC5jaGlsZChuZXcgRG9tLlRleHRCaW5kaW5nKGZzKFwicC5maXJzdE5hbWVcIikpKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiZGF0YS1hZ2VcIiwgZnMoXCJwLmFnZVwiKSk7XHJcbiAgICAgICAgICAgICAgICBkaXYudXBkYXRlKHN0b3JlLCBudWxsKTtcclxuXHJcbiAgICAgICAgICAgICAgICBleHBlY3QoZGl2LnRhZ05vZGUuY2hpbGROb2Rlcy5sZW5ndGgpLnRvQmUoMSk7XHJcbiAgICAgICAgICAgICAgICBleHBlY3QoZGl2LnRhZ05vZGUudGV4dENvbnRlbnQpLnRvQmUoJ0licmFoaW0nKTtcclxuXHJcbiAgICAgICAgICAgICAgICBzdG9yZS5nZXQoJ3AnKS5nZXQoJ2ZpcnN0TmFtZScpLnNldCgnSUJSQUhJTScpO1xyXG5cclxuICAgICAgICAgICAgICAgIGV4cGVjdChkaXYudGFnTm9kZS50ZXh0Q29udGVudCkudG9CZSgnSUJSQUhJTScpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgIGl0KFwidGFnIGV2ZW50IGJpbmRpbmdcIixcclxuICAgICAgICAgICAgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdmFyIHN0b3JlID0gbmV3IFJlLlN0b3JlKHtcclxuICAgICAgICAgICAgICAgICAgICBwOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNheUhlbGxvKHVzZXIgPSAnSmFzbWluZScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnZSA9IFwiSGVsbG8sIFwiICsgdXNlciArIFwiIVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgYnV0dG9uID0gbmV3IERvbS5UYWdCaW5kaW5nKFwiYnV0dG9uXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJvbmNsaWNrXCIsIGZzKFwicC5zYXlIZWxsb1wiKSlcclxuICAgICAgICAgICAgICAgICAgICAudXBkYXRlKHN0b3JlLCBudWxsKTtcclxuXHJcbiAgICAgICAgICAgICAgICBidXR0b24udHJpZ2dlcignY2xpY2snKTtcclxuXHJcbiAgICAgICAgICAgICAgICBleHBlY3Qoc3RvcmUuZ2V0KCdwJykuZ2V0KCdtZXNzYWdlJykudmFsdWVPZigpKS50b0JlKFwiSGVsbG8sIEphc21pbmUhXCIpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaXQoXCJzdXBwb3J0cyBzdHJlYW1zXCIsXHJcbiAgICAgICAgICAgICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHZhciBzdHJlYW0gPSBuZXcgT2JzZXJ2YWJsZXMuT2JzZXJ2YWJsZTxudW1iZXI+KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGJpbmRpbmcgPSBuZXcgRG9tLlRleHRCaW5kaW5nKGZzKFwiYXdhaXQgc3RyZWFtXCIpKVxyXG4gICAgICAgICAgICAgICAgICAgIC51cGRhdGUobmV3IFJlLlN0b3JlKHsgc3RyZWFtIH0pLCBudWxsKTtcclxuICAgICAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nLnRleHROb2RlLnRleHRDb250ZW50KS50b0JlKFwiXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgIHN0cmVhbS5vbk5leHQoMTIzKTtcclxuICAgICAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nLnRleHROb2RlLnRleHRDb250ZW50KS50b0JlKFwiMTIzXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgIHN0cmVhbS5vbk5leHQoNDU2KTtcclxuICAgICAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nLnRleHROb2RlLnRleHRDb250ZW50KS50b0JlKFwiNDU2XCIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIH0pOyJdfQ==