"use strict";
var compile_1 = require("../src/compile");
var dom_1 = require("../src/dom");
var reactive_1 = require("../src/reactive");
var observables_1 = require("../src/observables");
var ibrahim, ramy;
var RootDom = (function () {
    function RootDom() {
        this.dom = document.createDocumentFragment();
    }
    RootDom.prototype.insert = function (binding, dom, insertAt) {
        if (insertAt < this.dom.childNodes.length) {
            var beforeElement = this.dom.childNodes[insertAt];
            this.dom.insertBefore(dom, beforeElement);
        }
        else {
            this.dom.appendChild(dom);
        }
    };
    Object.defineProperty(RootDom.prototype, "childNodes", {
        get: function () {
            return this.dom.childNodes;
        },
        enumerable: true,
        configurable: true
    });
    return RootDom;
}());
describe("templating", function () {
    beforeEach(function () {
        ibrahim = {
            age: 36,
            firstName: "Ibrahim",
            lastName: "ben Salah",
            adult: true,
            roles: ["developer"]
        };
        ramy = {
            age: 5,
            firstName: "Ramy",
            lastName: "ben Salah",
            adult: false,
            roles: []
        };
    });
    it("text binding", function () {
        var store = new reactive_1.Reactive.Store({ p: ibrahim });
        var binding = new dom_1.Dom.TextBinding(compile_1.default("p.firstName")).update(store, null);
        store.get("p").get("firstName").set("bla");
        expect(binding.textNode.textContent).toBe("bla");
    });
    it("content binding", function () {
        var store = new reactive_1.Reactive.Store({ people: [ibrahim, ramy] });
        var fragment = new RootDom();
        expect(fragment.childNodes.length).toBe(3);
        store.get("people").get(1).get("roles").set(["zoon"]);
        expect(fragment.childNodes.length).toBe(4);
        store.get("people").get(0).get("roles").set(["papa"]);
    });
    it("tag class binding", function () {
        var binding = new dom_1.Dom.TagBinding("div")
            .attr("class", compile_1.default("p.firstName"))
            .attr("class.adult-person", compile_1.default("p.adult"));
        binding.update(new reactive_1.Reactive.Store({ p: ibrahim }), null);
        expect(binding.tagNode.className).toBe("Ibrahim adult-person");
        binding.update(new reactive_1.Reactive.Store({ p: ramy }), null);
        expect(binding.tagNode.className).toBe("Ramy");
    });
    it("tag attribute binding", function () {
        var binding = new dom_1.Dom.TagBinding("div")
            .attr("id", compile_1.default('p.age'));
        binding.update(new reactive_1.Reactive.Store({ p: ibrahim }), null);
        expect(binding.tagNode.id).toBe('36');
        binding.update(new reactive_1.Reactive.Store({ p: ramy }), null);
        expect(binding.tagNode.id).toBe('5');
    });
    it("tag children binding", function () {
        var store = new reactive_1.Reactive.Store({ p: ibrahim });
        var div = new dom_1.Dom.TagBinding("div")
            .child(new dom_1.Dom.TextBinding(compile_1.default("p.firstName")))
            .attr("data-age", compile_1.default("p.age"));
        div.update(store, null);
        expect(div.tagNode.childNodes.length).toBe(1);
        expect(div.tagNode.textContent).toBe('Ibrahim');
        store.get('p').get('firstName').set('IBRAHIM');
        expect(div.tagNode.textContent).toBe('IBRAHIM');
    });
    it("tag event binding", function () {
        var store = new reactive_1.Reactive.Store({
            p: {
                message: null,
                sayHello: function (user) {
                    if (user === void 0) { user = 'Jasmine'; }
                    this.message = "Hello, " + user + "!";
                }
            }
        });
        var button = new dom_1.Dom.TagBinding("button")
            .attr("onclick", compile_1.default("p.sayHello"))
            .update(store, null);
        button.trigger('click');
        expect(store.get('p').get('message').valueOf()).toBe("Hello, Jasmine!");
    });
    it("supports streams", function () {
        var stream = new observables_1.Observables.Observable();
        var binding = new dom_1.Dom.TextBinding(compile_1.default("await stream"))
            .update(new reactive_1.Reactive.Store({ stream: stream }), null);
        expect(binding.textNode.textContent).toBe("");
        stream.notify(123);
        expect(binding.textNode.textContent).toBe("123");
        stream.notify(456);
        expect(binding.textNode.textContent).toBe("456");
    });
});
//# sourceMappingURL=data:application/json;base64,