"use strict";
var template_1 = require("../src/template");
var fsharp_1 = require("../src/fsharp");
var dom_1 = require("../src/dom");
var reactive_1 = require("../src/reactive");
var observables_1 = require("../src/observables");
var ibrahim, ramy;
var RootDom = (function () {
    function RootDom() {
        this.dom = document.createDocumentFragment();
    }
    RootDom.prototype.insert = function (dom, insertAt) {
        if (insertAt < this.dom.childNodes.length) {
            var beforeElement = this.dom.childNodes[insertAt];
            this.dom.insertBefore(dom, beforeElement);
        }
        else {
            this.dom.appendChild(dom);
        }
        console.log("insert", dom, insertAt);
    };
    Object.defineProperty(RootDom.prototype, "childNodes", {
        get: function () {
            return this.dom.childNodes;
        },
        enumerable: true,
        configurable: true
    });
    return RootDom;
}());
describe("templating", function () {
    beforeEach(function () {
        ibrahim = {
            age: 36,
            firstName: "Ibrahim",
            lastName: "ben Salah",
            adult: true,
            roles: ["developer"]
        };
        ramy = {
            age: 5,
            firstName: "Ramy",
            lastName: "ben Salah",
            adult: false,
            roles: []
        };
    });
    it("text binding", function () {
        var store = new reactive_1.Reactive.Store({ p: ibrahim });
        var binding = new dom_1.Dom.TextBinding(fsharp_1.fsharp("p.firstName")).update(store);
        store.get("p").get("firstName").set("bla");
        expect(binding.dom.textContent).toBe("bla");
        expect(binding.dependencies.length).toBe(2);
    });
    it("content binding", function () {
        var store = new reactive_1.Reactive.Store({ people: [ibrahim, ramy] });
        var fragment = new RootDom();
        var binding = new dom_1.Dom.ContentBinding(fsharp_1.fsharp("for p in people"), fragment, [
            new template_1.Template.TextTemplate(fsharp_1.fsharp("p.firstName + ' ' + p.lastName")),
            new template_1.Template.ContentTemplate(fsharp_1.fsharp("for r in p.roles"))
                .child(new template_1.Template.TextTemplate(fsharp_1.fsharp("':: ' + r")))
        ])
            .update(store);
        console.log(fragment.childNodes);
        expect(fragment.childNodes.length).toBe(3);
        store.get("people").get(1).get("roles").set(["zoon"]);
        console.log(fragment.childNodes);
        expect(fragment.childNodes.length).toBe(4);
        store.get("people").get(0).get("roles").set(["papa"]);
        console.log(fragment.childNodes);
    });
    it("tag class binding", function () {
        var binding = new dom_1.Dom.TagBinding("div")
            .attr("class", fsharp_1.fsharp("p.firstName"))
            .attr("class.adult-person", fsharp_1.fsharp("p.adult"));
        binding.update(new reactive_1.Reactive.Store({ p: ibrahim }));
        expect(binding.dom.className).toBe("Ibrahim adult-person");
        binding.update(new reactive_1.Reactive.Store({ p: ramy }));
        expect(binding.dom.className).toBe("Ramy");
    });
    it("tag attribute binding", function () {
        var binding = new dom_1.Dom.TagBinding("div")
            .attr("id", fsharp_1.fsharp('p.age'));
        binding.update(new reactive_1.Reactive.Store({ p: ibrahim }));
        expect(binding.dom.id).toBe('36');
        binding.update(new reactive_1.Reactive.Store({ p: ramy }));
        expect(binding.dom.id).toBe('5');
    });
    it("tag children binding", function () {
        var store = new reactive_1.Reactive.Store({ p: ibrahim });
        var div = new dom_1.Dom.TagBinding("div")
            .attr("data-age", fsharp_1.fsharp("p.age"));
        div.text(fsharp_1.fsharp("p.firstName"));
        div.update(store);
        expect(div.dom.childNodes.length).toBe(1);
        expect(div.dom.textContent).toBe('Ibrahim');
        store.get('p').get('firstName').set('IBRAHIM');
        expect(div.dom.textContent).toBe('IBRAHIM');
        console.log(div.dom);
    });
    it("tag event binding", function () {
        var store = new reactive_1.Reactive.Store({
            p: {
                message: null,
                sayHello: function (user) {
                    if (user === void 0) { user = 'Jasmine'; }
                    this.message = "Hello, " + user + "!";
                }
            }
        });
        var button = new dom_1.Dom.TagBinding("button")
            .on("click", fsharp_1.fsharp("p.sayHello"))
            .update(store);
        button.trigger('click');
        expect(store.get('p').get('message').valueOf()).toBe("Hello, Jasmine!");
    });
    it("supports streams", function () {
        var stream = new observables_1.Observables.Observable();
        var binding = new dom_1.Dom.TextBinding(fsharp_1.fsharp("value")).update(new reactive_1.Reactive.Store({ value: stream }));
        expect(binding.dom.textContent).toBe("");
        stream.onNext(123);
        expect(binding.dom.textContent).toBe("123");
        stream.onNext(456);
        expect(binding.dom.textContent).toBe("456");
    });
});
//# sourceMappingURL=data:application/json;base64,