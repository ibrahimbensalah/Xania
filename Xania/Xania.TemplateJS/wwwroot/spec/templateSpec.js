"use strict";
var template_1 = require("../src/template");
var fsharp_1 = require("../src/fsharp");
var dom_1 = require("../src/dom");
var reactive_1 = require("../src/reactive");
var ibrahim = {
    age: 36,
    firstName: "Ibrahim",
    lastName: "ben Salah",
    adult: true,
    roles: ["developer"]
};
var ramy = {
    age: 5,
    firstName: "Ramy",
    lastName: "ben Salah",
    adult: false,
    roles: []
};
describe("templating", function () {
    it("text binding", function () {
        var store = new reactive_1.Reactive.Store({ p: ibrahim });
        var binding = new dom_1.Dom.TextBinding(fsharp_1.fsharp("p.firstName")).update(store);
        store.get("p").get("firstName").set("bla");
        expect(binding.dom.textContent).toBe("Ibrahim");
        store.flush();
        expect(binding.dom.textContent).toBe("bla");
        expect(store.dirty.length).toBe(0);
        expect(binding.dependencies.length).toBe(2);
    });
    it("content binding", function () {
        var store = new reactive_1.Reactive.Store({ people: [ibrahim, ramy] });
        var fragment = document.createDocumentFragment();
        var insert = function (dom, insertAt) {
            if (insertAt < fragment.childNodes.length) {
                var beforeElement = fragment.childNodes[insertAt];
                fragment.insertBefore(dom, beforeElement);
            }
            else {
                fragment.appendChild(dom);
            }
            console.log("insert", dom, insertAt);
        };
        var binding = new dom_1.Dom.ContentBinding(fsharp_1.fsharp("for p in people"), insert, [
            new template_1.Template.TextTemplate(fsharp_1.fsharp("p.firstName + ' ' + p.lastName")),
            new template_1.Template.ContentTemplate(fsharp_1.fsharp("for r in p.roles"), [new template_1.Template.TextTemplate(fsharp_1.fsharp("':: ' + r"))])
        ])
            .update(store);
        console.log(fragment.childNodes);
        expect(fragment.childNodes.length).toBe(3);
        store.get("people").get(1).get("roles").set(["zoon"]);
        store.flush();
        console.log(fragment.childNodes);
        expect(fragment.childNodes.length).toBe(4);
        store.get("people").get(0).get("roles").set(["papa"]);
        store.flush();
        console.log(fragment.childNodes);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGVTcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3BlYy90ZW1wbGF0ZVNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUVBLDRDQUEyQztBQUMzQyx3Q0FBNkM7QUFDN0Msa0NBQWlDO0FBQ2pDLDRDQUFpRDtBQUtqRCxJQUFJLE9BQU8sR0FBWTtJQUNuQixHQUFHLEVBQUUsRUFBRTtJQUNQLFNBQVMsRUFBRSxTQUFTO0lBQ3BCLFFBQVEsRUFBRSxXQUFXO0lBQ3JCLEtBQUssRUFBRSxJQUFJO0lBQ1gsS0FBSyxFQUFFLENBQUMsV0FBVyxDQUFDO0NBQ3ZCLENBQUM7QUFDRixJQUFJLElBQUksR0FBWTtJQUNoQixHQUFHLEVBQUUsQ0FBQztJQUNOLFNBQVMsRUFBRSxNQUFNO0lBQ2pCLFFBQVEsRUFBRSxXQUFXO0lBQ3JCLEtBQUssRUFBRSxLQUFLO0lBQ1osS0FBSyxFQUFFLEVBQUU7Q0FDWixDQUFDO0FBRUYsUUFBUSxDQUFDLFlBQVksRUFDakI7SUFDSSxFQUFFLENBQUMsY0FBYyxFQUNiO1FBQ0ksSUFBSSxLQUFLLEdBQUcsSUFBSSxtQkFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQ3pDLElBQUksT0FBTyxHQUFHLElBQUksU0FBRyxDQUFDLFdBQVcsQ0FBQyxlQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFbkUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzNDLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNoRCxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDZCxNQUFNLENBQUMsT0FBTyxD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bW9kdWxlcy9AdHlwZXMvamFzbWluZS9pbmRleC5kLnRzXCIgLz5cclxuXHJcbmltcG9ydCB7IFRlbXBsYXRlIH0gZnJvbSBcIi4uL3NyYy90ZW1wbGF0ZVwiO1xyXG5pbXBvcnQgeyBmc2hhcnAgYXMgZnMgfSBmcm9tIFwiLi4vc3JjL2ZzaGFycFwiO1xyXG5pbXBvcnQgeyBEb20gfSBmcm9tIFwiLi4vc3JjL2RvbVwiO1xyXG5pbXBvcnQgeyBSZWFjdGl2ZSBhcyBSZSB9IGZyb20gJy4uL3NyYy9yZWFjdGl2ZSc7XHJcbi8vIGltcG9ydCB7IENvcmUgfSBmcm9tIFwiLi4vc3JjL2NvcmVcIjtcclxuXHJcbmludGVyZmFjZSBJUGVyc29uIHsgZmlyc3ROYW1lOiBzdHJpbmc7IGxhc3ROYW1lOiBzdHJpbmc7IGFkdWx0OiBib29sZWFuLCBhZ2U6IG51bWJlciwgcm9sZXM6IHN0cmluZ1tdIH1cclxuXHJcbnZhciBpYnJhaGltOiBJUGVyc29uID0ge1xyXG4gICAgYWdlOiAzNixcclxuICAgIGZpcnN0TmFtZTogXCJJYnJhaGltXCIsXHJcbiAgICBsYXN0TmFtZTogXCJiZW4gU2FsYWhcIixcclxuICAgIGFkdWx0OiB0cnVlLFxyXG4gICAgcm9sZXM6IFtcImRldmVsb3BlclwiXVxyXG59O1xyXG52YXIgcmFteTogSVBlcnNvbiA9IHtcclxuICAgIGFnZTogNSxcclxuICAgIGZpcnN0TmFtZTogXCJSYW15XCIsXHJcbiAgICBsYXN0TmFtZTogXCJiZW4gU2FsYWhcIixcclxuICAgIGFkdWx0OiBmYWxzZSxcclxuICAgIHJvbGVzOiBbXVxyXG59O1xyXG5cclxuZGVzY3JpYmUoXCJ0ZW1wbGF0aW5nXCIsXHJcbiAgICAoKSA9PiB7XHJcbiAgICAgICAgaXQoXCJ0ZXh0IGJpbmRpbmdcIixcclxuICAgICAgICAgICAgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdmFyIHN0b3JlID0gbmV3IFJlLlN0b3JlKHsgcDogaWJyYWhpbSB9KTtcclxuICAgICAgICAgICAgICAgIHZhciBiaW5kaW5nID0gbmV3IERvbS5UZXh0QmluZGluZyhmcyhcInAuZmlyc3ROYW1lXCIpKS51cGRhdGUoc3RvcmUpO1xyXG5cclxuICAgICAgICAgICAgICAgIHN0b3JlLmdldChcInBcIikuZ2V0KFwiZmlyc3ROYW1lXCIpLnNldChcImJsYVwiKTtcclxuICAgICAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nLmRvbS50ZXh0Q29udGVudCkudG9CZShcIklicmFoaW1cIik7XHJcbiAgICAgICAgICAgICAgICBzdG9yZS5mbHVzaCgpO1xyXG4gICAgICAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcuZG9tLnRleHRDb250ZW50KS50b0JlKFwiYmxhXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgIGV4cGVjdChzdG9yZS5kaXJ0eS5sZW5ndGgpLnRvQmUoMCk7XHJcbiAgICAgICAgICAgICAgICBleHBlY3QoYmluZGluZy5kZXBlbmRlbmNpZXMubGVuZ3RoKS50b0JlKDIpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaXQoXCJjb250ZW50IGJpbmRpbmdcIixcclxuICAgICAgICAgICAgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdmFyIHN0b3JlID0gbmV3IFJlLlN0b3JlKHsgcGVvcGxlOiBbaWJyYWhpbSwgcmFteV0gfSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5zZXJ0ID0gKGRvbSwgaW5zZXJ0QXQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5zZXJ0QXQgPCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYmVmb3JlRWxlbWVudCA9IGZyYWdtZW50LmNoaWxkTm9kZXNbaW5zZXJ0QXRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmcmFnbWVudC5pbnNlcnRCZWZvcmUoZG9tLCBiZWZvcmVFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZChkb20pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImluc2VydFwiLCBkb20sIGluc2VydEF0KTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB2YXIgYmluZGluZyA9IG5ldyBEb20uQ29udGVudEJpbmRpbmcoZnMoXCJmb3IgcCBpbiBwZW9wbGVcIiksIGluc2VydCxcclxuICAgICAgICAgICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBUZW1wbGF0ZS5UZXh0VGVtcGxhdGUoZnMoXCJwLmZpcnN0TmFtZSArICcgJyArIHAubGFzdE5hbWVcIikpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgVGVtcGxhdGUuQ29udGVudFRlbXBsYXRlKGZzKFwiZm9yIHIgaW4gcC5yb2xlc1wiKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtuZXcgVGVtcGxhdGUuVGV4dFRlbXBsYXRlKGZzKFwiJzo6ICcgKyByXCIpKV0pXHJcbiAgICAgICAgICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgICAgICAgICAudXBkYXRlKHN0b3JlKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhmcmFnbWVudC5jaGlsZE5vZGVzKTtcclxuICAgICAgICAgICAgICAgIGV4cGVjdChmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCkudG9CZSgzKTtcclxuXHJcbiAgICAgICAgICAgICAgICBzdG9yZS5nZXQoXCJwZW9wbGVcIikuZ2V0KDEpLmdldChcInJvbGVzXCIpLnNldChbXCJ6b29uXCJdKTtcclxuICAgICAgICAgICAgICAgIHN0b3JlLmZsdXNoKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZnJhZ21lbnQuY2hpbGROb2Rlcyk7XHJcbiAgICAgICAgICAgICAgICBleHBlY3QoZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGgpLnRvQmUoNCk7XHJcblxyXG4gICAgICAgICAgICAgICAgc3RvcmUuZ2V0KFwicGVvcGxlXCIpLmdldCgwKS5nZXQoXCJyb2xlc1wiKS5zZXQoW1wicGFwYVwiXSk7XHJcbiAgICAgICAgICAgICAgICBzdG9yZS5mbHVzaCgpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZnJhZ21lbnQuY2hpbGROb2Rlcyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfSk7Il19