"use strict";
var template_1 = require("../src/template");
var fsharp_1 = require("../src/fsharp");
var dom_1 = require("../src/dom");
var rebind_1 = require("../src/rebind");
var ibrahim = {
    age: 36,
    firstName: "Ibrahim",
    lastName: "ben Salah",
    adult: true,
    roles: ["developer"]
};
var ramy = {
    age: 5,
    firstName: "Ramy",
    lastName: "ben Salah",
    adult: false,
    roles: []
};
describe("templating", function () {
    it("text binding", function () {
        var store = new rebind_1.Reactive.Store({ p: ibrahim });
        var binding = new dom_1.Dom.TextBinding(fsharp_1.fsharp("p.firstName")).update(store);
        store.get("p").get("firstName").set("bla");
        expect(binding.dom.textContent).toBe("Ibrahim");
        store.flush();
        expect(binding.dom.textContent).toBe("bla");
        expect(store.dirty.length).toBe(0);
        expect(binding.dependencies.length).toBe(2);
    });
    it("content binding", function () {
        var store = new rebind_1.Reactive.Store({ people: [ibrahim, ramy] });
        var fragment = document.createDocumentFragment();
        var insert = function (dom, insertAt) {
            if (insertAt < fragment.childNodes.length) {
                var beforeElement = fragment.childNodes[insertAt];
                fragment.insertBefore(dom, beforeElement);
            }
            else {
                fragment.appendChild(dom);
            }
            console.log("insert", dom, insertAt);
        };
        var binding = new dom_1.Dom.ContentBinding(fsharp_1.fsharp("for p in people"), insert, [
            new template_1.Template.TextTemplate(fsharp_1.fsharp("p.firstName + ' ' + p.lastName")),
            new template_1.Template.ContentTemplate(fsharp_1.fsharp("for r in p.roles"), [new template_1.Template.TextTemplate(fsharp_1.fsharp("':: ' + r"))])
        ])
            .update(store);
        console.log(fragment.childNodes);
        expect(fragment.childNodes.length).toBe(3);
        store.get("people").get(1).get("roles").set(["zoon"]);
        store.flush();
        console.log(fragment.childNodes);
        expect(fragment.childNodes.length).toBe(4);
        store.get("people").get(0).get("roles").set(["papa"]);
        store.flush();
        console.log(fragment.childNodes);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGVTcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3BlYy90ZW1wbGF0ZVNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUVBLDRDQUEyQztBQUMzQyx3Q0FBNkM7QUFDN0Msa0NBQWlDO0FBQ2pDLHdDQUErQztBQUsvQyxJQUFJLE9BQU8sR0FBWTtJQUNuQixHQUFHLEVBQUUsRUFBRTtJQUNQLFNBQVMsRUFBRSxTQUFTO0lBQ3BCLFFBQVEsRUFBRSxXQUFXO0lBQ3JCLEtBQUssRUFBRSxJQUFJO0lBQ1gsS0FBSyxFQUFFLENBQUMsV0FBVyxDQUFDO0NBQ3ZCLENBQUM7QUFDRixJQUFJLElBQUksR0FBWTtJQUNoQixHQUFHLEVBQUUsQ0FBQztJQUNOLFNBQVMsRUFBRSxNQUFNO0lBQ2pCLFFBQVEsRUFBRSxXQUFXO0lBQ3JCLEtBQUssRUFBRSxLQUFLO0lBQ1osS0FBSyxFQUFFLEVBQUU7Q0FDWixDQUFDO0FBRUYsUUFBUSxDQUFDLFlBQVksRUFDakI7SUFDSSxFQUFFLENBQUMsY0FBYyxFQUNiO1FBQ0ksSUFBSSxLQUFLLEdBQUcsSUFBSSxpQkFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQ3pDLElBQUksT0FBTyxHQUFHLElBQUksU0FBRyxDQUFDLFdBQVcsQ0FBQyxlQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFbkUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzNDLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNoRCxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDZCxNQUFNLENBQUMsT0FBTyxD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bW9kdWxlcy9AdHlwZXMvamFzbWluZS9pbmRleC5kLnRzXCIgLz5cclxuXHJcbmltcG9ydCB7IFRlbXBsYXRlIH0gZnJvbSBcIi4uL3NyYy90ZW1wbGF0ZVwiO1xyXG5pbXBvcnQgeyBmc2hhcnAgYXMgZnMgfSBmcm9tIFwiLi4vc3JjL2ZzaGFycFwiO1xyXG5pbXBvcnQgeyBEb20gfSBmcm9tIFwiLi4vc3JjL2RvbVwiO1xyXG5pbXBvcnQgeyBSZWFjdGl2ZSBhcyBSZSB9IGZyb20gJy4uL3NyYy9yZWJpbmQnO1xyXG4vLyBpbXBvcnQgeyBDb3JlIH0gZnJvbSBcIi4uL3NyYy9jb3JlXCI7XHJcblxyXG5pbnRlcmZhY2UgSVBlcnNvbiB7IGZpcnN0TmFtZTogc3RyaW5nOyBsYXN0TmFtZTogc3RyaW5nOyBhZHVsdDogYm9vbGVhbiwgYWdlOiBudW1iZXIsIHJvbGVzOiBzdHJpbmdbXSB9XHJcblxyXG52YXIgaWJyYWhpbTogSVBlcnNvbiA9IHtcclxuICAgIGFnZTogMzYsXHJcbiAgICBmaXJzdE5hbWU6IFwiSWJyYWhpbVwiLFxyXG4gICAgbGFzdE5hbWU6IFwiYmVuIFNhbGFoXCIsXHJcbiAgICBhZHVsdDogdHJ1ZSxcclxuICAgIHJvbGVzOiBbXCJkZXZlbG9wZXJcIl1cclxufTtcclxudmFyIHJhbXk6IElQZXJzb24gPSB7XHJcbiAgICBhZ2U6IDUsXHJcbiAgICBmaXJzdE5hbWU6IFwiUmFteVwiLFxyXG4gICAgbGFzdE5hbWU6IFwiYmVuIFNhbGFoXCIsXHJcbiAgICBhZHVsdDogZmFsc2UsXHJcbiAgICByb2xlczogW11cclxufTtcclxuXHJcbmRlc2NyaWJlKFwidGVtcGxhdGluZ1wiLFxyXG4gICAgKCkgPT4ge1xyXG4gICAgICAgIGl0KFwidGV4dCBiaW5kaW5nXCIsXHJcbiAgICAgICAgICAgICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHZhciBzdG9yZSA9IG5ldyBSZS5TdG9yZSh7IHA6IGlicmFoaW0gfSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgYmluZGluZyA9IG5ldyBEb20uVGV4dEJpbmRpbmcoZnMoXCJwLmZpcnN0TmFtZVwiKSkudXBkYXRlKHN0b3JlKTtcclxuXHJcbiAgICAgICAgICAgICAgICBzdG9yZS5nZXQoXCJwXCIpLmdldChcImZpcnN0TmFtZVwiKS5zZXQoXCJibGFcIik7XHJcbiAgICAgICAgICAgICAgICBleHBlY3QoYmluZGluZy5kb20udGV4dENvbnRlbnQpLnRvQmUoXCJJYnJhaGltXCIpO1xyXG4gICAgICAgICAgICAgICAgc3RvcmUuZmx1c2goKTtcclxuICAgICAgICAgICAgICAgIGV4cGVjdChiaW5kaW5nLmRvbS50ZXh0Q29udGVudCkudG9CZShcImJsYVwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICBleHBlY3Qoc3RvcmUuZGlydHkubGVuZ3RoKS50b0JlKDApO1xyXG4gICAgICAgICAgICAgICAgZXhwZWN0KGJpbmRpbmcuZGVwZW5kZW5jaWVzLmxlbmd0aCkudG9CZSgyKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGl0KFwiY29udGVudCBiaW5kaW5nXCIsXHJcbiAgICAgICAgICAgICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHZhciBzdG9yZSA9IG5ldyBSZS5TdG9yZSh7IHBlb3BsZTogW2licmFoaW0sIHJhbXldIH0pO1xyXG4gICAgICAgICAgICAgICAgdmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGluc2VydCA9IChkb20sIGluc2VydEF0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluc2VydEF0IDwgZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJlZm9yZUVsZW1lbnQgPSBmcmFnbWVudC5jaGlsZE5vZGVzW2luc2VydEF0XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJhZ21lbnQuaW5zZXJ0QmVmb3JlKGRvbSwgYmVmb3JlRWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoZG9tKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJpbnNlcnRcIiwgZG9tLCBpbnNlcnRBdCk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgdmFyIGJpbmRpbmcgPSBuZXcgRG9tLkNvbnRlbnRCaW5kaW5nKGZzKFwiZm9yIHAgaW4gcGVvcGxlXCIpLCBpbnNlcnQsXHJcbiAgICAgICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgVGVtcGxhdGUuVGV4dFRlbXBsYXRlKGZzKFwicC5maXJzdE5hbWUgKyAnICcgKyBwLmxhc3ROYW1lXCIpKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFRlbXBsYXRlLkNvbnRlbnRUZW1wbGF0ZShmcyhcImZvciByIGluIHAucm9sZXNcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbbmV3IFRlbXBsYXRlLlRleHRUZW1wbGF0ZShmcyhcIic6OiAnICsgclwiKSldKVxyXG4gICAgICAgICAgICAgICAgICAgIF0pXHJcbiAgICAgICAgICAgICAgICAgICAgLnVwZGF0ZShzdG9yZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZnJhZ21lbnQuY2hpbGROb2Rlcyk7XHJcbiAgICAgICAgICAgICAgICBleHBlY3QoZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGgpLnRvQmUoMyk7XHJcblxyXG4gICAgICAgICAgICAgICAgc3RvcmUuZ2V0KFwicGVvcGxlXCIpLmdldCgxKS5nZXQoXCJyb2xlc1wiKS5zZXQoW1wiem9vblwiXSk7XHJcbiAgICAgICAgICAgICAgICBzdG9yZS5mbHVzaCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGZyYWdtZW50LmNoaWxkTm9kZXMpO1xyXG4gICAgICAgICAgICAgICAgZXhwZWN0KGZyYWdtZW50LmNoaWxkTm9kZXMubGVuZ3RoKS50b0JlKDQpO1xyXG5cclxuICAgICAgICAgICAgICAgIHN0b3JlLmdldChcInBlb3BsZVwiKS5nZXQoMCkuZ2V0KFwicm9sZXNcIikuc2V0KFtcInBhcGFcIl0pO1xyXG4gICAgICAgICAgICAgICAgc3RvcmUuZmx1c2goKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGZyYWdtZW50LmNoaWxkTm9kZXMpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIH0pOyJdfQ==