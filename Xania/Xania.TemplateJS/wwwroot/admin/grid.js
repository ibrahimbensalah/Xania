"use strict";
var xania_1 = require("../src/xania");
require("./grid.css");
var DataGrid = (function () {
    function DataGrid() {
        var _this = this;
        this.data = [];
        this.columns = [];
        this.activeRow = null;
        this.activeRecord = null;
        this.onRowClick = function (event, context) {
            var activeRow = context.get('row').valueOf();
            _this.activeRow = activeRow;
            _this.activeRecord = activeRow.data;
        };
        this.columns.push({ field: "name" });
        this.columns.push({ field: "email" });
        this.columns.push({ field: "roles" });
    }
    DataGrid.prototype.cellValue = function (row, column) {
        return row[column.field];
    };
    DataGrid.prototype.view = function (xania) {
        return (xania.tag("div", { id: "users", "data-modelid": "Id", className: "xn-grid", role: "grid", "data-itemheight": "31" },
            xania.tag("div", { className: "xn-border-box xn-grid-header", style: "z-index: 100" },
                xania.tag("div", { role: "rowheader", className: "xn-grid-row-header xn-grid-header-cell" }, "\u00A0"),
                xania.tag(xania_1.Repeat, { source: xania_1.expr("for column in columns") },
                    xania.tag("div", { "data-idx": "UserName", role: "gridcell", className: "xn-grid-header-cell" },
                        xania.tag("div", { className: "xn-grid-cell-content" },
                            xania.tag("a", { "data-bind": "click: sort.bind($data, 'UserName')" }, xania_1.expr("column.field"))))),
                xania.tag("div", { className: "xn-grid-header-cell", style: "width: 100%; min-width: 100px" }, "\u00A0")),
            xania.tag("div", { className: "xn-list-scrollable", style: "overflow: auto; height: 100%;", role: "listbox" },
                xania.tag("div", { className: "xn-content", style: "padding-top: 0px; " },
                    xania.tag("table", { style: "width: 100%;" },
                        xania.tag("tbody", { "data-bind": "foreach: view" },
                            xania.tag(xania_1.Repeat, { source: xania_1.expr("for row in data") },
                                xania.tag("tr", { role: "listitem", className: ["xn-list-item", xania_1.expr("row = activeRow -> ' xn-grid-row-activated'"),
                                        xania_1.expr("row.alternate -> ' xn-grid-row-alternate'"), xania_1.expr("row.updated -> ' xn-grid-row-updated'")] },
                                    xania.tag("td", null,
                                        xania.tag("div", { className: "xn-grid-row-header", onClick: this.onRowClick },
                                            xania.tag("span", { className: ["fa", xania_1.expr("row = activeRow -> ' fa-edit'")] }),
                                            xania.tag("input", { type: "radio", style: ["pointer-events: none", xania_1.expr("row = activeRow -> '; display: none'")] }))),
                                    xania.tag(xania_1.Repeat, { source: xania_1.expr("for column in columns") },
                                        xania.tag("td", { role: "gridcell", tabindex: "-1", className: "xn-grid-cell" },
                                            xania.tag("div", { className: "xn-grid-cell-content" },
                                                xania.tag("a", null, xania_1.expr("cellValue row column"))))),
                                    xania.tag("td", { role: "gridcell", tabindex: "-1", className: "xn-grid-cell", style: "width: 100%;" })))))))));
    };
    return DataGrid;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = DataGrid;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImdyaWQudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxzQ0FBMkM7QUFDM0Msc0JBQW1CO0FBRW5CO0lBTUk7UUFBQSxpQkFNQztRQVhPLFNBQUksR0FBRyxFQUFFLENBQUM7UUFDVixZQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2IsY0FBUyxHQUFHLElBQUksQ0FBQztRQUNqQixpQkFBWSxHQUFHLElBQUksQ0FBQztRQVU1QixlQUFVLEdBQUcsVUFBQyxLQUFLLEVBQUUsT0FBTztZQUN4QixJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQzdDLEtBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1lBQzNCLEtBQUksQ0FBQyxZQUFZLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQztRQUN2QyxDQUFDLENBQUM7UUFYRSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFDdEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUcxQyxDQUFDO0lBUUQsNEJBQVMsR0FBVCxVQUFVLEdBQUcsRUFBRSxNQUFNO1FBQ2pCLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFRCx1QkFBSSxHQUFKLFVBQUssS0FBSztRQUNOLE1BQU0sQ0FBQyxDQUNILG1CQUFLLEVBQUUsRUFBQyxPQUFPLGtCQUFjLElBQUksRUFBQyxTQUFTLEVBQUMsU0FBUyxFQUFDLElBQUksRUFBQyxNQUFNLHFCQUFpQixJQUFJO1lBQ2xGLG1CQUFLLFNBQVMsRUFBQyw4QkFBOEIsRUFBQyxLQUFLLEVBQUMsY0FBYztnQkFDOUQsbUJBQUssSUFBSSxFQUFDLFdBQVcsRUFBQyxTQUFTLEVBQUMsd0NBQXdDLGFBQWE7Z0JBQ3JGLFVBQUMsY0FBTSxJQUFDLE1BQU0sRUFBRSxZQUFJLENBQUMsdUJBQXVCLENBQUM7b0JBQ3pDLCtCQUFjLFVBQVUsRUFBQyxJQUFJLEVBQUMsVUFBVSxFQUFDLFNBQVMsRUFBQyxxQkFBcUI7d0JBQ3BFLG1CQUFLLFNBQVMsRUFBQyxzQkFBc0I7NEJBQUMsOEJBQWEscUNBQXFDLElBQUUsWUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFLLENBQU0sQ0FDdkgsQ0FDRDtnQkFDVCxtQkFBSyxTQUFTLEVBQUMscUJBQXFCLEVBQUMsS0FBSyxFQUFDLCtCQUErQixhQUFhLENBQ3JGO1lBRU4sbUJBQUssU0FBUyxFQUFDLG9CQUFvQixFQUFDLEtBQUssRUFBQywrQkFBK0IsRUFBQyxJQUFJLEVBQUMsU0FBUztnQkFDcEYsbUJBQUssU0FBUyxFQUFDLFlBQVksRUFBQyxLQUFLLEVBQUMsb0JBQW9CO29CQUNsRCxxQkFBTyxLQUFLLEVBQUMsY0FBYzt3QkFDdkIsa0NBQWlCLGVBQWU7NEJBQzVCLFVBQUMsY0FBTSxJQUFDLE1BQU0sRUFBRSxZQUFJLENBQUMsaUJBQWlCLENBQUM7Z0NBQ25DLGtCQUFJLElBQUksRUFBQyxVQUFVLEVBQ2YsU0FBUyxFQUFFLENBQUMsY0FBYyxFQUFFLFlBQUksQ0FBQyw2Q0FBNkMsQ0FBQzt3Q0FDM0UsWUFBSSxDQUFDLDJDQUEyQyxDQUFDLEVBQUUsWUFBSSxDQUFDLHVDQUF1QyxDQUFDLENBQUM7b0NBQ3JHO3dDQUNJLG1CQUFLLFNBQVMsRUFBQyxvQkFBb0IsRUFBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFVBQVU7NENBQ3hELG9CQUFNLFNBQVMsRUFBRSxDQUFDLElBQUksRUFBRSxZQUFJLENBQUMsK0JBQStCLENBQUMsQ0FBQyxHQUFTOzRDQUN2RSxxQkFBTyxJQUFJLEVBQUMsT0FBTyxFQUFDLEtBQUssRUFBRSxDQUFDLHNCQUFzQixFQUFFLFlBQUksQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDLEdBQUssQ0FDcEcsQ0FDTDtvQ0FDTCxVQUFDLGNBQU0sSUFBQyxNQUFNLEVBQUUsWUFBSSxDQUFDLHVCQUF1QixDQUFDO3dDQUN6QyxrQkFBSSxJQUFJLEVBQUMsVUFBVSxFQUFDLFFBQVEsRUFBQyxJQUFJLEVBQUMsU0FBUyxFQUFDLGNBQWM7NENBQ3RELG1CQUFLLFNBQVMsRUFBQyxzQkFBc0I7Z0RBQUMscUJBQUksWUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUssQ0FBTSxDQUNoRixDQUNBO29DQUNULGtCQUFJLElBQUksRUFBQyxVQUFVLEVBQUMsUUFBUSxFQUFDLElBQUksRUFBQyxTQUFTLEVBQUMsY0FBYyxFQUFDLEtBQUssRUFBQyxjQUFjLEdBQU0sQ0FDcEYsQ0FDQSxDQUNMLENBQ0osQ0FDTixDQUNKLENBQ0osQ0FDVCxDQUFDO0lBQ04sQ0FBQztJQUNMLGVBQUM7QUFBRCxDQUFDLEFBbEVELElBa0VDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVwZWF0LCBleHByIH0gZnJvbSBcIi4uL3NyYy94YW5pYVwiXHJcbmltcG9ydCAnLi9ncmlkLmNzcydcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERhdGFHcmlkIHtcclxuICAgIHByaXZhdGUgZGF0YSA9IFtdO1xyXG4gICAgcHJpdmF0ZSBjb2x1bW5zID0gW107XHJcbiAgICBwcml2YXRlIGFjdGl2ZVJvdyA9IG51bGw7XHJcbiAgICBwcml2YXRlIGFjdGl2ZVJlY29yZCA9IG51bGw7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5jb2x1bW5zLnB1c2goeyBmaWVsZDogXCJuYW1lXCIgfSk7XHJcbiAgICAgICAgdGhpcy5jb2x1bW5zLnB1c2goeyBmaWVsZDogXCJlbWFpbFwiIH0pO1xyXG4gICAgICAgIHRoaXMuY29sdW1ucy5wdXNoKHsgZmllbGQ6IFwicm9sZXNcIiB9KTtcclxuXHJcbiAgICAgICAgLy8gRW1haWxDb25maXJtZWRcclxuICAgIH1cclxuXHJcbiAgICBvblJvd0NsaWNrID0gKGV2ZW50LCBjb250ZXh0KSA9PiB7XHJcbiAgICAgICAgdmFyIGFjdGl2ZVJvdyA9IGNvbnRleHQuZ2V0KCdyb3cnKS52YWx1ZU9mKCk7XHJcbiAgICAgICAgdGhpcy5hY3RpdmVSb3cgPSBhY3RpdmVSb3c7XHJcbiAgICAgICAgdGhpcy5hY3RpdmVSZWNvcmQgPSBhY3RpdmVSb3cuZGF0YTtcclxuICAgIH07XHJcblxyXG4gICAgY2VsbFZhbHVlKHJvdywgY29sdW1uKSB7XHJcbiAgICAgICAgcmV0dXJuIHJvd1tjb2x1bW4uZmllbGRdO1xyXG4gICAgfVxyXG5cclxuICAgIHZpZXcoeGFuaWEpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGlkPVwidXNlcnNcIiBkYXRhLW1vZGVsaWQ9XCJJZFwiIGNsYXNzTmFtZT1cInhuLWdyaWRcIiByb2xlPVwiZ3JpZFwiIGRhdGEtaXRlbWhlaWdodD1cIjMxXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInhuLWJvcmRlci1ib3ggeG4tZ3JpZC1oZWFkZXJcIiBzdHlsZT1cInotaW5kZXg6IDEwMFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgcm9sZT1cInJvd2hlYWRlclwiIGNsYXNzTmFtZT1cInhuLWdyaWQtcm93LWhlYWRlciB4bi1ncmlkLWhlYWRlci1jZWxsXCI+Jm5ic3A7PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPFJlcGVhdCBzb3VyY2U9e2V4cHIoXCJmb3IgY29sdW1uIGluIGNvbHVtbnNcIil9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtaWR4PVwiVXNlck5hbWVcIiByb2xlPVwiZ3JpZGNlbGxcIiBjbGFzc05hbWU9XCJ4bi1ncmlkLWhlYWRlci1jZWxsXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInhuLWdyaWQtY2VsbC1jb250ZW50XCI+PGEgZGF0YS1iaW5kPVwiY2xpY2s6IHNvcnQuYmluZCgkZGF0YSwgJ1VzZXJOYW1lJylcIj57ZXhwcihcImNvbHVtbi5maWVsZFwiKX08L2E+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvUmVwZWF0PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwieG4tZ3JpZC1oZWFkZXItY2VsbFwiIHN0eWxlPVwid2lkdGg6IDEwMCU7IG1pbi13aWR0aDogMTAwcHhcIj4mbmJzcDs8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwieG4tbGlzdC1zY3JvbGxhYmxlXCIgc3R5bGU9XCJvdmVyZmxvdzogYXV0bzsgaGVpZ2h0OiAxMDAlO1wiIHJvbGU9XCJsaXN0Ym94XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ4bi1jb250ZW50XCIgc3R5bGU9XCJwYWRkaW5nLXRvcDogMHB4OyBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIHN0eWxlPVwid2lkdGg6IDEwMCU7XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHkgZGF0YS1iaW5kPVwiZm9yZWFjaDogdmlld1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxSZXBlYXQgc291cmNlPXtleHByKFwiZm9yIHJvdyBpbiBkYXRhXCIpfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIHJvbGU9XCJsaXN0aXRlbVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e1tcInhuLWxpc3QtaXRlbVwiLCBleHByKFwicm93ID0gYWN0aXZlUm93IC0+ICcgeG4tZ3JpZC1yb3ctYWN0aXZhdGVkJ1wiKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByKFwicm93LmFsdGVybmF0ZSAtPiAnIHhuLWdyaWQtcm93LWFsdGVybmF0ZSdcIiksIGV4cHIoXCJyb3cudXBkYXRlZCAtPiAnIHhuLWdyaWQtcm93LXVwZGF0ZWQnXCIpXX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ4bi1ncmlkLXJvdy1oZWFkZXJcIiBvbkNsaWNrPXt0aGlzLm9uUm93Q2xpY2t9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9e1tcImZhXCIsIGV4cHIoXCJyb3cgPSBhY3RpdmVSb3cgLT4gJyBmYS1lZGl0J1wiKV19Pjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiIHN0eWxlPXtbXCJwb2ludGVyLWV2ZW50czogbm9uZVwiLCBleHByKFwicm93ID0gYWN0aXZlUm93IC0+ICc7IGRpc3BsYXk6IG5vbmUnXCIpXSB9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFJlcGVhdCBzb3VyY2U9e2V4cHIoXCJmb3IgY29sdW1uIGluIGNvbHVtbnNcIil9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCByb2xlPVwiZ3JpZGNlbGxcIiB0YWJpbmRleD1cIi0xXCIgY2xhc3NOYW1lPVwieG4tZ3JpZC1jZWxsXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwieG4tZ3JpZC1jZWxsLWNvbnRlbnRcIj48YT57ZXhwcihcImNlbGxWYWx1ZSByb3cgY29sdW1uXCIpfTwvYT48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9SZXBlYXQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgcm9sZT1cImdyaWRjZWxsXCIgdGFiaW5kZXg9XCItMVwiIGNsYXNzTmFtZT1cInhuLWdyaWQtY2VsbFwiIHN0eWxlPVwid2lkdGg6IDEwMCU7XCI+PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1JlcGVhdD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG4iXX0=