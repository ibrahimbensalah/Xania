"use strict";
var xania_1 = require("../src/xania");
require("./grid.css");
var DataGrid = (function () {
    function DataGrid() {
        var _this = this;
        this.data = [];
        this.columns = [];
        this.activeRow = null;
        this.activeRecord = null;
        this.onRowClick = function (event, context) {
            var activeRow = context.get('row').valueOf();
            _this.activeRow = activeRow;
            _this.activeRecord = activeRow.data;
            event.preventDefault();
        };
        this.columns.push({ field: "name" });
        this.columns.push({ field: "email" });
        this.columns.push({ field: "roles" });
    }
    DataGrid.prototype.cellValue = function (row, column) {
        return row[column.field];
    };
    DataGrid.prototype.view = function (xania) {
        return (xania.tag("div", { id: "users", "data-modelid": "Id", className: "xn-grid", role: "grid", "data-itemheight": "31" },
            xania.tag("div", { className: "xn-border-box xn-grid-header", style: "z-index: 100" },
                xania.tag("div", { role: "rowheader", className: "xn-grid-row-header xn-grid-header-cell" }, "\u00A0"),
                xania.tag(xania_1.ForEach, { expr: xania_1.query("for column in columns") },
                    xania.tag("div", { "data-idx": "UserName", role: "gridcell", className: "xn-grid-header-cell" },
                        xania.tag("div", { className: "xn-grid-cell-content" },
                            xania.tag("a", { "data-bind": "click: sort.bind($data, 'UserName')" }, xania_1.query("column.field"))))),
                xania.tag("div", { className: "xn-grid-header-cell", style: "width: 100%; min-width: 100px" }, "\u00A0")),
            xania.tag("div", { className: "xn-list-scrollable", style: "overflow: auto; height: 100%;", role: "listbox" },
                xania.tag("div", { className: "xn-content", style: "padding-top: 0px; " },
                    xania.tag("table", { style: "width: 100%;" },
                        xania.tag("tbody", { "data-bind": "foreach: view" },
                            xania.tag(xania_1.ForEach, { expr: xania_1.query("for row in data") },
                                xania.tag("tr", { role: "listitem", onClick: this.onRowClick, className: ["xn-list-item", xania_1.query("row = activeRow -> ' xn-grid-row-activated'"),
                                        xania_1.query("row.alternate -> ' xn-grid-row-alternate'"), xania_1.query("row.updated -> ' xn-grid-row-updated'")] },
                                    xania.tag("td", null,
                                        xania.tag("div", { className: "xn-grid-row-header" },
                                            xania.tag("span", { className: ["fa", xania_1.query("row = activeRow -> ' fa-edit'")] }))),
                                    xania.tag(xania_1.ForEach, { expr: xania_1.query("for column in columns") },
                                        xania.tag("td", { role: "gridcell", tabindex: "-1", className: "xn-grid-cell" },
                                            xania.tag("div", { className: "xn-grid-cell-content" },
                                                xania.tag("a", { href: "#" }, xania_1.query("cellValue row column"))))),
                                    xania.tag("td", { role: "gridcell", tabindex: "-1", className: "xn-grid-cell", style: "width: 100%;" })))))))));
    };
    return DataGrid;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = DataGrid;
function bla() { }
exports.bla = bla;
//# sourceMappingURL=data:application/json;base64,