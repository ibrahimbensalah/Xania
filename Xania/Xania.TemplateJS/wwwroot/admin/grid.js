"use strict";
var xania_1 = require("../src/xania");
require("./grid.css");
var DataGrid = (function () {
    function DataGrid() {
        var _this = this;
        this.data = [];
        this.columns = [];
        this.activeRow = null;
        this.activeRecord = null;
        this.onRowClick = function (event, context) {
            var activeRow = context.get('row').valueOf();
            _this.activeRow = activeRow;
            _this.activeRecord = activeRow.data;
            event.preventDefault();
        };
        this.columns.push({ field: "name" });
        this.columns.push({ field: "email" });
        this.columns.push({ field: "roles" });
    }
    DataGrid.prototype.cellValue = function (row, column) {
        return row[column.field];
    };
    DataGrid.prototype.view = function (xania) {
        return (xania.tag("div", { id: "users", "data-modelid": "Id", className: "xn-grid", role: "grid", "data-itemheight": "31" },
            xania.tag("div", { className: "xn-border-box xn-grid-header", style: "z-index: 100" },
                xania.tag("div", { role: "rowheader", className: "xn-grid-row-header xn-grid-header-cell" }, "\u00A0"),
                xania.tag(xania_1.Repeat, { source: xania_1.expr("for column in columns") },
                    xania.tag("div", { "data-idx": "UserName", role: "gridcell", className: "xn-grid-header-cell" },
                        xania.tag("div", { className: "xn-grid-cell-content" },
                            xania.tag("a", { "data-bind": "click: sort.bind($data, 'UserName')" }, xania_1.expr("column.field"))))),
                xania.tag("div", { className: "xn-grid-header-cell", style: "width: 100%; min-width: 100px" }, "\u00A0")),
            xania.tag("div", { className: "xn-list-scrollable", style: "overflow: auto; height: 100%;", role: "listbox" },
                xania.tag("div", { className: "xn-content", style: "padding-top: 0px; " },
                    xania.tag("table", { style: "width: 100%;" },
                        xania.tag("tbody", { "data-bind": "foreach: view" },
                            xania.tag(xania_1.Repeat, { source: xania_1.expr("for row in data") },
                                xania.tag("tr", { role: "listitem", onClick: this.onRowClick, className: ["xn-list-item", xania_1.expr("row = activeRow -> ' xn-grid-row-activated'"),
                                        xania_1.expr("row.alternate -> ' xn-grid-row-alternate'"), xania_1.expr("row.updated -> ' xn-grid-row-updated'")] },
                                    xania.tag("td", null,
                                        xania.tag("div", { className: "xn-grid-row-header" },
                                            xania.tag("span", { className: ["fa", xania_1.expr("row = activeRow -> ' fa-edit'")] }))),
                                    xania.tag(xania_1.Repeat, { source: xania_1.expr("for column in columns") },
                                        xania.tag("td", { role: "gridcell", tabindex: "-1", className: "xn-grid-cell" },
                                            xania.tag("div", { className: "xn-grid-cell-content" },
                                                xania.tag("a", { href: "#" }, xania_1.expr("cellValue row column"))))),
                                    xania.tag("td", { role: "gridcell", tabindex: "-1", className: "xn-grid-cell", style: "width: 100%;" })))))))));
    };
    return DataGrid;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = DataGrid;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImdyaWQudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxzQ0FBMkM7QUFDM0Msc0JBQW1CO0FBRW5CO0lBTUk7UUFBQSxpQkFNQztRQVhPLFNBQUksR0FBRyxFQUFFLENBQUM7UUFDVixZQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2IsY0FBUyxHQUFHLElBQUksQ0FBQztRQUNqQixpQkFBWSxHQUFHLElBQUksQ0FBQztRQVU1QixlQUFVLEdBQUcsVUFBQyxLQUFLLEVBQUUsT0FBTztZQUN4QixJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQzdDLEtBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1lBQzNCLEtBQUksQ0FBQyxZQUFZLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQztZQUNuQyxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDM0IsQ0FBQyxDQUFDO1FBWkUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUNyQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFHMUMsQ0FBQztJQVNELDRCQUFTLEdBQVQsVUFBVSxHQUFHLEVBQUUsTUFBTTtRQUNqQixNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRUQsdUJBQUksR0FBSixVQUFLLEtBQUs7UUFDTixNQUFNLENBQUMsQ0FDSCxtQkFBSyxFQUFFLEVBQUMsT0FBTyxrQkFBYyxJQUFJLEVBQUMsU0FBUyxFQUFDLFNBQVMsRUFBQyxJQUFJLEVBQUMsTUFBTSxxQkFBaUIsSUFBSTtZQUNsRixtQkFBSyxTQUFTLEVBQUMsOEJBQThCLEVBQUMsS0FBSyxFQUFDLGNBQWM7Z0JBQzlELG1CQUFLLElBQUksRUFBQyxXQUFXLEVBQUMsU0FBUyxFQUFDLHdDQUF3QyxhQUFhO2dCQUNyRixVQUFDLGNBQU0sSUFBQyxNQUFNLEVBQUUsWUFBSSxDQUFDLHVCQUF1QixDQUFDO29CQUN6QywrQkFBYyxVQUFVLEVBQUMsSUFBSSxFQUFDLFVBQVUsRUFBQyxTQUFTLEVBQUMscUJBQXFCO3dCQUNwRSxtQkFBSyxTQUFTLEVBQUMsc0JBQXNCOzRCQUFDLDhCQUFhLHFDQUFxQyxJQUFFLFlBQUksQ0FBQyxjQUFjLENBQUMsQ0FBSyxDQUFNLENBQ3ZILENBQ0Q7Z0JBQ1QsbUJBQUssU0FBUyxFQUFDLHFCQUFxQixFQUFDLEtBQUssRUFBQywrQkFBK0IsYUFBYSxDQUNyRjtZQUVOLG1CQUFLLFNBQVMsRUFBQyxvQkFBb0IsRUFBQyxLQUFLLEVBQUMsK0JBQStCLEVBQUMsSUFBSSxFQUFDLFNBQVM7Z0JBQ3BGLG1CQUFLLFNBQVMsRUFBQyxZQUFZLEVBQUMsS0FBSyxFQUFDLG9CQUFvQjtvQkFDbEQscUJBQU8sS0FBSyxFQUFDLGNBQWM7d0JBQ3ZCLGtDQUFpQixlQUFlOzRCQUM1QixVQUFDLGNBQU0sSUFBQyxNQUFNLEVBQUUsWUFBSSxDQUFDLGlCQUFpQixDQUFDO2dDQUNuQyxrQkFBSSxJQUFJLEVBQUMsVUFBVSxFQUNmLE9BQU8sRUFBRSxJQUFJLENBQUMsVUFBVSxFQUN4QixTQUFTLEVBQUUsQ0FBQyxjQUFjLEVBQUUsWUFBSSxDQUFDLDZDQUE2QyxDQUFDO3dDQUMzRSxZQUFJLENBQUMsMkNBQTJDLENBQUMsRUFBRSxZQUFJLENBQUMsdUNBQXVDLENBQUMsQ0FBQztvQ0FDckc7d0NBQ0ksbUJBQUssU0FBUyxFQUFDLG9CQUFvQjs0Q0FDL0Isb0JBQU0sU0FBUyxFQUFFLENBQUMsSUFBSSxFQUFFLFlBQUksQ0FBQywrQkFBK0IsQ0FBQyxDQUFDLEdBQVMsQ0FDckUsQ0FDTDtvQ0FDTCxVQUFDLGNBQU0sSUFBQyxNQUFNLEVBQUUsWUFBSSxDQUFDLHVCQUF1QixDQUFDO3dDQUN6QyxrQkFBSSxJQUFJLEVBQUMsVUFBVSxFQUFDLFFBQVEsRUFBQyxJQUFJLEVBQUMsU0FBUyxFQUFDLGNBQWM7NENBQ3RELG1CQUFLLFNBQVMsRUFBQyxzQkFBc0I7Z0RBQUMsaUJBQUcsSUFBSSxFQUFDLEdBQUcsSUFBRSxZQUFJLENBQUMsc0JBQXNCLENBQUMsQ0FBSyxDQUFNLENBQ3pGLENBQ0E7b0NBQ1Qsa0JBQUksSUFBSSxFQUFDLFVBQVUsRUFBQyxRQUFRLEVBQUMsSUFBSSxFQUFDLFNBQVMsRUFBQyxjQUFjLEVBQUMsS0FBSyxFQUFDLGNBQWMsR0FBTSxDQUNwRixDQUNBLENBQ0wsQ0FDSixDQUNOLENBQ0osQ0FDSixDQUNULENBQUM7SUFDTixDQUFDO0lBQ0wsZUFBQztBQUFELENBQUMsQUFuRUQsSUFtRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXBlYXQsIGV4cHIgfSBmcm9tIFwiLi4vc3JjL3hhbmlhXCJcclxuaW1wb3J0ICcuL2dyaWQuY3NzJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGF0YUdyaWQge1xyXG4gICAgcHJpdmF0ZSBkYXRhID0gW107XHJcbiAgICBwcml2YXRlIGNvbHVtbnMgPSBbXTtcclxuICAgIHByaXZhdGUgYWN0aXZlUm93ID0gbnVsbDtcclxuICAgIHByaXZhdGUgYWN0aXZlUmVjb3JkID0gbnVsbDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmNvbHVtbnMucHVzaCh7IGZpZWxkOiBcIm5hbWVcIiB9KTtcclxuICAgICAgICB0aGlzLmNvbHVtbnMucHVzaCh7IGZpZWxkOiBcImVtYWlsXCIgfSk7XHJcbiAgICAgICAgdGhpcy5jb2x1bW5zLnB1c2goeyBmaWVsZDogXCJyb2xlc1wiIH0pO1xyXG5cclxuICAgICAgICAvLyBFbWFpbENvbmZpcm1lZFxyXG4gICAgfVxyXG5cclxuICAgIG9uUm93Q2xpY2sgPSAoZXZlbnQsIGNvbnRleHQpID0+IHtcclxuICAgICAgICB2YXIgYWN0aXZlUm93ID0gY29udGV4dC5nZXQoJ3JvdycpLnZhbHVlT2YoKTtcclxuICAgICAgICB0aGlzLmFjdGl2ZVJvdyA9IGFjdGl2ZVJvdztcclxuICAgICAgICB0aGlzLmFjdGl2ZVJlY29yZCA9IGFjdGl2ZVJvdy5kYXRhO1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNlbGxWYWx1ZShyb3csIGNvbHVtbikge1xyXG4gICAgICAgIHJldHVybiByb3dbY29sdW1uLmZpZWxkXTtcclxuICAgIH1cclxuXHJcbiAgICB2aWV3KHhhbmlhKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBpZD1cInVzZXJzXCIgZGF0YS1tb2RlbGlkPVwiSWRcIiBjbGFzc05hbWU9XCJ4bi1ncmlkXCIgcm9sZT1cImdyaWRcIiBkYXRhLWl0ZW1oZWlnaHQ9XCIzMVwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ4bi1ib3JkZXItYm94IHhuLWdyaWQtaGVhZGVyXCIgc3R5bGU9XCJ6LWluZGV4OiAxMDBcIj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IHJvbGU9XCJyb3doZWFkZXJcIiBjbGFzc05hbWU9XCJ4bi1ncmlkLXJvdy1oZWFkZXIgeG4tZ3JpZC1oZWFkZXItY2VsbFwiPiZuYnNwOzwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxSZXBlYXQgc291cmNlPXtleHByKFwiZm9yIGNvbHVtbiBpbiBjb2x1bW5zXCIpfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBkYXRhLWlkeD1cIlVzZXJOYW1lXCIgcm9sZT1cImdyaWRjZWxsXCIgY2xhc3NOYW1lPVwieG4tZ3JpZC1oZWFkZXItY2VsbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ4bi1ncmlkLWNlbGwtY29udGVudFwiPjxhIGRhdGEtYmluZD1cImNsaWNrOiBzb3J0LmJpbmQoJGRhdGEsICdVc2VyTmFtZScpXCI+e2V4cHIoXCJjb2x1bW4uZmllbGRcIil9PC9hPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L1JlcGVhdD5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInhuLWdyaWQtaGVhZGVyLWNlbGxcIiBzdHlsZT1cIndpZHRoOiAxMDAlOyBtaW4td2lkdGg6IDEwMHB4XCI+Jm5ic3A7PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInhuLWxpc3Qtc2Nyb2xsYWJsZVwiIHN0eWxlPVwib3ZlcmZsb3c6IGF1dG87IGhlaWdodDogMTAwJTtcIiByb2xlPVwibGlzdGJveFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwieG4tY29udGVudFwiIHN0eWxlPVwicGFkZGluZy10b3A6IDBweDsgXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBzdHlsZT1cIndpZHRoOiAxMDAlO1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5IGRhdGEtYmluZD1cImZvcmVhY2g6IHZpZXdcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UmVwZWF0IHNvdXJjZT17ZXhwcihcImZvciByb3cgaW4gZGF0YVwiKX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciByb2xlPVwibGlzdGl0ZW1cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5vblJvd0NsaWNrfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtbXCJ4bi1saXN0LWl0ZW1cIiwgZXhwcihcInJvdyA9IGFjdGl2ZVJvdyAtPiAnIHhuLWdyaWQtcm93LWFjdGl2YXRlZCdcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcihcInJvdy5hbHRlcm5hdGUgLT4gJyB4bi1ncmlkLXJvdy1hbHRlcm5hdGUnXCIpLCBleHByKFwicm93LnVwZGF0ZWQgLT4gJyB4bi1ncmlkLXJvdy11cGRhdGVkJ1wiKV19PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwieG4tZ3JpZC1yb3ctaGVhZGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT17W1wiZmFcIiwgZXhwcihcInJvdyA9IGFjdGl2ZVJvdyAtPiAnIGZhLWVkaXQnXCIpXX0+PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxSZXBlYXQgc291cmNlPXtleHByKFwiZm9yIGNvbHVtbiBpbiBjb2x1bW5zXCIpfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgcm9sZT1cImdyaWRjZWxsXCIgdGFiaW5kZXg9XCItMVwiIGNsYXNzTmFtZT1cInhuLWdyaWQtY2VsbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInhuLWdyaWQtY2VsbC1jb250ZW50XCI+PGEgaHJlZj1cIiNcIj57ZXhwcihcImNlbGxWYWx1ZSByb3cgY29sdW1uXCIpfTwvYT48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9SZXBlYXQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgcm9sZT1cImdyaWRjZWxsXCIgdGFiaW5kZXg9XCItMVwiIGNsYXNzTmFtZT1cInhuLWdyaWQtY2VsbFwiIHN0eWxlPVwid2lkdGg6IDEwMCU7XCI+PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1JlcGVhdD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG4iXX0=