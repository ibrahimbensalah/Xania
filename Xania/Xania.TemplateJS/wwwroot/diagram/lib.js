"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
require("./diagram.css");
var dom_1 = require("../src/dom");
var compile_1 = require("../src/compile");
var GraphApp = (function () {
    function GraphApp() {
        this.P1 = { x: 100, y: 10 };
        this.P2 = { x: 400, y: 100 };
    }
    GraphApp.horizontalArrow = function (_a, _b) {
        var x1 = _a.x, y1 = _a.y;
        var x2 = _b.x, y2 = _b.y;
        var d = (x2 - x1) / 2;
        return "m" + x1 + "," + y1 + " C" + (x1 + d) + "," + y1 + " " + (x2 - d) + "," + y2 + " " + x2 + "," + y2;
    };
    GraphApp.input = function (x, y) {
        return { x: x, y: y + 50 };
    };
    GraphApp.output = function (x, y) {
        return { x: x + 100, y: y + 50 };
    };
    GraphApp.prototype.view = function (xania) {
        return (xania.tag("div", { style: "height: 100%;" },
            xania.tag("div", { className: ["xania-diagram", compile_1.default("pressed -> ' pressed'")] },
                xania.tag(Draggable, { x: compile_1.default("P1.x"), y: compile_1.default("P1.y"), style: "background-color: blue;" }),
                xania.tag(Draggable, { x: compile_1.default("P2.x"), y: compile_1.default("P2.y"), style: "background-color: orange;" }),
                xania.tag(Draggable, { x: compile_1.default("P1.x"), y: compile_1.default("P1.y + 200"), style: "background-color: green;" }),
                xania.tag("svg", null,
                    xania.tag("g", null,
                        xania.tag("path", { d: compile_1.default("horizontalArrow (output P1.x P1.y) (input P2.x P2.y)"), stroke: "black" }),
                        xania.tag("path", { d: compile_1.default("horizontalArrow (output P1.x (P1.y + 200)) (input P2.x P2.y)"), stroke: "black" }))))));
    };
    return GraphApp;
}());
exports.GraphApp = GraphApp;
var Canvas = (function () {
    function Canvas(attrs, children) {
        this.attrs = attrs;
        this.children = children;
    }
    Canvas.prototype.bind = function () {
        var tag = new dom_1.Dom.TagBinding("div", null, this.children.map(function (x) { return x.bind(); })), attrs = this.attrs;
        for (var prop in attrs) {
            if (attrs.hasOwnProperty(prop)) {
                var attrValue = attrs[prop];
                tag.attr(prop.toLowerCase(), attrValue);
            }
        }
        return tag;
    };
    return Canvas;
}());
var Draggable = (function () {
    function Draggable(attrs, children) {
        this.attrs = attrs;
        this.children = children;
    }
    Draggable.prototype.bind = function () {
        var tag = new DraggableBinding(this.attrs, this.children.map(function (x) { return x.bind(); })), attrs = this.attrs;
        tag.attr("class", "xania-draggable");
        for (var prop in attrs) {
            if (attrs.hasOwnProperty(prop) && prop !== "x" && prop !== "y") {
                var attrValue = attrs[prop];
                if (prop === "className" || prop === "classname" || prop === "clazz")
                    tag.attr("class", "xania-draggable " + attrValue);
                else
                    tag.attr(prop.toLowerCase(), attrValue);
            }
        }
        return tag;
    };
    return Draggable;
}());
var DraggableBinding = (function (_super) {
    __extends(DraggableBinding, _super);
    function DraggableBinding(props, childBindings) {
        var _this = _super.call(this, "div", null, childBindings) || this;
        _this.props = props;
        _this.pressed = null;
        _this.state = { left: 0, top: 0, clientX: 0, clientY: 0 };
        _this.press = function (event) {
            var clientX = event.clientX, clientY = event.clientY, target = event.target;
            do {
                if (target.classList.contains("xania-draggable"))
                    break;
                target = target.parentElement;
            } while (target);
            if (!target)
                return;
            var _a = window.getComputedStyle(target), top = _a.top, left = _a.left;
            _this.state = {
                top: DraggableBinding.prixels(top),
                left: DraggableBinding.prixels(left),
                clientX: clientX,
                clientY: clientY
            };
            _this.pressed = target;
        };
        _this.release = function (event) {
            _this.pressed = null;
            _this.state = null;
        };
        _this.drag = function (event) {
            if (event.buttons !== 1)
                return;
            var clientX = event.clientX, clientY = event.clientY;
            var state = _this.state;
            if (!state)
                return;
            var left = state.left + clientX - state.clientX;
            var top = state.top + clientY - state.clientY;
            if (state.left !== left || state.top !== top) {
                state.clientX = clientX;
                state.clientY = clientY;
                state.left = left;
                state.top = top;
                var x = _this.evaluateObject(_this.props.x);
                var y = _this.evaluateObject(_this.props.y);
                if (typeof x.set === "function")
                    x.set(left);
                if (typeof y.set === "function")
                    y.set(top);
            }
        };
        _this.event("mousedown", _this.press);
        _this.event("mousemove", _this.drag);
        _this.event("mouseup", _this.release);
        return _this;
    }
    DraggableBinding.prixels = function (px) {
        return parseFloat(px.replace("px", "")) || 0;
    };
    DraggableBinding.prototype.render = function (context, driver) {
        _super.prototype.render.call(this, context, driver);
        var x = this.evaluateText(this.props.x);
        var y = this.evaluateText(this.props.y);
        var style = this.tagNode.style;
        style.left = x + "px";
        style.top = y + "px";
    };
    return DraggableBinding;
}(dom_1.Dom.TagBinding));
//# sourceMappingURL=data:application/json;base64,