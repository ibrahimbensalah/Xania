"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
require("./diagram.css");
var dom_1 = require("../src/dom");
var compile_1 = require("../src/compile");
var GraphApp = (function () {
    function GraphApp() {
        this.P1 = { x: 10, y: 10 };
        this.P2 = { x: 300, y: 200 };
    }
    GraphApp.horizontalArrow = function (x1, y1, x2, y2) {
        var d = (x2 - x1) / 2;
        return "m" + x1 + "," + y1 + " C" + (x1 + d) + "," + y1 + " " + (x2 - d) + "," + y2 + " " + x2 + "," + y2;
    };
    GraphApp.prototype.move = function (x, y) {
        this.P2.x = x;
        this.P2.y = y + 50;
    };
    GraphApp.prototype.view = function (xania) {
        return (xania.tag("div", null,
            xania.tag("div", { className: ["xania-diagram", compile_1.default("pressed -> ' pressed'")] },
                xania.tag(Draggable, { style: "background-color: orange;", onMove: compile_1.default("move x y") }),
                xania.tag("svg", null,
                    xania.tag("g", null,
                        xania.tag("path", { d: compile_1.default("horizontalArrow P1.x P1.y P2.x P2.y"), stroke: "black" }))))));
    };
    return GraphApp;
}());
exports.GraphApp = GraphApp;
var Canvas = (function () {
    function Canvas(attrs, children) {
        this.attrs = attrs;
        this.children = children;
    }
    Canvas.prototype.bind = function () {
        var tag = new dom_1.Dom.TagBinding("div", null, this.children.map(function (x) { return x.bind(); })), attrs = this.attrs;
        for (var prop in attrs) {
            if (attrs.hasOwnProperty(prop)) {
                var attrValue = attrs[prop];
                tag.attr(prop.toLowerCase(), attrValue);
            }
        }
        return tag;
    };
    return Canvas;
}());
var Draggable = (function () {
    function Draggable(attrs, children) {
        var _this = this;
        this.attrs = attrs;
        this.children = children;
        this.pressed = null;
        this.state = { left: 0, top: 0, clientX: 0, clientY: 0 };
        this.press = function (event) {
            event.stopPropagation();
            var clientX = event.clientX, clientY = event.clientY, target = event.target;
            do {
                if (target.classList.contains("xania-draggable"))
                    break;
                target = target.parentElement;
            } while (target);
            if (!target)
                return;
            var _a = window.getComputedStyle(target), top = _a.top, left = _a.left;
            _this.state = {
                top: Draggable.prixels(top),
                left: Draggable.prixels(left),
                clientX: clientX,
                clientY: clientY
            };
            _this.pressed = target;
        };
        this.release = function (event) {
            _this.pressed = null;
            _this.state = null;
        };
        this.drag = function (event) {
            if (!_this.pressed || event.buttons !== 1)
                return false;
            var clientX = event.clientX, clientY = event.clientY;
            var _a = _this, pressed = _a.pressed, state = _a.state;
            var left = state.left + clientX - state.clientX;
            var top = state.top + clientY - state.clientY;
            if (state.left !== left || state.top !== top) {
                pressed.style.left = state.left + "px";
                pressed.style.top = state.top + "px";
                state.clientX = clientX;
                state.clientY = clientY;
                state.left = left;
                state.top = top;
                return true;
            }
            return false;
        };
    }
    Draggable.prixels = function (px) {
        return parseFloat(px.replace("px", "")) || 0;
    };
    Draggable.prototype.bind = function () {
        var _this = this;
        var tag = new DraggableBinding(this.children.map(function (x) { return x.bind(); })), attrs = this.attrs;
        tag.event("mousedown", this.press);
        tag.event("mousemove", function (event) {
            if (_this.drag(event)) {
                tag.trigger("move", event, { x: _this.state.left, y: _this.state.top });
            }
        });
        tag.event("mouseup", this.release);
        tag.attr("class", "xania-draggable");
        for (var prop in attrs) {
            if (attrs.hasOwnProperty(prop)) {
                var attrValue = attrs[prop];
                if (prop === "className" || prop === "classname" || prop === "clazz")
                    tag.attr("class", "xania-draggable " + attrValue);
                else
                    tag.attr(prop.toLowerCase(), attrValue);
            }
        }
        return tag;
    };
    return Draggable;
}());
var DraggableBinding = (function (_super) {
    __extends(DraggableBinding, _super);
    function DraggableBinding(childBindings) {
        return _super.call(this, "div", null, childBindings) || this;
    }
    DraggableBinding.prototype.render = function (context, driver) {
        _super.prototype.render.call(this, context, {
            insert: function (binding, dom, idx) {
                driver.insert(binding, dom, idx);
            }
        });
    };
    return DraggableBinding;
}(dom_1.Dom.TagBinding));
//# sourceMappingURL=data:application/json;base64,